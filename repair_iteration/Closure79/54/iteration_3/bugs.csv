bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).traverseRoots(externs,  root);  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    checkUserDeclarations).traverse(externs,    root);    	non-compiled	[CE]  not  a  statement	312	None	replace
2	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).traverse(root,  externs);  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).traverse(root,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).traverse(root,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    checkUserDeclarations).traverse(externs,    root);    	non-compiled	[CE]  not  a  statement	312	None	replace
3	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).traverse(externs,  forbidChanges);  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).traverse(externs,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).traverse(externs,  forbidChanges);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    checkUserDeclarations).traverse(externs,    root);    	non-compiled	[CE]  not  a  statement	312	None	replace
4	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkConstants).traverse(externs,  root);  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkConstants).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkConstants).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    checkUserDeclarations).traverse(externs,    root);    	non-compiled	[CE]  not  a  statement	312	None	replace
5	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkForbidChanges).traverse(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkForbidChanges).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkForbidChanges).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    checkUserDeclarations).traverse(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	312	None	replace
6	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).traverse(externs,  root);  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    checkUserDeclarations).traverse(externs,    root);    	non-compiled	[CE]  not  a  statement	312	None	replace
7	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).traverse(externs,  externs);  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).traverse(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).traverse(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    checkUserDeclarations).traverse(externs,    root);    	non-compiled	[CE]  not  a  statement	312	None	replace
8	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  assertOnChange);  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  assertOnChange);	  NodeTraversal.traverse(compiler,    root,    externs);    	non-compiled	[CE]  not  a  statement	76	None	replace
9	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  externals,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  externals,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  externals,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    externs);    	non-compiled	[CE]  not  a  statement	76	None	replace
10	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  checkUserDeclarations);  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  checkUserDeclarations);	  NodeTraversal.traverse(compiler,    root,    externs);    	non-compiled	[CE]  not  a  statement	76	None	replace
11	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  class,  interface,  or  enum  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    externs);    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
12	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  externals,  hasOkDuplicateDeclaration);  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  externals,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  externals,  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    root,    externs);    	non-compiled	[CE]  not  a  statement	76	None	replace
13	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  externs,  hasOkDuplicateDeclaration);  [CE]  not  a  statement  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  externs,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  externs,  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    root,    externs);    	non-compiled	[CE]  not  a  statement	76	None	replace
14	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations.traverse(externs,  root));  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations.traverse(externs,  root));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations.traverse(externs,  root));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations.traverse(root));    	non-compiled	[CE]  	114	None	replace
15	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations.traverse(root));  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations.traverse(root));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations.traverse(root));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations.traverse(root));    	non-compiled	[CE]  	114	None	replace
16	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations.traverse(root),  forbidChanges);  [CE]  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations.traverse(root),  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations.traverse(root),  forbidChanges);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations.traverse(root));    	non-compiled	[CE]  	114	None	replace
17	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkForbidChanges.traverse(root));  [CE]  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkForbidChanges.traverse(root));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkForbidChanges.traverse(root));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations.traverse(root));    	non-compiled	[CE]  	114	None	replace
18	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkDeclarations.traverse(root));  [CE]  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkDeclarations.traverse(root));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkDeclarations.traverse(root));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations.traverse(root));    	non-compiled	[CE]  	114	None	replace
19	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations.traverse(root)));  [CE]  not  a  statement  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations.traverse(root)));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations.traverse(root)));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations.traverse(root));    	non-compiled	[CE]  not  a  statement	114	None	replace
20	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkNodeDeclarations.traverse(root));  [CE]  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkNodeDeclarations.traverse(root));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkNodeDeclarations.traverse(root));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations.traverse(root));    	non-compiled	[CE]  	114	None	replace
21	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs.traverseRoots(externs,  root);  [CE]  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs.traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs.traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs.traverseRoots(externs,    root);    	non-compiled	[CE]  	241	None	replace
22	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  externs.traverseRoots(externs,  root);  [CE]  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  externs.traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  externs.traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs.traverseRoots(externs,    root);    	non-compiled	[CE]  	241	None	replace
23	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs.traverseRoots(externs,  root));  [CE]  class,  interface,  or  enum  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs.traverseRoots(externs,  root));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs.traverseRoots(externs,  root));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs.traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	241	None	replace
24	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  internals.traverseRoots(externs,  root);  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  internals.traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  internals.traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs.traverseRoots(externs,    root);    	non-compiled	[CE]  	241	None	replace
25	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root.traverseRoots(externs,  root);  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root.traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root.traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs.traverseRoots(externs,    root);    	non-compiled	[CE]  	241	None	replace
26	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	235	None	replace
27	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  class,  interface,  or  enum  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	235	None	replace
28	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs,  parent);  [CE]  class,  interface,  or  enum  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs,  parent);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	235	None	replace
29	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  class,  interface,  or  enum  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	235	None	replace
30	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  parent);  [CE]  class,  interface,  or  enum  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  parent);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	235	None	replace
31	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	235	None	replace
32	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null,  externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null,  externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null,  externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	235	None	replace
33	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  true)).traverseRoots(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  true)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  true)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    false)).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	170	None	replace
34	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(externs,  externs);  [CE]  class,  interface,  or  enum  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    false)).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	170	None	replace
35	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(externs,  assertOnChange);  [CE]  class,  interface,  or  enum  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(externs,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(externs,  assertOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    false)).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	170	None	replace
36	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(externs,  root,  assertOnChange);  [CE]  class,  interface,  or  enum  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(externs,  root,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(externs,  root,  assertOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    false)).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	170	None	replace
37	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  true)).traverseRoots(externs,  externs);  [CE]  class,  interface,  or  enum  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  true)).traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  true)).traverseRoots(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    false)).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	170	None	replace
38	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(externs,  externs,  root);  [CE]  ')'  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(externs,  externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(externs,  externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    false)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	170	None	replace
39	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(externs,  externs,  assertOnChange);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(externs,  externs,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(externs,  externs,  assertOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    false)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
40	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    false)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
41	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  class,  interface,  or  enum  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  class,  interface,  or  enum  expected	182	None	replace
42	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  class,  interface,  or  enum  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  class,  interface,  or  enum  expected	182	None	replace
43	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [CE]  class,  interface,  or  enum  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  class,  interface,  or  enum  expected	182	None	replace
44	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [CE]  class,  interface,  or  enum  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  class,  interface,  or  enum  expected	182	None	replace
45	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [CE]  class,  interface,  or  enum  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  class,  interface,  or  enum  expected	182	None	replace
46	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [CE]  class,  interface,  or  enum  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  class,  interface,  or  enum  expected	182	None	replace
47	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  true);  [CE]  ')'  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  true);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  ')'  expected	182	None	replace
48	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [CE]  class,  interface,  or  enum  expected  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  class,  interface,  or  enum  expected	182	None	replace
49	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(root,  externs);  [CE]  class,  interface,  or  enum  expected  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(root,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(root,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root,    externs);    	non-compiled	[CE]  class,  interface,  or  enum  expected	313	None	replace
50	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root,  forbidChanges);  [CE]  class,  interface,  or  enum  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root,  forbidChanges);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root,    externs);    	non-compiled	[CE]  class,  interface,  or  enum  expected	313	None	replace
51	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(root,  externals);  [CE]  ')'  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(root,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(root,  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root,    externs);    	non-compiled	[CE]  ')'  expected	313	None	replace
52	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkForbidChanges)).traverse(root,  externs);  [CE]  class,  interface,  or  enum  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkForbidChanges)).traverse(root,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkForbidChanges)).traverse(root,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root,    externs);    	non-compiled	[CE]  class,  interface,  or  enum  expected	313	None	replace
53	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(root,  forbidChanges);  [CE]  ')'  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(root,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(root,  forbidChanges);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root,    externs);    	non-compiled	[CE]  ')'  expected	313	None	replace
54	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(root,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(root,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(root,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root,    externs);    	non-compiled	[CE]  class,  interface,  or  enum  expected	313	None	replace
55	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  assertOnChange)).traverse(root,  forbidChanges);  [CE]  ')'  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  assertOnChange)).traverse(root,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  assertOnChange)).traverse(root,  forbidChanges);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root,    externs);    	non-compiled	[CE]  ')'  expected	313	None	replace
56	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertNull)).traverse(root);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertNull)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertNull)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertNull)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	193	None	replace
57	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNonChange)).traverse(root);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNonChange)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNonChange)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertNull)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	193	None	replace
58	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	256	None	replace
59	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	256	None	replace
60	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	256	None	replace
61	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	256	None	replace
62	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter,  externs);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter,  externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	256	None	replace
63	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	256	None	replace
64	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(interns,  root);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(interns,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(interns,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	256	None	replace
65	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  assertOnChange)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  assertOnChange)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
66	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
67	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root,  forbidChanges);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root,  forbidChanges);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
68	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
69	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations,  forbidChanges)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations,  forbidChanges)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations,  forbidChanges)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
70	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
71	[BUG]  [BUGGY]  new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  assertOnChange)).traverseRoots(externs,  root);  [CE]  ')'  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  assertOnChange)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	17	None	replace
72	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  root).traverseRoots(externs,  root);  [CE]  ')'  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  root).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  root).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	17	None	replace
73	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  renamer);	  NodeTraversal.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  illegal  start  of  expression	248	None	replace
74	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  renamer);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externes,  renamer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externes,  renamer);	  NodeTraversal.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  illegal  start  of  expression	248	None	replace
75	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  renamer);  [CE]  ')'  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  renamer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externals,  renamer);	  NodeTraversal.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  ')'  expected	248	None	replace
76	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  externs);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  renamer,  externs);	  NodeTraversal.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  illegal  start  of  expression	248	None	replace
77	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  externs);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  renamer,  externs);	  NodeTraversal.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  illegal  start  of  expression	248	None	replace
78	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  this,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  this,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  this,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    this);    	non-compiled	[CE]  illegal  start  of  expression	224	None	replace
79	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  checkUserDeclarations);  [CE]  ')'  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  checkUserDeclarations);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    this);    	non-compiled	[CE]  ')'  expected	224	None	replace
80	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  this,  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  this,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  this,  checkUserDeclarations);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    this);    	non-compiled	[CE]  illegal  start  of  expression	224	None	replace
81	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  checkUserDeclaration);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  checkUserDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  checkUserDeclaration);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    this);    	non-compiled	[CE]  illegal  start  of  expression	224	None	replace
82	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  assertOnChange);  [CE]  ')'  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  assertOnChange);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    this);    	non-compiled	[CE]  ')'  expected	224	None	replace
83	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);  [CE]  ')'  expected  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  ')'  expected	289	None	replace
84	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  checkUserDeclarations);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  illegal  start  of  expression	289	None	replace
85	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  verifyUserDeclarations);  [CE]  ')'  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  verifyUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  verifyUserDeclarations);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  ')'  expected	289	None	replace
86	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  forbidChanges);  [CE]  ')'  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  forbidChanges);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  ')'  expected	289	None	replace
87	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal,  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal,  checkUserDeclarations);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  illegal  start  of  expression	289	None	replace
88	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs,  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs,  checkUserDeclarations);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  illegal  start  of  expression	289	None	replace
89	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  forbidChanges);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  forbidChanges);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  illegal  start  of  expression	289	None	replace
90	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  illegal  start  of  expression	289	None	replace
91	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  ')'  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  ')'  expected	105	None	replace
92	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root);  [CE]  ')'  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  ')'  expected	105	None	replace
93	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter,  externs);  [CE]  ')'  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  ')'  expected	105	None	replace
94	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);  [CE]  ')'  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  ')'  expected	105	None	replace
95	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  assertOnChange);  [CE]  ')'  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  assertOnChange);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    parent);    	non-compiled	[CE]  ')'  expected	184	None	replace
96	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  parent,  hasOkDuplicateDeclaration);  [CE]  ')'  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  parent,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  parent,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    parent);    	non-compiled	[CE]  ')'  expected	184	None	replace
97	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  checkUserDeclarations);  [CE]  ')'  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  checkUserDeclarations);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    parent);    	non-compiled	[CE]  ')'  expected	184	None	replace
98	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  checkUserDeclaration);  [CE]  ')'  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  checkUserDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  checkUserDeclaration);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    parent);    	non-compiled	[CE]  ')'  expected	184	None	replace
99	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).plot(externs,  internal);  [CE]  ')'  expected  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).plot(externs,  internal);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).plot(externs,  internal);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    internal);    	non-compiled	[CE]  ')'  expected	266	None	replace
100	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  internal);  [CE]  ')'  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  internal);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  internal);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    internal);    	non-compiled	[CE]  ')'  expected	266	None	replace
101	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internal)).plot(externs,  assertOnChange);  [CE]  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internal)).plot(externs,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internal)).plot(externs,  assertOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    internal);    	non-compiled	[CE]  	266	None	replace
102	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  internal);  [CE]  ')'  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  internal);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  internal);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    internal);    	non-compiled	[CE]  ')'  expected	266	None	replace
103	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internal)).plot(externs,  root);  [CE]  ')'  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internal)).plot(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internal)).plot(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    internal);    	non-compiled	[CE]  ')'  expected	266	None	replace
104	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internal)).plot(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  ')'  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internal)).plot(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internal)).plot(externs,  MAKE_LOCAL_NAMES_UNIQUE);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    internal);    	non-compiled	[CE]  ')'  expected	266	None	replace
105	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).plot(externs,  internal);  [CE]  ')'  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).plot(externs,  internal);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).plot(externs,  internal);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    internal);    	non-compiled	[CE]  ')'  expected	266	None	replace
106	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverse(externs);  [CE]  ')'  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).straverse(root);    	non-compiled	[CE]  ')'  expected	319	None	replace
107	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).straverse(root);  [CE]  ')'  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).straverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).straverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).straverse(root);    	non-compiled	[CE]  ')'  expected	319	None	replace
108	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).straverse(root);  [CE]  ')'  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).straverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).straverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).straverse(root);    	non-compiled	[CE]  ')'  expected	319	None	replace
109	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverse(root);  [CE]  ')'  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).straverse(root);    	non-compiled	[CE]  ')'  expected	319	None	replace
110	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  verifyOnChanges);  [CE]  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  verifyOnChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  verifyOnChanges);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    forbidChanges);    	non-compiled	[CE]  	106	None	replace
111	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);  [CE]  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    forbidChanges);    	non-compiled	[CE]  	106	None	replace
112	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  false);  [CE]  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  false);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    forbidChanges);    	non-compiled	[CE]  	106	None	replace
113	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);  [CE]  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  	33	None	replace
114	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [CE]  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  	33	None	replace
115	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);  [CE]  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  	33	None	replace
116	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);  [CE]  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  	33	None	replace
117	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [CE]  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  	33	None	replace
118	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs)).traverseRoots(externs,  root);  [CE]  [FE]                                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs)).traverseRoots(externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  	33	None	replace
119	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals)).traverseRoots(externs,  root);  [CE]  ';'  expected  [FE]                                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals)).traverseRoots(externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ';'  expected	33	None	replace
120	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent);  [CE]  [FE]                                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  	33	None	replace
121	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  externs);  [CE]  [FE]                                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  externs);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  	33	None	replace
122	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  FORbidChanges)).traverse(root);  [CE]  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  FORbidChanges)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  FORbidChanges)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    FORbidChanges)).traverse(root);    	non-compiled	[CE]  	161	None	replace
123	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(externs);  [CE]  ';'  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    FORbidChanges)).traverse(root);    	non-compiled	[CE]  ';'  expected	161	None	replace
124	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORbidChanges)).traverse(externs);  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORbidChanges)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORbidChanges)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    FORbidChanges)).traverse(root);    	non-compiled	[CE]  	161	None	replace
125	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(externs,  root);  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    FORbidChanges)).traverse(root);    	non-compiled	[CE]  	161	None	replace
126	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(root);  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseValues(externs);    	non-compiled	[CE]  	198	None	replace
127	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs);  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseValues(externs);    	non-compiled	[CE]  	198	None	replace
128	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseValues(externs);  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseValues(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseValues(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseValues(externs);    	non-compiled	[CE]  	198	None	replace
129	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  parent);  [CE]  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  parent);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseValues(externs);    	non-compiled	[CE]  	198	None	replace
130	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  forbidChanges);  [CE]  ';'  expected  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  forbidChanges);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseValues(externs);    	non-compiled	[CE]  ';'  expected	198	None	replace
131	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  checkUserDeclarations);  [CE]  ';'  expected  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  checkUserDeclarations);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseValues(externs);    	non-compiled	[CE]  ';'  expected	198	None	replace
132	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internals,  root);  [CE]  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internals,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internals,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externals,    root);    	non-compiled	[CE]  	317	None	replace
133	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  internals);  [CE]  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  internals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  internals);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externals,    root);    	non-compiled	[CE]  	317	None	replace
134	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEmpty)).traverse(externs);  [CE]  ';'  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEmpty)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEmpty)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertEmpty)).traverse(root);    	non-compiled	[CE]  ';'  expected	192	None	replace
135	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertEmpty)).traverse(root);  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertEmpty)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertEmpty)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertEmpty)).traverse(root);    	non-compiled	[CE]  	192	None	replace
136	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEmpty)).traverseRoots(externs,  root);  [CE]  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEmpty)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEmpty)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertEmpty)).traverse(root);    	non-compiled	[CE]  	192	None	replace
137	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEmpty)).traverse(externs,  root);  [CE]  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEmpty)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEmpty)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertEmpty)).traverse(root);    	non-compiled	[CE]  	192	None	replace
138	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  verifyOnChange);  [CE]  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  verifyOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  verifyOnChange);	  NodeTraversal.traverse(compiler,    externs,    root,    assertOnChange);    	non-compiled	[CE]  	93	None	replace
139	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  assertOnChange,  checkUserDeclarations);  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  assertOnChange,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  assertOnChange,  checkUserDeclarations);	  NodeTraversal.traverse(compiler,    externs,    root,    assertOnChange);    	non-compiled	[CE]  	93	None	replace
140	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  assertOnChange,  checkUserDeclarations);  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  assertOnChange,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  assertOnChange,  checkUserDeclarations);	  NodeTraversal.traverse(compiler,    externs,    root,    assertOnChange);    	non-compiled	[CE]  	93	None	replace
141	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  checkUserDeclaration);  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  checkUserDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  checkUserDeclaration);	  NodeTraversal.traverse(compiler,    externs,    root,    assertOnChange);    	non-compiled	[CE]  	93	None	replace
142	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  assertOnChange,  hasOkDuplicateDeclaration);  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  assertOnChange,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  assertOnChange,  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    externs,    root,    assertOnChange);    	non-compiled	[CE]  	93	None	replace
143	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  true);  [CE]  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  true);	  NodeTraversal.traverse(compiler,    externs,    root,    assertOnChange);    	non-compiled	[CE]  	93	None	replace
144	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externals);  [CE]  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externals);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externals);    	non-compiled	[CE]  	259	None	replace
145	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internals);  [CE]  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internals);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externals);    	non-compiled	[CE]  	259	None	replace
146	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externals);    	non-compiled	[CE]  	259	None	replace
147	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  	103	None	replace
148	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs,  root);  [CE]  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  	103	None	replace
149	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  externals);  [CE]  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  externals);	  NodeTraversal.traverse(compiler,    root,    externals);    	non-compiled	[CE]  	78	None	replace
150	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  internals);  [CE]  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  internals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  internals);	  NodeTraversal.traverse(compiler,    root,    externals);    	non-compiled	[CE]  	78	None	replace
151	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  externals,  checkUserDeclarations);  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  externals,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  externals,  checkUserDeclarations);	  NodeTraversal.traverse(compiler,    root,    externals);    	non-compiled	[CE]  	78	None	replace
152	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  	51	None	replace
153	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  	51	None	replace
154	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externals);  [CE]  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externals);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  	51	None	replace
155	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  parent);  [CE]  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  parent);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  	51	None	replace
156	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  internal);  [CE]  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  internal);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  internal);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  	51	None	replace
157	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange),  root);  compiler.traverseRoots(externs,  root);  [CE]  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange),  root);  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange),  root);  compiler.traverseRoots(externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  	51	None	replace
158	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  externs);  [CE]  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  	167	None	replace
159	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  externs,  root);  [CE]  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  	167	None	replace
160	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOkDuplicateDeclaration)).traverseRoots(externs,  root);  [CE]  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOkDuplicateDeclaration)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOkDuplicateDeclaration)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  	167	None	replace
161	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkHasOkDuplicateDeclaration)).traverseRoots(externs,  root);  [CE]  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkHasOkDuplicateDeclaration)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkHasOkDuplicateDeclaration)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  	167	None	replace
162	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkVars)).traverseRoots(externs,  root);  [CE]  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkVars)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkVars)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  	167	None	replace
163	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkLocalDeclarations)).traverseRoots(externs,  root);  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkLocalDeclarations)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkLocalDeclarations)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  	167	None	replace
164	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  parent);  [CE]  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  parent);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    parent);    	non-compiled	[CE]  	119	None	replace
165	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  parent);  [CE]  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  parent);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    parent);    	non-compiled	[CE]  	119	None	replace
166	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(parent,  externs);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(parent,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(parent,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    parent);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
167	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent,  hasOkDuplicateDeclaration);  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent,  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent,  hasOkDuplicateDeclaration);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    parent);    	non-compiled	[CE]  	119	None	replace
168	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverse(externs,  root);  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externs)).traverse(externs,    root);    	non-compiled	[CE]  	71	None	replace
169	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externs)).traverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
170	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).traverse(externs,  root);  [CE]  ';'  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externs)).traverse(externs,    root);    	non-compiled	[CE]  ';'  expected	71	None	replace
171	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs)).traverse(externs,  root);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externs)).traverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
172	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  internal)).traverse(externs,  root);  [CE]  ';'  expected  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  internal)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  internal)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externs)).traverse(externs,    root);    	non-compiled	[CE]  ';'  expected	71	None	replace
173	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverse(externs,  root);  [CE]  illegal  start  of  expression  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externs)).traverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
174	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externs)).traverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
175	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  assertOnChange)).traverseRoots(externs,  externs);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  assertOnChange)).traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  assertOnChange)).traverseRoots(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
176	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  verifyOnChange)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  verifyOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  verifyOnChange)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
177	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  verifyOnChange)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  verifyOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  verifyOnChange)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
178	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  verifyOnChange)).traverseRoots(externs,  externs);  [CE]  ';'  expected  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  verifyOnChange)).traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  verifyOnChange)).traverseRoots(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ';'  expected	131	None	replace
179	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  assertOnChange)).traverseRoots(externs,  root);  [CE]  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  assertOnChange)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  	131	None	replace
180	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  false)).traverseRoots(externs,  root);  [CE]  ';'  expected  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  false)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  false)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ';'  expected	131	None	replace
181	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);  [CE]  ';'  expected  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ';'  expected	131	None	replace
182	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  true);  [CE]  ';'  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  true);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    false);    	non-compiled	[CE]  ';'  expected	185	None	replace
183	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  false);  [CE]  ';'  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  root,  false);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    false);    	non-compiled	[CE]  ';'  expected	185	None	replace
184	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  null,  false);  [CE]  ';'  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  null,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  null,  false);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    false);    	non-compiled	[CE]  ';'  expected	185	None	replace
185	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  false,  true);  [CE]  ';'  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  false,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  false,  true);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    false);    	non-compiled	[CE]  ';'  expected	185	None	replace
186	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  assertOnChange,  false);  [CE]  ';'  expected  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  assertOnChange,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  assertOnChange,  false);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    false);    	non-compiled	[CE]  ';'  expected	185	None	replace
187	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  false,  true);  [CE]  ';'  expected  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  false,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  false,  true);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    false);    	non-compiled	[CE]  ';'  expected	185	None	replace
188	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  renamer,  false);  [CE]  ';'  expected  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  renamer,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  renamer,  false);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    false);    	non-compiled	[CE]  ';'  expected	185	None	replace
189	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externals,  root,  true);  [CE]  ';'  expected  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externals,  root,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externals,  root,  true);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    false);    	non-compiled	[CE]  ';'  expected	185	None	replace
190	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);  [CE]  ';'  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverseRoots(externs,    root);    	non-compiled	[CE]  ';'  expected	298	None	replace
191	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  forbidChanges)).traverseRoots(externs,  root);  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  forbidChanges)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  forbidChanges)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverseRoots(externs,    root);    	non-compiled	[CE]  	298	None	replace
192	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChanges)).traverseRoots(externs,  root);  [CE]  ';'  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChanges)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChanges)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverseRoots(externs,    root);    	non-compiled	[CE]  ';'  expected	298	None	replace
193	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  forbidChanges)).traverseRoots(externs,  root);  [CE]  ';'  expected  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  forbidChanges)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  forbidChanges)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverseRoots(externs,    root);    	non-compiled	[CE]  ';'  expected	298	None	replace
194	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);  [CE]  ';'  expected  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverseRoots(externs,    root);    	non-compiled	[CE]  ';'  expected	298	None	replace
195	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverseRoots(externs,  root);  [CE]  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverseRoots(externs,    root);    	non-compiled	[CE]  	298	None	replace
196	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).traverseRoots(externs,  root);  [CE]  ')'  expected  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	298	None	replace
197	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChanges)).traverseRoots(externs,  externs);  [CE]  ';'  expected  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChanges)).traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChanges)).traverseRoots(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverseRoots(externs,    root);    	non-compiled	[CE]  ';'  expected	298	None	replace
198	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null);  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(null);    	non-compiled	[CE]  ';'  expected	262	None	replace
199	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null);  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(null);    	non-compiled	[CE]  ';'  expected	262	None	replace
200	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null);  [CE]  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(null);    	non-compiled	[CE]  	262	None	replace
201	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(new  NodeTraversal(compiler,  externs,  assertOnChange)).traverse(null);  [CE]  ')'  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(new  NodeTraversal(compiler,  externs,  assertOnChange)).traverse(null);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(new  NodeTraversal(compiler,  externs,  assertOnChange)).traverse(null);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(null);    	non-compiled	[CE]  ')'  expected	262	None	replace
202	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  root.traverse(externs);  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  root.traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  root.traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root.traverse(externs);    	non-compiled	[CE]  	113	None	replace
203	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root.traverseRoots(externs);  [CE]  ')'  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root.traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root.traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root.traverse(externs);    	non-compiled	[CE]  ')'  expected	113	None	replace
204	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs.traverse(externs);  [CE]  ')'  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs.traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs.traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root.traverse(externs);    	non-compiled	[CE]  ')'  expected	113	None	replace
205	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root.traverse(externs);  [CE]  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root.traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root.traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root.traverse(externs);    	non-compiled	[CE]  	113	None	replace
206	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverse(externs);  [CE]  ')'  expected  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root.traverse(externs);    	non-compiled	[CE]  ')'  expected	113	None	replace
207	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  verifyOnChange);  [CE]  ')'  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  verifyOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  verifyOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root,    assertOnChange);    	non-compiled	[CE]  ')'  expected	128	None	replace
208	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs,  assertOnChange);  [CE]  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs,  assertOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root,    assertOnChange);    	non-compiled	[CE]  	128	None	replace
209	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  verifyOnChange);  [CE]  ')'  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  verifyOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  verifyOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root,    assertOnChange);    	non-compiled	[CE]  ')'  expected	128	None	replace
210	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  false);  [CE]  ')'  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  false);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  false);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root,    assertOnChange);    	non-compiled	[CE]  ')'  expected	128	None	replace
211	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  validateOnChange);  [CE]  ')'  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  validateOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  validateOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root,    assertOnChange);    	non-compiled	[CE]  ')'  expected	128	None	replace
212	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root,    assertOnChange);    	non-compiled	[CE]  	128	None	replace
213	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  root.traverseRoots(externs,  root);  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  root.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  root.traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)),    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  ';'  expected	279	None	replace
214	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  externs.traverseRoots(externs,  root);  [CE]  ';'  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  externs.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  externs.traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)),    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  ';'  expected	279	None	replace
215	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  compiler.traverseRoots(externs,  root);  [CE]  ')'  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  compiler.traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)),    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	279	None	replace
216	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  compiler.traverseRoots(externs,  externs);  [CE]  ';'  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  compiler.traverseRoots(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  compiler.traverseRoots(externs,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)),    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  ';'  expected	279	None	replace
217	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  false)).traverseRoots(externs,  root);  [CE]  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  false)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  false)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root,    false)).traverseRoots(externs,    root);    	non-compiled	[CE]  	140	None	replace
218	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  true)).traverseRoots(externs,  root);  [CE]  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  true)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  true)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root,    false)).traverseRoots(externs,    root);    	non-compiled	[CE]  	140	None	replace
219	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  false)).traverseRoots(externs,  externs);  [CE]  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  false)).traverseRoots(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  false)).traverseRoots(externs,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root,    false)).traverseRoots(externs,    root);    	non-compiled	[CE]  	140	None	replace
220	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  true)).traverseRoots(externs,  externs);  [CE]  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  true)).traverseRoots(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  true)).traverseRoots(externs,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root,    false)).traverseRoots(externs,    root);    	non-compiled	[CE]  	140	None	replace
221	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals,  false)).traverseRoots(externs,  root);  [CE]  [FE]                                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals,  false)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals,  false)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root,    false)).traverseRoots(externs,    root);    	non-compiled	[CE]  	140	None	replace
222	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  true)).traverseRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]                                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  true)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  true)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root,    false)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
223	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]                                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root,    false)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
224	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes,  false)).traverseRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes,  false)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes,  false)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root,    false)).traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	140	None	replace
225	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  false)).traverseRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]                                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  false)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  false)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root,    false)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
226	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(compiler);  [CE]  <identifier>  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(compiler);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(compiler);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(compiler);    	non-compiled	[CE]  <identifier>  expected	173	None	replace
227	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(compiler);  [CE]  <identifier>  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(compiler);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(compiler);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(compiler);    	non-compiled	[CE]  <identifier>  expected	173	None	replace
228	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(parent);  [CE]  <identifier>  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(parent);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(compiler);    	non-compiled	[CE]  <identifier>  expected	173	None	replace
229	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [CE]  <identifier>  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(compiler);    	non-compiled	[CE]  <identifier>  expected	173	None	replace
230	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  assertOnChange,  checkUserDeclarations);  [CE]  <identifier>  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  assertOnChange,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  assertOnChange,  checkUserDeclarations);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    assertOnChange);    	non-compiled	[CE]  <identifier>  expected	146	None	replace
231	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  verifyOnChange);  [CE]  <identifier>  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  verifyOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  verifyOnChange);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    assertOnChange);    	non-compiled	[CE]  <identifier>  expected	146	None	replace
232	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  assertOnChange,  checkUserDeclarations);  [CE]  <identifier>  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  assertOnChange,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  assertOnChange,  checkUserDeclarations);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    assertOnChange);    	non-compiled	[CE]  <identifier>  expected	146	None	replace
233	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  assertOnChange,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  assertOnChange,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  assertOnChange,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    assertOnChange);    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
234	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  this.checkUserDeclarations);  [CE]  <identifier>  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  this.checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  this.checkUserDeclarations);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    assertOnChange);    	non-compiled	[CE]  <identifier>  expected	146	None	replace
235	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  CATCH_BLOCK_VAR_ERROR);  [CE]  <identifier>  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  CATCH_BLOCK_VAR_ERROR);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  CATCH_BLOCK_VAR_ERROR);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    MAKE_LOCAL_NAMES_VAR_ERROR);    	non-compiled	[CE]  <identifier>  expected	308	None	replace
236	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_VAR_ERROR,  hasOkDuplicateDeclaration);  [CE]  <identifier>  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_VAR_ERROR,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_VAR_ERROR,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    MAKE_LOCAL_NAMES_VAR_ERROR);    	non-compiled	[CE]  <identifier>  expected	308	None	replace
237	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  CATCH_BLOCK_VAR_ERROR,  MAKE_LOCAL_NAMES_VAR_ERROR);  [CE]  <identifier>  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  CATCH_BLOCK_VAR_ERROR,  MAKE_LOCAL_NAMES_VAR_ERROR);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  CATCH_BLOCK_VAR_ERROR,  MAKE_LOCAL_NAMES_VAR_ERROR);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    MAKE_LOCAL_NAMES_VAR_ERROR);    	non-compiled	[CE]  <identifier>  expected	308	None	replace
238	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_VAR_ERROR,  checkUserDeclarations);  [CE]  <identifier>  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_VAR_ERROR,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_VAR_ERROR,  checkUserDeclarations);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    MAKE_LOCAL_NAMES_VAR_ERROR);    	non-compiled	[CE]  <identifier>  expected	308	None	replace
239	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_VAR_ERROR,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_VAR_ERROR,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_VAR_ERROR,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    MAKE_LOCAL_NAMES_VAR_ERROR);    	non-compiled	[CE]  illegal  start  of  type	308	None	replace
240	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_VAR_ERROR,  assertOnChange);  [CE]  <identifier>  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_VAR_ERROR,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_VAR_ERROR,  assertOnChange);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    MAKE_LOCAL_NAMES_VAR_ERROR);    	non-compiled	[CE]  <identifier>  expected	308	None	replace
241	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  CATCH_BLOCK_VAR_ERROR,  root);  [CE]  <identifier>  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  CATCH_BLOCK_VAR_ERROR,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  CATCH_BLOCK_VAR_ERROR,  root);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    MAKE_LOCAL_NAMES_VAR_ERROR);    	non-compiled	[CE]  <identifier>  expected	308	None	replace
242	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  externs);  [CE]  <identifier>  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseValues(externs,    root);    	non-compiled	[CE]  <identifier>  expected	293	None	replace
243	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseValues(externs,  root);  [CE]  <identifier>  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseValues(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseValues(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseValues(externs,    root);    	non-compiled	[CE]  <identifier>  expected	293	None	replace
244	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  root);  [CE]  <identifier>  expected  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseValues(externs,    root);    	non-compiled	[CE]  <identifier>  expected	293	None	replace
245	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  root,  hasOkDuplicateDeclaration);  [CE]  <identifier>  expected  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  root,  hasOkDuplicateDeclaration);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseValues(externs,    root);    	non-compiled	[CE]  <identifier>  expected	293	None	replace
246	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(root,  externs);  [CE]  illegal  start  of  type  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(root,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(root,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseValues(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	293	None	replace
247	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  externals);  [CE]  <identifier>  expected  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseValues(externs,    root);    	non-compiled	[CE]  <identifier>  expected	293	None	replace
248	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(root);    	non-compiled	[CE]  illegal  start  of  type	272	None	replace
249	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(root);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(root);    	non-compiled	[CE]  illegal  start  of  type	272	None	replace
250	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traceRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traceRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traceRoots(externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(root);    	non-compiled	[CE]  illegal  start  of  type	272	None	replace
251	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  false);  [CE]  illegal  start  of  type  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  false);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    true);    	non-compiled	[CE]  illegal  start  of  type	187	None	replace
252	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  null,  true);  [CE]  illegal  start  of  type  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  null,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  null,  true);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    true);    	non-compiled	[CE]  illegal  start  of  type	187	None	replace
253	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  assertOnChange,  true);  [CE]  illegal  start  of  type  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  assertOnChange,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  assertOnChange,  true);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    true);    	non-compiled	[CE]  illegal  start  of  type	187	None	replace
254	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  true,  false);  [CE]  illegal  start  of  type  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  true,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  true,  false);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    true);    	non-compiled	[CE]  illegal  start  of  type	187	None	replace
255	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  parent,  true);  [CE]  illegal  start  of  type  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  parent,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  parent,  true);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    true);    	non-compiled	[CE]  illegal  start  of  type	187	None	replace
256	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges));  [CE]  illegal  start  of  type  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations));    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
257	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  assertOnChange));  [CE]  illegal  start  of  type  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  assertOnChange));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  assertOnChange));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations));    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
258	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges));  [CE]  illegal  start  of  type  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations));    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
259	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  [CE]  illegal  start  of  type  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations));    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
260	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  forbidChanges));  [CE]  illegal  start  of  type  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  forbidChanges));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  forbidChanges));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations));    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
261	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange,  checkUserDeclarations));  [CE]  illegal  start  of  type  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange,  checkUserDeclarations));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange,  checkUserDeclarations));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations));    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
262	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkForbidChanges));  [CE]  illegal  start  of  type  [FE]                                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkForbidChanges));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkForbidChanges));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations));    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
263	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertFalse,  checkUserDeclarations));  [CE]  illegal  start  of  type  [FE]                                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertFalse,  checkUserDeclarations));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertFalse,  checkUserDeclarations));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations));    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
264	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations));  [CE]  illegal  start  of  type  [FE]                                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations));    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
265	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  node,  hasOkDuplicateDeclaration);  [CE]  <identifier>  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  node,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  node,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    node);    	non-compiled	[CE]  <identifier>  expected	227	None	replace
266	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  hasOkDuplicateDeclaration,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  hasOkDuplicateDeclaration,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  hasOkDuplicateDeclaration,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
267	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  this.checkUserDeclarations);  [CE]  <identifier>  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  this.checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  this.checkUserDeclarations);	  NodeTraversal.traverse(compiler,    externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
268	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  validateDeclaration);  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  validateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  validateDeclaration);	  NodeTraversal.traverse(compiler,    externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
269	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  new  NormalizeStatements());  [CE]  illegal  start  of  type  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  new  NormalizeStatements());	  NodeTraversal.traverseNodes(compiler,    externs,    root,    t);    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
270	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverse(externs);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverse(externs);    	non-compiled	[CE]  illegal  start  of  type	239	None	replace
271	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOkDuplicateDeclaration)).traverse(externs);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOkDuplicateDeclaration)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOkDuplicateDeclaration)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverse(externs);    	non-compiled	[CE]  illegal  start  of  type	239	None	replace
272	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(root);  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverse(externs);    	non-compiled	[CE]  illegal  start  of  type	239	None	replace
273	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkVars)).traverse(externs);  [CE]  <identifier>  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkVars)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkVars)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverse(externs);    	non-compiled	[CE]  <identifier>  expected	239	None	replace
274	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkConstants)).traverse(externs);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkConstants)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkConstants)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverse(externs);    	non-compiled	[CE]  illegal  start  of  type	239	None	replace
275	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkLocalDeclarations)).traverse(externs);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkLocalDeclarations)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkLocalDeclarations)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverse(externs);    	non-compiled	[CE]  illegal  start  of  type	239	None	replace
276	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  root).traverse(externs);  [CE]  <identifier>  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  root).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  root).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverse(externs);    	non-compiled	[CE]  <identifier>  expected	239	None	replace
277	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);	  NodeTraversal.traverse(compiler,    externals,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	175	None	replace
278	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).trace(root);  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).trace(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).trace(root);	  NodeTraversal.traverse(compiler,    externals,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	175	None	replace
279	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);	  NodeTraversal.traverse(compiler,    externals,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	175	None	replace
280	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).straverse(root);  [CE]  <identifier>  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).straverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).straverse(root);	  NodeTraversal.traverse(compiler,    externals,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  <identifier>  expected	175	None	replace
281	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [CE]  illegal  start  of  type  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);	  NodeTraversal.traverse(compiler,    externals,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	175	None	replace
282	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externals);  [CE]  <identifier>  expected  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externals);	  new    NodeTraversal(compiler,    externals,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
283	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    externals,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
284	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null,  root);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null,  root);	  new    NodeTraversal(compiler,    externals,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
285	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs);  [CE]  <identifier>  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs);	  new    NodeTraversal(compiler,    externals,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
286	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  internals);  [CE]  <identifier>  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  internals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  internals);	  new    NodeTraversal(compiler,    externals,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
287	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  parent);  [CE]  <identifier>  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  parent);	  new    NodeTraversal(compiler,    externals,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
288	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  1)).traverse(root);  [CE]  <identifier>  expected  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  1)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  1)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    0)).traverse(root);    	non-compiled	[CE]  <identifier>  expected	166	None	replace
289	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  0)).traverseRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  0)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  0)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    0)).traverse(root);    	non-compiled	[CE]  <identifier>  expected	166	None	replace
290	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  2)).traverse(root);  [CE]  illegal  start  of  type  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  2)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  2)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    0)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	166	None	replace
291	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  true)).traverse(root);  [CE]  <identifier>  expected  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  true)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  true)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    0)).traverse(root);    	non-compiled	[CE]  <identifier>  expected	166	None	replace
292	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  0)).traverse(externs);  [CE]  <identifier>  expected  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  0)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  0)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    0)).traverse(root);    	non-compiled	[CE]  <identifier>  expected	166	None	replace
293	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  0)).traverse(externs,  root);  [CE]  <identifier>  expected  [FE]                                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  0)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  0)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    0)).traverse(root);    	non-compiled	[CE]  <identifier>  expected	166	None	replace
294	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  forbidChanges);  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  forbidChanges);	  NodeTraversal.traverse(compiler,    externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
295	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  checkUserDeclarations,  forbidChanges);  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  checkUserDeclarations,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  checkUserDeclarations,  forbidChanges);	  NodeTraversal.traverse(compiler,    externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
296	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  checkUserDeclarations,  hasOkDuplicateDeclaration);  [CE]  <identifier>  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  checkUserDeclarations,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  checkUserDeclarations,  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
297	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  checkUserDeclarations,  forbidChanges);  [CE]  <identifier>  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  checkUserDeclarations,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  checkUserDeclarations,  forbidChanges);	  NodeTraversal.traverse(compiler,    externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
298	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  verifyUserDeclarations);  [CE]  <identifier>  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  verifyUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  verifyUserDeclarations);	  NodeTraversal.traverse(compiler,    externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
299	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  new  HashMap());  [CE]  <identifier>  expected  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  new  HashMap());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  new  HashMap());	  NodeTraversal.traverseRoots(compiler,    externs,    root,    HashMap.class);    	non-compiled	[CE]  <identifier>  expected	307	None	replace
300	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  HashMap.class,  hasOkDuplicateDeclaration);  [CE]  <identifier>  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  HashMap.class,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  HashMap.class,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    HashMap.class);    	non-compiled	[CE]  <identifier>  expected	307	None	replace
301	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  Map.class);  [CE]  <identifier>  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  Map.class);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  Map.class);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    HashMap.class);    	non-compiled	[CE]  <identifier>  expected	307	None	replace
302	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  hasOkDuplicateDeclaration.class);  [CE]  <identifier>  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  hasOkDuplicateDeclaration.class);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  hasOkDuplicateDeclaration.class);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    HashMap.class);    	non-compiled	[CE]  <identifier>  expected	307	None	replace
303	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  Lists.class);  [CE]  <identifier>  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  Lists.class);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  Lists.class);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    HashMap.class);    	non-compiled	[CE]  <identifier>  expected	307	None	replace
304	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  Sets.class);  [CE]  <identifier>  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  Sets.class);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  Sets.class);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    HashMap.class);    	non-compiled	[CE]  <identifier>  expected	307	None	replace
305	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  Locale.getDefault());  [CE]  <identifier>  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  Locale.getDefault());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  Locale.getDefault());	  NodeTraversal.traverseRoots(compiler,    externs,    root,    HashMap.class);    	non-compiled	[CE]  <identifier>  expected	307	None	replace
306	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  HashMap.class,  true);  [CE]  <identifier>  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  HashMap.class,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  HashMap.class,  true);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    HashMap.class);    	non-compiled	[CE]  <identifier>  expected	307	None	replace
307	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  verifyOnChange);  [CE]  <identifier>  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  verifyOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  verifyOnChange);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  <identifier>  expected	181	None	replace
308	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  hasOkDuplicateDeclaration,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  <identifier>  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  hasOkDuplicateDeclaration,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  hasOkDuplicateDeclaration,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  <identifier>  expected	181	None	replace
309	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  this.checkUserDeclarations);  [CE]  <identifier>  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  this.checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  this.checkUserDeclarations);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  <identifier>  expected	181	None	replace
310	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externs)).traverseRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externs)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externs)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange,    externs)).traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	129	None	replace
311	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  root)).traverseRoots(externs,  externs);  [CE]  <identifier>  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  root)).traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  root)).traverseRoots(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange,    externs)).traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	129	None	replace
312	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  root)).traverseRoots(externs,  checkUserDeclarations);  [CE]  <identifier>  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  root)).traverseRoots(externs,  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  root)).traverseRoots(externs,  checkUserDeclarations);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange,    externs)).traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	129	None	replace
313	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  true)).traverseRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  true)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  true)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange,    externs)).traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	129	None	replace
314	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  internal)).traverseRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  internal)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  internal)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange,    externs)).traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	129	None	replace
315	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEquals)).traverse(externs);  [CE]  <identifier>  expected  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEquals)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEquals)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertEquals)).traverse(root);    	non-compiled	[CE]  <identifier>  expected	195	None	replace
316	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertEquals)).traverse(root);  [CE]  <identifier>  expected  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertEquals)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertEquals)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertEquals)).traverse(root);    	non-compiled	[CE]  <identifier>  expected	195	None	replace
317	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEquals)).traverseRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEquals)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEquals)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertEquals)).traverse(root);    	non-compiled	[CE]  <identifier>  expected	195	None	replace
318	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEquals)).traverse(externs,  root);  [CE]  <identifier>  expected  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEquals)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEquals)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertEquals)).traverse(root);    	non-compiled	[CE]  <identifier>  expected	195	None	replace
319	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverse(root);  [CE]  <identifier>  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkOnChange)).traverse(root);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
320	[BUG]  [BUGGY]  if(checkOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverse(root);  }  [CE]  <identifier>  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(checkOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverse(root);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(checkOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverse(root);  }	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkOnChange)).traverse(root);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
321	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverse(externs,  root);  [CE]  <identifier>  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkOnChange)).traverse(root);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
322	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  	68	None	replace
323	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs);  [CE]  <identifier>  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs);	  new    NodeTraversal(compiler,    compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
324	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs);  [CE]  <identifier>  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs);	  new    NodeTraversal(compiler,    compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
325	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs,  root);  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs,  root);	  new    NodeTraversal(compiler,    compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  	68	None	replace
326	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  parent);  [CE]  <identifier>  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  parent);	  new    NodeTraversal(compiler,    compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
327	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_NAMES_UNIQUE)).traverse(externs,  root);  [CE]  <identifier>  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_NAMES_UNIQUE)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_NAMES_UNIQUE)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    FORBLOCK_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  <identifier>  expected	164	None	replace
328	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CONVERT_WHILE_TO_FOR)).traverse(root);  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CONVERT_WHILE_TO_FOR)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CONVERT_WHILE_TO_FOR)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    FORBLOCK_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  	164	None	replace
329	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_NAMES_UNIQUE)).traverse(externs);  [CE]  <identifier>  expected  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_NAMES_UNIQUE)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_NAMES_UNIQUE)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    FORBLOCK_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  <identifier>  expected	164	None	replace
330	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_NAMES_UNIQUE)).traverseRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_NAMES_UNIQUE)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_NAMES_UNIQUE)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    FORBLOCK_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  <identifier>  expected	164	None	replace
331	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_NAMES_UNIQUE)).traverse(root);  [CE]  <identifier>  expected  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_NAMES_UNIQUE)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_NAMES_UNIQUE)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    FORBLOCK_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  <identifier>  expected	164	None	replace
332	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  PROPERTY)).traverse(root);  [CE]  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  PROPERTY)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  PROPERTY)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    FORBLOCK_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  	164	None	replace
333	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  INVALID_NAMES_UNIQUE)).traverse(root);  [CE]  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  INVALID_NAMES_UNIQUE)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  INVALID_NAMES_UNIQUE)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    FORBLOCK_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  	164	None	replace
334	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  assertOnChange)).traverseRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  assertOnChange)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
335	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  assertOnChange)).traverseRoots(root,  externs);  [CE]  <identifier>  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  assertOnChange)).traverseRoots(root,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  assertOnChange)).traverseRoots(root,  externs);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
336	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  externs);  [CE]  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  externs);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  	25	None	replace
337	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverseRoots(externs,  assertOnChange);  [CE]  <identifier>  expected  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverseRoots(externs,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverseRoots(externs,  assertOnChange);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
338	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  assertOnChange)).traverseRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  assertOnChange)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
339	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange,  assertOnChange)).traverseRoots(externs,  externs);  [CE]  <identifier>  expected  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange,  assertOnChange)).traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange,  assertOnChange)).traverseRoots(externs,  externs);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
340	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).traverseRoots(externs,  root);  [CE]  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  	25	None	replace
341	[BUG]  [BUGGY]  new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  assertOnChange)).traverseRoots(externs,  root);  [CE]  [FE]                                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  assertOnChange)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  	25	None	replace
342	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  forbidChanges);  [CE]  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  forbidChanges);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root,    externs);    	non-compiled	[CE]  	86	None	replace
343	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(root,  externs);  [CE]  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(root,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(root,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root,    externs);    	non-compiled	[CE]  	86	None	replace
344	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  checkUserDeclarations);  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  checkUserDeclarations);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root,    externs);    	non-compiled	[CE]  	86	None	replace
345	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externals);  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root,    externs);    	non-compiled	[CE]  	86	None	replace
346	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  internals);  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  internals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  internals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root,    externs);    	non-compiled	[CE]  	86	None	replace
347	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  forbidChanges);  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  forbidChanges);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root,    externs);    	non-compiled	[CE]  	86	None	replace
348	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  null);  [CE]  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  null);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  null);	  NodeTraversal.traverse(compiler,    externs,    root,    this);    	non-compiled	[CE]  	201	None	replace
349	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  this,  hasOkDuplicateDeclaration);  [CE]  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  this,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  this,  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    externs,    root,    this);    	non-compiled	[CE]  	201	None	replace
350	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(converter);  [CE]  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(converter);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(converter);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(converter);    	non-compiled	[CE]  	264	None	replace
351	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(converter);  [CE]  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(converter);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(converter);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(converter);    	non-compiled	[CE]  	264	None	replace
352	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(converter);  [CE]  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(converter);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(converter);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(converter);    	non-compiled	[CE]  	264	None	replace
353	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(consumer);  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(consumer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(consumer);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(converter);    	non-compiled	[CE]  	264	None	replace
354	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  assertOnChange);  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  assertOnChange);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externes);    	non-compiled	[CE]  	220	None	replace
355	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  internal);  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  internal);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  internal);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externes);    	non-compiled	[CE]  	220	None	replace
356	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  checkUserDeclarations);  [CE]  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  checkUserDeclarations);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externes);    	non-compiled	[CE]  	220	None	replace
357	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  parent);  [CE]  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  parent);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externes);    	non-compiled	[CE]  	220	None	replace
358	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  root);  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(null,    externs);    	non-compiled	[CE]  	215	None	replace
359	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs,  root);  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(null,    externs);    	non-compiled	[CE]  	215	None	replace
360	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(null,  externs);  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(null,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(null,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(null,    externs);    	non-compiled	[CE]  	215	None	replace
361	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(parent,  externs);  [CE]  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(parent,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(parent,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(null,    externs);    	non-compiled	[CE]  	215	None	replace
362	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs).traverseRoots(externs,  root);  [CE]  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs).traverseRoots(externs,  root);	  NodeTraversal.traverse(compiler,    externs).traverseRoots(compiler,    root);    	non-compiled	[CE]  	255	None	replace
363	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root).traverseRoots(externs,  root);  [CE]  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root).traverseRoots(externs,  root);	  NodeTraversal.traverse(compiler,    externs).traverseRoots(compiler,    root);    	non-compiled	[CE]  	255	None	replace
364	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs).traverseRoots(compiler,  root,  hasOkDuplicateDeclaration);  [CE]  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs).traverseRoots(compiler,  root,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs).traverseRoots(compiler,  root,  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    externs).traverseRoots(compiler,    root);    	non-compiled	[CE]  	255	None	replace
365	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs).traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs).traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs).traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    externs).traverseRoots(compiler,    root);    	non-compiled	[CE]  	255	None	replace
366	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs).traverseRoots(converter,  root);  [CE]  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs).traverseRoots(converter,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs).traverseRoots(converter,  root);	  NodeTraversal.traverse(compiler,    externs).traverseRoots(compiler,    root);    	non-compiled	[CE]  	255	None	replace
367	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs).traverseRoots(null,  root);  [CE]  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs).traverseRoots(null,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs).traverseRoots(null,  root);	  NodeTraversal.traverse(compiler,    externs).traverseRoots(compiler,    root);    	non-compiled	[CE]  	255	None	replace
368	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs).traverseRoots(interns,  root);  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs).traverseRoots(interns,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs).traverseRoots(interns,  root);	  NodeTraversal.traverse(compiler,    externs).traverseRoots(compiler,    root);    	non-compiled	[CE]  	255	None	replace
369	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs).traverseRoots(compiler,  root,  false);  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs).traverseRoots(compiler,  root,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs).traverseRoots(compiler,  root,  false);	  NodeTraversal.traverse(compiler,    externs).traverseRoots(compiler,    root);    	non-compiled	[CE]  	255	None	replace
370	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations())).traverse(root);  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations())).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations())).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    getOkDuplicateDeclaration())).traverse(root);    	non-compiled	[CE]  	163	None	replace
371	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  getOkDuplicateDeclaration())).traverse(root);  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  getOkDuplicateDeclaration())).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  getOkDuplicateDeclaration())).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    getOkDuplicateDeclaration())).traverse(root);    	non-compiled	[CE]  	163	None	replace
372	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclaration())).traverse(root);  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclaration())).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclaration())).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    getOkDuplicateDeclaration())).traverse(root);    	non-compiled	[CE]  	163	None	replace
373	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  getOkDuplicateDeclaration())).traverse(externs,  root);  [CE]  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  getOkDuplicateDeclaration())).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  getOkDuplicateDeclaration())).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    getOkDuplicateDeclaration())).traverse(root);    	non-compiled	[CE]  	163	None	replace
374	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  getOkDuplicateDeclaration())).traverse(externs);  [CE]  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  getOkDuplicateDeclaration())).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  getOkDuplicateDeclaration())).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    getOkDuplicateDeclaration())).traverse(root);    	non-compiled	[CE]  	163	None	replace
375	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  getOkDuplicateDeclaration())).traverse(root);  [CE]  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  getOkDuplicateDeclaration())).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  getOkDuplicateDeclaration())).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    getOkDuplicateDeclaration())).traverse(root);    	non-compiled	[CE]  	163	None	replace
376	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  getOkDuplicateDeclaration())).traverse(root);  [CE]  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  getOkDuplicateDeclaration())).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  getOkDuplicateDeclaration())).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    getOkDuplicateDeclaration())).traverse(root);    	non-compiled	[CE]  	163	None	replace
377	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  getOkDuplicateDeclaration())).traverse(externs);  [CE]  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  getOkDuplicateDeclaration())).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  getOkDuplicateDeclaration())).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    getOkDuplicateDeclaration())).traverse(root);    	non-compiled	[CE]  	163	None	replace
378	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  assertOnChange)).traverseRoots(externs,  root);  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  assertOnChange)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externs,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  	135	None	replace
379	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  root)).traverseRoots(externs,  parent);  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  root)).traverseRoots(externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  root)).traverseRoots(externs,  parent);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externs,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  	135	None	replace
380	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  root)).traverseRoots(converter,  root);  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  root)).traverseRoots(converter,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  root)).traverseRoots(converter,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externs,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  	135	None	replace
381	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  root)).traverseRoots(constantMap,  externs,  root);  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  root)).traverseRoots(constantMap,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  root)).traverseRoots(constantMap,  externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externs,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  	135	None	replace
382	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  root)).traverseRoots(parent,  externs,  root);  [CE]  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  root)).traverseRoots(parent,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  root)).traverseRoots(parent,  externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externs,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  	135	None	replace
383	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  root)).traverseRoots(null,  externs);  [CE]  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  root)).traverseRoots(null,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  root)).traverseRoots(null,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externs,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  	135	None	replace
384	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges),  externs.traverse(root);  [CE]  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges),  externs.traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges),  externs.traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations),    externs.traverse(root);    	non-compiled	[CE]  	110	None	replace
385	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges),  externals.traverse(root);  [CE]  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges),  externals.traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges),  externals.traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations),    externs.traverse(root);    	non-compiled	[CE]  	110	None	replace
386	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkForbidChanges),  externs.traverse(root);  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkForbidChanges),  externs.traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkForbidChanges),  externs.traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations),    externs.traverse(root);    	non-compiled	[CE]  	110	None	replace
387	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  assertOnChange),  externs.traverse(root);  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  assertOnChange),  externs.traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  assertOnChange),  externs.traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations),    externs.traverse(root);    	non-compiled	[CE]  	110	None	replace
388	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  root.traverse(externs);  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  root.traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  root.traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations),    externs.traverse(root);    	non-compiled	[CE]  	110	None	replace
389	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  externals.traverse(root);  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  externals.traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  externals.traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations),    externs.traverse(root);    	non-compiled	[CE]  	110	None	replace
390	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs);  [CE]  <identifier>  expected  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs);	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  <identifier>  expected	234	None	replace
391	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externals);  [CE]  <identifier>  expected  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externals);	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  <identifier>  expected	234	None	replace
392	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null,  root);  [CE]  <identifier>  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null,  root);	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  <identifier>  expected	234	None	replace
393	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs,  root);  [CE]  <identifier>  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs,  root);	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  <identifier>  expected	234	None	replace
394	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(converter,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(converter,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(converter,  root);	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	234	None	replace
395	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs);  [CE]  <identifier>  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs);	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  <identifier>  expected	234	None	replace
396	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  parent);  [CE]  <identifier>  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  parent);	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  <identifier>  expected	234	None	replace
397	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  parent);  [CE]  class,  interface,  or  enum  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  parent);	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	234	None	replace
398	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	231	None	replace
399	[BUG]  [BUGGY]  NodeTraversal  warning  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  warning  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  warning  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	231	None	replace
400	[BUG]  [BUGGY]  NodeTraversal  visitor  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  visitor  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  visitor  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	231	None	replace
401	[BUG]  [BUGGY]  NodeTraversal  error  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  error  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  error  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	231	None	replace
402	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).path(externs);  [CE]  <identifier>  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).path(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).path(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).path(root);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
403	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).path(null);  [CE]  <identifier>  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).path(null);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).path(null);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).path(root);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
404	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).path(root);  [CE]  class,  interface,  or  enum  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).path(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).path(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).path(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
405	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).path(root);  [CE]  <identifier>  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).path(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).path(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).path(root);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
406	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).path(converter);  [CE]  <identifier>  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).path(converter);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).path(converter);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).path(root);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
407	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).path(node);  [CE]  class,  interface,  or  enum  expected  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).path(node);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).path(node);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).path(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
408	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).path(externs);  [CE]  <identifier>  expected  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).path(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).path(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).path(root);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
409	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  false);  [CE]  class,  interface,  or  enum  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  root,  false);	  NodeTraversal.traverseNode(compiler,    externs,    root,    false);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
410	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  false,  hasOkDuplicateDeclaration);  [CE]  class,  interface,  or  enum  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  false,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  false,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNode(compiler,    externs,    root,    false);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
411	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  null,  false);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  null,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  null,  false);	  NodeTraversal.traverseNode(compiler,    externs,    root,    false);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
412	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  renamer,  false);  [CE]  class,  interface,  or  enum  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  renamer,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  renamer,  false);	  NodeTraversal.traverseNode(compiler,    externs,    root,    false);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
413	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  false,  true);  [CE]  class,  interface,  or  enum  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  false,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  false,  true);	  NodeTraversal.traverseNode(compiler,    externs,    root,    false);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
414	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  true,  false);  [CE]  class,  interface,  or  enum  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  true,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  true,  false);	  NodeTraversal.traverseNode(compiler,    externs,    root,    false);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
415	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  exprs);  [CE]  illegal  start  of  type  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  exprs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  exprs);	  NodeTraversal.traverseRoots(compiler,    root,    exprs);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
416	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  exprs,  hasOkDuplicateDeclaration);  [CE]  class,  interface,  or  enum  expected  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  exprs,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  exprs,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(compiler,    root,    exprs);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
417	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  exprs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  exprs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  exprs,  root);	  NodeTraversal.traverseRoots(compiler,    root,    exprs);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
418	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  exprs,  checkUserDeclarations);  [CE]  class,  interface,  or  enum  expected  [FE]                                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  exprs,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  exprs,  checkUserDeclarations);	  NodeTraversal.traverseRoots(compiler,    root,    exprs);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
419	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  assertOnChange);  [CE]  class,  interface,  or  enum  expected  [FE]                                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  assertOnChange);	  NodeTraversal.traverseRoots(compiler,    root,    exprs);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
420	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  expr);  [CE]  class,  interface,  or  enum  expected  [FE]                                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  expr);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  expr);	  NodeTraversal.traverseRoots(compiler,    root,    exprs);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
421	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  checkUserDeclarations);  [CE]  illegal  start  of  type  [FE]                                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  checkUserDeclarations);	  NodeTraversal.traverseRoots(compiler,    root,    exprs);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
422	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  exprs,  checkUserDeclaration);  [CE]  class,  interface,  or  enum  expected  [FE]                                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  exprs,  checkUserDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  exprs,  checkUserDeclaration);	  NodeTraversal.traverseRoots(compiler,    root,    exprs);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
423	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    renamer);    	non-compiled	[CE]  not  a  statement	145	None	replace
424	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer,  hasOkDuplicateDeclaration);  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    renamer);    	non-compiled	[CE]  not  a  statement	145	None	replace
425	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    renamer);    	non-compiled	[CE]  not  a  statement	156	None	replace
426	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  forbidChanges);  [CE]  not  a  statement  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  forbidChanges);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    null);    	non-compiled	[CE]  not  a  statement	189	None	replace
427	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  null,  hasOkDuplicateDeclaration);  [CE]  not  a  statement  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  null,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  null,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    null);    	non-compiled	[CE]  not  a  statement	189	None	replace
428	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	37	None	replace
429	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs);  [CE]  class,  interface,  or  enum  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
430	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  Root);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  Root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  Root);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
431	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs);  [CE]  class,  interface,  or  enum  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	245	None	replace
432	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externals);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externals);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	245	None	replace
433	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  parent);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  parent);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	245	None	replace
434	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  assertOnChange);  [CE]  class,  interface,  or  enum  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  assertOnChange);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	245	None	replace
435	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  internal);  [CE]  class,  interface,  or  enum  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  internal);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  internal);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	245	None	replace
436	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	245	None	replace
437	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internals,  root);  [CE]  class,  interface,  or  enum  expected  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internals,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internals,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externals,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	281	None	replace
438	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  internals);  [CE]  class,  interface,  or  enum  expected  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  internals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  internals);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externals,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	281	None	replace
439	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs);  [CE]  class,  interface,  or  enum  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  class,  interface,  or  enum  expected	269	None	replace
440	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  root)).traverse(externs);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  root)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  root)).traverse(externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  illegal  start  of  expression	269	None	replace
441	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  internal);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  internal);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  internal);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  illegal  start  of  expression	269	None	replace
442	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  parent);  [CE]  class,  interface,  or  enum  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  parent);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  class,  interface,  or  enum  expected	269	None	replace
443	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root.cloneTree());  [CE]  class,  interface,  or  enum  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root.cloneTree());  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root.cloneTree());	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
444	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs.cloneTree());  [CE]  class,  interface,  or  enum  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs.cloneTree());  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs.cloneTree());	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
445	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  externs.cloneTree());  [CE]  class,  interface,  or  enum  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  externs.cloneTree());  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  externs.cloneTree());	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
446	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  externs.cloneTree());  [CE]  class,  interface,  or  enum  expected  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  externs.cloneTree());  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  externs.cloneTree());	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
447	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root.cloneTree());  [CE]  class,  interface,  or  enum  expected  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root.cloneTree());  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root.cloneTree());	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
448	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  externals.cloneTree());  [CE]  class,  interface,  or  enum  expected  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  externals.cloneTree());  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  externals.cloneTree());	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
449	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs.cloneTree());  [CE]  class,  interface,  or  enum  expected  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs.cloneTree());  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs.cloneTree());	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
450	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter,  externs.cloneTree());  [CE]  class,  interface,  or  enum  expected  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter,  externs.cloneTree());  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter,  externs.cloneTree());	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
451	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	174	None	replace
452	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverse(root);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverse(root);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
453	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  interns,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [CE]  class,  interface,  or  enum  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  interns,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  interns,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	174	None	replace
454	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(root,  externs);  [CE]  class,  interface,  or  enum  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(root,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(root,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).    Traverse(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	222	None	replace
455	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).    Traverse(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	222	None	replace
456	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(externs,  externs);  [CE]  class,  interface,  or  enum  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).    Traverse(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	222	None	replace
457	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).  Traverse(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).  Traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).  Traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).    Traverse(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	222	None	replace
458	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(externs,  externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(externs,  externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(externs,  externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).    Traverse(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	222	None	replace
459	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(externs,  parent);  [CE]  class,  interface,  or  enum  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(externs,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(externs,  parent);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).    Traverse(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	222	None	replace
460	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(externs,  externals);  [CE]  class,  interface,  or  enum  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(externs,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(externs,  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).    Traverse(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	222	None	replace
461	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(externs,  root,  hasOkDuplicateDeclaration);  [CE]  class,  interface,  or  enum  expected  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(externs,  root,  hasOkDuplicateDeclaration);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).    Traverse(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	222	None	replace
462	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  externs);  [CE]  class,  interface,  or  enum  expected  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	251	None	replace
463	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  assertOnChange);  [CE]  class,  interface,  or  enum  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  assertOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	251	None	replace
464	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  parent);  [CE]  class,  interface,  or  enum  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  parent);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	251	None	replace
465	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	251	None	replace
466	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  externals);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	251	None	replace
467	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(root,  externs);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(root,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(root,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	251	None	replace
468	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  externs,  root);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	251	None	replace
469	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  root,  assertOnChange);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  root,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  root,  assertOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	251	None	replace
470	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs,  externs);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
471	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs,  assertOnChange);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs,  assertOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
472	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs,  externs,  root);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs,  externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs,  externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
473	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange,  assertOnChange)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange,  assertOnChange)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
474	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs,  parent);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs,  parent);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
475	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverse(root);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
476	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  root)).traverse(root);  [CE]  illegal  start  of  expression  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  root)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  root)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
477	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverse(root);  [CE]  illegal  start  of  expression  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
478	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root),  assertOnChange);  [CE]  illegal  start  of  expression  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root),  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root),  assertOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
479	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root),  assertOnChange)).traverse(root);  [CE]  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root),  assertOnChange)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root),  assertOnChange)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverse(root);    	non-compiled	[CE]  	46	None	replace
480	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals,  root)).traverse(root);  [CE]  illegal  start  of  expression  [FE]                                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals,  root)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals,  root)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
481	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  root)).traverse(root);  [CE]  illegal  start  of  expression  [FE]                                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  root)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  root)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
482	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	291	None	replace
483	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(root);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	291	None	replace
484	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs,  externs);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs,  externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	291	None	replace
485	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals).traverseRoots(externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	291	None	replace
486	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs,  parent);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs,  parent);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	291	None	replace
487	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  parent).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  parent).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  parent).traverseRoots(externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	291	None	replace
488	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  internal).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  internal).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  internal).traverseRoots(externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	291	None	replace
489	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	202	None	replace
490	[BUG]  [BUGGY]  new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	202	None	replace
491	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	202	None	replace
492	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externals);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externals);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	202	None	replace
493	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  externs);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  externs);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	202	None	replace
494	[BUG]  [BUGGY]  new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	202	None	replace
495	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).trace(externs,  root);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).trace(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).trace(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).trace(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
496	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkForbidChanges)).trace(externs,  root);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkForbidChanges)).trace(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkForbidChanges)).trace(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).trace(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
497	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).trace(externs,  root);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).trace(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).trace(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).trace(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
498	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).trace(externs,  root);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).trace(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).trace(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).trace(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
499	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations.traverseRoots(externs,  root);  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations.traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations.traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    checkUserDeclarations.traverse(externs,    root);    	non-compiled	[CE]  	306	None	replace
500	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations.traverse(externs,  root));  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations.traverse(externs,  root));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations.traverse(externs,  root));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    checkUserDeclarations.traverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	306	None	replace
501	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations.traverse(root,  externs);  [CE]  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations.traverse(root,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations.traverse(root,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    checkUserDeclarations.traverse(externs,    root);    	non-compiled	[CE]  	306	None	replace
502	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations.traverse(externs,  root);  [CE]  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations.traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations.traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    checkUserDeclarations.traverse(externs,    root);    	non-compiled	[CE]  	306	None	replace
503	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges),  checkUserDeclarations.traverse(externs,  root);  [CE]  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges),  checkUserDeclarations.traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges),  checkUserDeclarations.traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    checkUserDeclarations.traverse(externs,    root);    	non-compiled	[CE]  	306	None	replace
504	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkConstants.traverse(externs,  root);  [CE]  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkConstants.traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkConstants.traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    checkUserDeclarations.traverse(externs,    root);    	non-compiled	[CE]  	306	None	replace
505	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  externs.traverseRoots(externs,  root);  [CE]  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  externs.traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  externs.traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)),    externs.traverseRoots(externs,    root);    	non-compiled	[CE]  	229	None	replace
506	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  externs.traverseRoots(externs,  root);  [CE]  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  externs.traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  externs.traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)),    externs.traverseRoots(externs,    root);    	non-compiled	[CE]  	229	None	replace
507	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOffset)).traverse(externs);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOffset)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOffset)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOffset)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
508	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOffset)).traverse(root);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOffset)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOffset)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOffset)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
509	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOffset)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOffset)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOffset)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOffset)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
510	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOffset)).traverse(externs,  root);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOffset)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOffset)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOffset)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
511	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOffset)).traverseRoots(externs);  [CE]  illegal  start  of  expression  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOffset)).traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOffset)).traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOffset)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
512	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  true)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  true)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  true)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    false)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
513	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs,  externs,  root);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs,  externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs,  externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    false)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
514	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    false)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
515	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  true)).traverseRoots(externs,  externs,  root);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  true)).traverseRoots(externs,  externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  true)).traverseRoots(externs,  externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    false)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
516	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs,  root,  forbidChanges);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs,  root,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs,  root,  forbidChanges);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    false)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
517	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs,  root,  parent);  [CE]  illegal  start  of  expression  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs,  root,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs,  root,  parent);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    false)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
518	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs,  root,  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs,  root,  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs,  root,  checkUserDeclarations);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    false)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
519	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    false)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
520	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverseRoots(externs,  externs);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverseRoots(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverseRoots(externs,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
521	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals,  assertOnChange)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals,  assertOnChange)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
522	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverseRoots(externs,  externals);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverseRoots(externs,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverseRoots(externs,  externals);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
523	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverseRoots(externs,  parent);  [CE]  illegal  start  of  expression  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverseRoots(externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverseRoots(externs,  parent);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
524	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
525	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(root,  externs);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(root,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(root,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
526	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(root,  externs);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(root,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(root,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
527	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  forbidChanges);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  forbidChanges);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs);    	non-compiled	[CE]  illegal  start  of  expression	211	None	replace
528	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs);    	non-compiled	[CE]  illegal  start  of  expression	211	None	replace
529	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  checkUserDeclarations)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  checkUserDeclarations)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  checkUserDeclarations)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
530	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  checkUserDeclarations)).traverseRoots(externs,  externs);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  checkUserDeclarations)).traverseRoots(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  checkUserDeclarations)).traverseRoots(externs,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
531	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
532	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals,  checkUserDeclarations)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals,  checkUserDeclarations)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals,  checkUserDeclarations)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
533	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  checkUserDeclarations)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  checkUserDeclarations)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  checkUserDeclarations)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
534	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  verifyOnChange)).traverseRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  verifyOnChange)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  verifyOnChange)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	138	None	replace
535	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root.cloneTree());  [CE]  <identifier>  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root.cloneTree());    	non-compiled	[CE]  <identifier>  expected	260	None	replace
536	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent.cloneTree());  [CE]  <identifier>  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root.cloneTree());    	non-compiled	[CE]  <identifier>  expected	260	None	replace
537	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations.cloneTree());  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root.cloneTree());    	non-compiled	[CE]  illegal  start  of  expression	260	None	replace
538	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  root.cloneTree());  [CE]  <identifier>  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  root.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  root.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root.cloneTree());    	non-compiled	[CE]  <identifier>  expected	260	None	replace
539	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root.cloneTree());  [CE]  <identifier>  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root.cloneTree());    	non-compiled	[CE]  <identifier>  expected	260	None	replace
540	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs.cloneTree());  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root.cloneTree());    	non-compiled	[CE]  illegal  start  of  expression	260	None	replace
541	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  compiler.cloneTree());  [CE]  <identifier>  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  compiler.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  compiler.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root.cloneTree());    	non-compiled	[CE]  <identifier>  expected	260	None	replace
542	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(null,  externs);  [CE]  <identifier>  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(null,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(null,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(null,    externs);    	non-compiled	[CE]  <identifier>  expected	200	None	replace
543	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  root);  [CE]  <identifier>  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(null,    externs);    	non-compiled	[CE]  <identifier>  expected	200	None	replace
544	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(null,  externs);  [CE]  <identifier>  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(null,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(null,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(null,    externs);    	non-compiled	[CE]  <identifier>  expected	200	None	replace
545	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs,  root);  [CE]  <identifier>  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(null,    externs);    	non-compiled	[CE]  <identifier>  expected	200	None	replace
546	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(null,  externs);  [CE]  <identifier>  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(null,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(null,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(null,    externs);    	non-compiled	[CE]  <identifier>  expected	200	None	replace
547	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root,  hasOkDuplicateDeclaration);  [CE]  <identifier>  expected  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root,  hasOkDuplicateDeclaration);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  <identifier>  expected	203	None	replace
548	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclaration);  [CE]  <identifier>  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclaration);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  <identifier>  expected	203	None	replace
549	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root,  checkUserDeclaration);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root,  checkUserDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root,  checkUserDeclaration);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	203	None	replace
550	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root,  checkUserDeclarations);  [CE]  <identifier>  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root,  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root,  checkUserDeclarations);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  <identifier>  expected	203	None	replace
551	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  hasOkDuplicateDeclaration);  [CE]  <identifier>  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  hasOkDuplicateDeclaration);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  <identifier>  expected	203	None	replace
552	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [CE]  <identifier>  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  <identifier>  expected	203	None	replace
553	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(root,    externs);    	non-compiled	[CE]  <identifier>  expected	109	None	replace
554	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(root,  externs);  [CE]  <identifier>  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(root,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(root,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(root,    externs);    	non-compiled	[CE]  <identifier>  expected	109	None	replace
555	[BUG]  [BUGGY]  NodeTraversal  visitor  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  visitor  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  visitor  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(root,    externs);    	non-compiled	[CE]  <identifier>  expected	109	None	replace
556	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(extras,  externs);  [CE]  <identifier>  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(extras,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(extras,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(extras,    root);    	non-compiled	[CE]  <identifier>  expected	214	None	replace
557	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  null,  hasOkDuplicateDeclaration);  [CE]  <identifier>  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  null,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  null,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    null);    	non-compiled	[CE]  <identifier>  expected	225	None	replace
558	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(externs,  root);  [CE]  <identifier>  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
559	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(externs);  [CE]  <identifier>  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
560	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange)).traverse(root);  [CE]  <identifier>  expected  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
561	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(root);  [CE]  <identifier>  expected  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
562	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE),  assertOnChange);  [CE]  illegal  start  of  expression  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE),  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE),  assertOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
563	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(root,  assertOnChange);  [CE]  <identifier>  expected  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(root,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(root,  assertOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
564	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoot(root);  [CE]  illegal  start  of  expression  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoot(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoot(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
565	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  root,  hasOkDuplicateDeclaration);  [CE]  <identifier>  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  root,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externals,  root,  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    externals,    root);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
566	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root  +  1);  [CE]  <identifier>  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root  +  1);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root  +  1);	  NodeTraversal.traverse(compiler,    externals,    root);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
567	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  root,  false);  [CE]  <identifier>  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  root,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externals,  root,  false);	  NodeTraversal.traverse(compiler,    externals,    root);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
568	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externes)).traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	285	None	replace
569	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes)).traverseRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externes)).traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	285	None	replace
570	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes)).traverseRoots(externs,  externs);  [CE]  <identifier>  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes)).traverseRoots(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes)).traverseRoots(externs,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externes)).traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	285	None	replace
571	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes)).traverseRoots(externs,  externs,  root);  [CE]  <identifier>  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes)).traverseRoots(externs,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes)).traverseRoots(externs,  externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externes)).traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	285	None	replace
572	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(root,  externs);  [CE]  <identifier>  expected  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(root,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(root,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externes)).traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	285	None	replace
573	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes)).traverseRoots(root,  externs);  [CE]  illegal  start  of  expression  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes)).traverseRoots(root,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes)).traverseRoots(root,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externes)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	285	None	replace
574	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  assertOnChange);  [CE]  <identifier>  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  assertOnChange);	  NodeTraversal.traverseNode(compiler,    externs,    root,    parent);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
575	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  node);  [CE]  <identifier>  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  node);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  node);	  NodeTraversal.traverseNode(compiler,    externs,    root,    parent);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
576	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [CE]  <identifier>  expected  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externs.cloneTree())).traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	139	None	replace
577	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).traverseRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externs.cloneTree())).traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	139	None	replace
578	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).traverseRoots(root,  externs);  [CE]  <identifier>  expected  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).traverseRoots(root,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).traverseRoots(root,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externs.cloneTree())).traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	139	None	replace
579	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).traverseRoots(externs,  parent);  [CE]  <identifier>  expected  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).traverseRoots(externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).traverseRoots(externs,  parent);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externs.cloneTree())).traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	139	None	replace
580	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).traverseRoots(converter,  externs,  root);  [CE]  illegal  start  of  expression  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).traverseRoots(converter,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).traverseRoots(converter,  externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externs.cloneTree())).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
581	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals.cloneTree())).traverseRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals.cloneTree())).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals.cloneTree())).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externs.cloneTree())).traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	139	None	replace
582	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.clone())).traverseRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.clone())).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.clone())).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externs.cloneTree())).traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	139	None	replace
583	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).traverseRoots(externs,  assertOnChange);  [CE]  <identifier>  expected  [FE]                                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).traverseRoots(externs,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).traverseRoots(externs,  assertOnChange);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externs.cloneTree())).traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	139	None	replace
584	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  exprs);  [CE]  <identifier>  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  exprs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  exprs);	  NodeTraversal.traverse(compiler,    root,    exprs);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
585	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  expr);  [CE]  <identifier>  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  expr);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  expr);	  NodeTraversal.traverse(compiler,    root,    exprs);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
586	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  exprs,  hasOkDuplicateDeclaration);  [CE]  <identifier>  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  exprs,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  exprs,  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    root,    exprs);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
587	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  exprs);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  exprs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externals,  exprs);	  NodeTraversal.traverse(compiler,    root,    exprs);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
588	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  exprs,  root);  [CE]  <identifier>  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  exprs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  exprs,  root);	  NodeTraversal.traverse(compiler,    root,    exprs);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
589	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  exprs);  [CE]  <identifier>  expected  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externes,  exprs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externes,  exprs);	  NodeTraversal.traverse(compiler,    root,    exprs);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
590	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);	  if(verifyOnChange)    {    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    }    	non-compiled	[CE]  <identifier>  expected	246	None	replace
591	[BUG]  [BUGGY]  AssertionError(compiler,  verifyOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);  }  [CE]  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  AssertionError(compiler,  verifyOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	AssertionError(compiler,  verifyOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);  }	  if(verifyOnChange)    {    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    }    	non-compiled	[CE]  	246	None	replace
592	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);	  if(verifyOnChange)    {    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    }    	non-compiled	[CE]  <identifier>  expected	246	None	replace
593	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);	  if(verifyOnChange)    {    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    }    	non-compiled	[CE]  illegal  start  of  expression	246	None	replace
594	[BUG]  [BUGGY]  AssertionError(compiler,  verifyOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs);  }  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  AssertionError(compiler,  verifyOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	AssertionError(compiler,  verifyOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs);  }	  if(verifyOnChange)    {    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    }    	non-compiled	[CE]  	246	None	replace
595	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  parent);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  parent);	  NodeTraversal.traverse(compiler,    root,    parent);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
596	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  parent,  hasOkDuplicateDeclaration);  [CE]  <identifier>  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  parent,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  parent,  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    root,    parent);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
597	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  parent);  [CE]  <identifier>  expected  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externals,  parent);	  NodeTraversal.traverse(compiler,    root,    parent);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
598	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  parent);  [CE]  <identifier>  expected  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externes,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externes,  parent);	  NodeTraversal.traverse(compiler,    root,    parent);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
599	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  externs);  [CE]  <identifier>  expected  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  roots,  externs);	  NodeTraversal.traverse(compiler,    root,    parent);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
600	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  externs.cloneTree());  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  externs.cloneTree());  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  externs.cloneTree());	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externs.cloneTree());    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
601	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externs.cloneTree());  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externs.cloneTree());  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externs.cloneTree());	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externs.cloneTree());    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
602	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).plot(externs,  externs.cloneTree());  [CE]  <identifier>  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).plot(externs,  externs.cloneTree());  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).plot(externs,  externs.cloneTree());	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externs.cloneTree());    	non-compiled	[CE]  <identifier>  expected	16	None	replace
603	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externs.cloneTree());  [CE]  <identifier>  expected  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externs.cloneTree());  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externs.cloneTree());	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externs.cloneTree());    	non-compiled	[CE]  <identifier>  expected	16	None	replace
604	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  externs.cloneTree());  [CE]  illegal  start  of  expression  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  externs.cloneTree());  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  externs.cloneTree());	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externs.cloneTree());    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
605	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  root.cloneTree());  [CE]  <identifier>  expected  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  root.cloneTree());  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  root.cloneTree());	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externs.cloneTree());    	non-compiled	[CE]  <identifier>  expected	16	None	replace
606	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).plot(externs,  externs.cloneTree());  [CE]  illegal  start  of  expression  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).plot(externs,  externs.cloneTree());  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).plot(externs,  externs.cloneTree());	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externs.cloneTree());    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
607	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root,  externs.cloneTree());  [CE]  <identifier>  expected  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root,  externs.cloneTree());  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root,  externs.cloneTree());	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externs.cloneTree());    	non-compiled	[CE]  <identifier>  expected	16	None	replace
608	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).plot(externs,  assertOnChange);  [CE]  <identifier>  expected  [FE]                                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).plot(externs,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).plot(externs,  assertOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externs.cloneTree());    	non-compiled	[CE]  <identifier>  expected	16	None	replace
609	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    externs,    root,    renamer);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
610	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  renamer,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  renamer,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  renamer,  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    externs,    root,    renamer);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
611	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  roots);  [CE]  <identifier>  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  roots);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  roots);	  NodeTraversal.traverseRoots(compiler,    externs);    	non-compiled	[CE]  <identifier>  expected	208	None	replace
612	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  root);  [CE]  <identifier>  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  root);	  NodeTraversal.traverseRoots(compiler,    externs);    	non-compiled	[CE]  <identifier>  expected	208	None	replace
613	[BUG]  [BUGGY]  NodeTraversal.traverseNodeRoots(compiler,  root);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodeRoots(compiler,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodeRoots(compiler,  root);	  NodeTraversal.traverseRoots(compiler,    externs);    	non-compiled	[CE]  illegal  start  of  expression	208	None	replace
614	[BUG]  [BUGGY]  NodeTraversal.traverseDeclarations(compiler,  root);  [CE]  <identifier>  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseDeclarations(compiler,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseDeclarations(compiler,  root);	  NodeTraversal.traverseRoots(compiler,    externs);    	non-compiled	[CE]  <identifier>  expected	208	None	replace
615	[BUG]  [BUGGY]  NodeTraversal.traverseDeclaration(compiler,  root);  [CE]  <identifier>  expected  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseDeclaration(compiler,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseDeclaration(compiler,  root);	  NodeTraversal.traverseRoots(compiler,    externs);    	non-compiled	[CE]  <identifier>  expected	208	None	replace
616	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  true);  [CE]  <identifier>  expected  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  true);	  NodeTraversal.traverseRoots(compiler,    externs);    	non-compiled	[CE]  <identifier>  expected	208	None	replace
617	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root.traverseRoots(externs);  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root.traverseRoots(externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root.traverseRoots(externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root.traverse(externs);    	non-compiled	[CE]  	30	None	replace
618	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs.traverse(root);  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs.traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs.traverse(root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root.traverse(externs);    	non-compiled	[CE]  	30	None	replace
619	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs.traverse(externs);  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs.traverse(externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs.traverse(externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root.traverse(externs);    	non-compiled	[CE]  	30	None	replace
620	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverse(root);  [CE]  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverse(root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root.traverse(externs);    	non-compiled	[CE]  	30	None	replace
621	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  [CE]  <identifier>  expected  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root.traverse(externs);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
622	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  root.traverseRoots(externs);  [CE]  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  root.traverseRoots(externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  root.traverseRoots(externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root.traverse(externs);    	non-compiled	[CE]  	30	None	replace
623	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  externs,  root);  [CE]  <identifier>  expected  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
624	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  <identifier>  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
625	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
626	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  null);  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  null);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  null);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    this);    	non-compiled	[CE]  illegal  start  of  expression	226	None	replace
627	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  this,  hasOkDuplicateDeclaration);  [CE]  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  this,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  this,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    this);    	non-compiled	[CE]  	226	None	replace
628	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  this,  true);  [CE]  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  this,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  this,  true);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    this);    	non-compiled	[CE]  	226	None	replace
629	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  exprs)).traverseRoots(root,  root);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  exprs)).traverseRoots(root,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  exprs)).traverseRoots(root,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externs)).traverseRoots(root,    root);    	non-compiled	[CE]  illegal  start  of  expression	219	None	replace
630	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(null,  externs);  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(null,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(null,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(null,    externs);    	non-compiled	[CE]  illegal  start  of  expression	265	None	replace
631	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null,  root);  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(null,    externs);    	non-compiled	[CE]  illegal  start  of  expression	265	None	replace
632	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).plot(null,  externs);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).plot(null,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).plot(null,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(null,    externs);    	non-compiled	[CE]  illegal  start  of  expression	265	None	replace
633	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null,  externs,  root);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null,  externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null,  externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(null,    externs);    	non-compiled	[CE]  illegal  start  of  expression	265	None	replace
634	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).plot(null,  externs);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).plot(null,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).plot(null,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(null,    externs);    	non-compiled	[CE]  illegal  start  of  expression	265	None	replace
635	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).plot(null,  externs);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).plot(null,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).plot(null,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(null,    externs);    	non-compiled	[CE]  illegal  start  of  expression	265	None	replace
636	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).plot(null,  externs);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).plot(null,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).plot(null,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(null,    externs);    	non-compiled	[CE]  illegal  start  of  expression	265	None	replace
637	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
638	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  assertOnChange);  [CE]  illegal  start  of  expression  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  assertOnChange);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
639	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  parent);  [CE]  illegal  start  of  expression  [FE]                                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  parent);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
640	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  checkUserDeclarations);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
641	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externals);  [CE]  illegal  start  of  expression  [FE]                                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externals);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
642	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  forbidChanges);  [CE]  illegal  start  of  expression  [FE]                                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  forbidChanges);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
643	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  internal);  [CE]  illegal  start  of  expression  [FE]                                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  internal);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  internal);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
644	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  true);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  true);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    false);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
645	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  false);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  root,  false);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    false);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
646	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  false,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  false,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  false,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    false);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
647	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  false,  true);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  false,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  false,  true);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    false);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
648	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  null,  false);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  null,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  null,  false);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    false);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
649	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  renamer,  false);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  renamer,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  renamer,  false);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    false);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
650	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclaration);  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclaration);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
651	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  hasOkDuplicateDeclaration);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
652	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root,  hasOkDuplicateDeclaration);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
653	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  verifyOnChange);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  verifyOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  verifyOnChange);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
654	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root,  checkUserDeclaration);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root,  checkUserDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root,  checkUserDeclaration);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
655	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root,  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root,  checkUserDeclarations);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
656	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEqualsOnChange)).traverseRoots(externs,  externs);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEqualsOnChange)).traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEqualsOnChange)).traverseRoots(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertEqualsOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	292	None	replace
657	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertEqualsOnChange)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertEqualsOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertEqualsOnChange)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertEqualsOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	292	None	replace
658	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs,  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs,  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs,  checkUserDeclarations);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  illegal  start  of  expression	247	None	replace
659	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs,  forbidChanges);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs,  forbidChanges);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  illegal  start  of  expression	247	None	replace
660	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs,  checkUserDeclarations,  forbidChanges);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs,  checkUserDeclarations,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs,  checkUserDeclarations,  forbidChanges);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  illegal  start  of  expression	247	None	replace
661	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  forbidChanges);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  forbidChanges);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  illegal  start  of  expression	247	None	replace
662	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  checkUserDeclarations,  forbidChanges);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  checkUserDeclarations,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  checkUserDeclarations,  forbidChanges);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  illegal  start  of  expression	247	None	replace
663	[BUG]  [BUGGY]  if(verifyOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);  }  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(verifyOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(verifyOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);  }	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  illegal  start  of  expression	247	None	replace
664	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkUserDeclarations)).traverseRoots(externs,  externs);  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkUserDeclarations)).traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkUserDeclarations)).traverseRoots(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
665	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  verifyOnChange,  forbidChanges)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  verifyOnChange,  forbidChanges)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  verifyOnChange,  forbidChanges)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
666	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkUserDeclarations)).traverseRoots(externs,  forbidChanges);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkUserDeclarations)).traverseRoots(externs,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkUserDeclarations)).traverseRoots(externs,  forbidChanges);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
667	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkOkDuplicateDeclaration)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkOkDuplicateDeclaration)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkOkDuplicateDeclaration)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
668	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root,  parent);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root,  parent);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    parent);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
669	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent,  hasOkDuplicateDeclaration);  [CE]  orphaned  case  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent,  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent,  hasOkDuplicateDeclaration);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    parent);    	non-compiled	[CE]  orphaned  case	24	None	replace
670	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  parent);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  parent);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    parent);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
671	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    parent);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
672	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  parent,  hasOkDuplicateDeclaration);  [CE]  orphaned  case  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  parent,  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  parent,  hasOkDuplicateDeclaration);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    parent);    	non-compiled	[CE]  orphaned  case	24	None	replace
673	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root,  parent);  [CE]  illegal  start  of  type  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root,  parent);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    parent);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
674	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverse(externs,  externals);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverse(externs,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverse(externs,  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externals);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
675	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs,  externals);  [CE]  illegal  start  of  type  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs,  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externals);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
676	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externals);  [CE]  illegal  start  of  type  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externals);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
677	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVars)).traverse(externs);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVars)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVars)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertVars)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	309	None	replace
678	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVars)).traverseRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVars)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVars)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertVars)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	309	None	replace
679	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertVars)).traverse(root);  [CE]  illegal  start  of  type  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertVars)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertVars)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertVars)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	309	None	replace
680	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVars)).traverse(externs,  root);  [CE]  illegal  start  of  type  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVars)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVars)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertVars)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	309	None	replace
681	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertVars)).traverse(externs);  [CE]  illegal  start  of  type  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertVars)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertVars)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertVars)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	309	None	replace
682	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertValues)).traverse(root);  [CE]  orphaned  case  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertValues)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertValues)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertVars)).traverse(root);    	non-compiled	[CE]  orphaned  case	309	None	replace
683	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [CE]  orphaned  case  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  orphaned  case	322	None	replace
684	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);  [CE]  orphaned  case  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  orphaned  case	322	None	replace
685	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  parent);  [CE]  orphaned  case  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  parent);	  new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  orphaned  case	322	None	replace
686	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  externals);  [CE]  orphaned  case  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  orphaned  case	322	None	replace
687	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  orphaned  case  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  orphaned  case	322	None	replace
688	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(root,  externs);  [CE]  orphaned  case  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(root,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(root,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  orphaned  case	322	None	replace
689	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  checkUserDeclarations)).traverseRoots(externs,  root);  [CE]  orphaned  case  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  checkUserDeclarations)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  checkUserDeclarations)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  orphaned  case	322	None	replace
690	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  orphaned  case  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  orphaned  case	322	None	replace
691	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  assertOnChange);  [CE]  orphaned  case  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  assertOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  orphaned  case	117	None	replace
692	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externals);  [CE]  orphaned  case  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  orphaned  case	117	None	replace
693	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter,  externs);  [CE]  orphaned  case  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  orphaned  case	117	None	replace
694	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  verifyOnChange);  [CE]  orphaned  case  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  verifyOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  verifyOnChange);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  orphaned  case	151	None	replace
695	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  hasOkDuplicateDeclaration,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  orphaned  case  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  hasOkDuplicateDeclaration,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  hasOkDuplicateDeclaration,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  orphaned  case	151	None	replace
696	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  hasOkDuplicateDeclaration,  checkUserDeclarations);  [CE]  orphaned  case  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  hasOkDuplicateDeclaration,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  hasOkDuplicateDeclaration,  checkUserDeclarations);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  orphaned  case	151	None	replace
697	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  this.checkUserDeclarations);  [CE]  orphaned  case  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  this.checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  this.checkUserDeclarations);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  orphaned  case	151	None	replace
698	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs.cloneTree());  [CE]  orphaned  case  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  orphaned  case	258	None	replace
699	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root.cloneTree());  [CE]  orphaned  case  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  orphaned  case	258	None	replace
700	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root.cloneTree());  [CE]  orphaned  case  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  orphaned  case	258	None	replace
701	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  externs.cloneTree());  [CE]  orphaned  case  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  externs.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  externs.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  orphaned  case	258	None	replace
702	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  exprs)).traverseRoots(externs,  root);  [CE]  orphaned  case  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  exprs)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  exprs)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externs)).traverseRoots(externs,    root);    	non-compiled	[CE]  orphaned  case	134	None	replace
703	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  parent);  [CE]  orphaned  case  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  parent);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externs)).traverseRoots(externs,    root);    	non-compiled	[CE]  orphaned  case	134	None	replace
704	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(root,  externs);  [CE]  orphaned  case  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(root,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(root,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  orphaned  case	244	None	replace
705	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(null,  externs);  [CE]  orphaned  case  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(null,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(null,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  orphaned  case	244	None	replace
706	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(root,  externals);  [CE]  orphaned  case  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(root,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(root,  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  orphaned  case	244	None	replace
707	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(parent,  externs);  [CE]  orphaned  case  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(parent,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(parent,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  orphaned  case	244	None	replace
708	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(prototype);  [CE]  orphaned  case  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(prototype);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(prototype);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(prototype);    	non-compiled	[CE]  orphaned  case	263	None	replace
709	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(prototype);  [CE]  orphaned  case  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(prototype);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(prototype);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(prototype);    	non-compiled	[CE]  orphaned  case	263	None	replace
710	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(prototype);  [CE]  orphaned  case  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(prototype);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(prototype);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(prototype);    	non-compiled	[CE]  orphaned  case	263	None	replace
711	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(proxy);  [CE]  orphaned  case  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(proxy);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(proxy);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(prototype);    	non-compiled	[CE]  orphaned  case	263	None	replace
712	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root,  checkUserDeclarations);  [CE]  orphaned  case  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root,  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root,  checkUserDeclarations);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externals,    root);    	non-compiled	[CE]  orphaned  case	277	None	replace
713	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root,  parent);  [CE]  orphaned  case  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root,  parent);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externals,    root);    	non-compiled	[CE]  orphaned  case	277	None	replace
714	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  internals,  root);  [CE]  orphaned  case  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  internals,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  internals,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externals,    root);    	non-compiled	[CE]  orphaned  case	277	None	replace
715	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root,  forbidChanges);  [CE]  orphaned  case  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root,  forbidChanges);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externals,    root);    	non-compiled	[CE]  orphaned  case	277	None	replace
716	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root,  internals);  [CE]  orphaned  case  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root,  internals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root,  internals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externals,    root);    	non-compiled	[CE]  orphaned  case	277	None	replace
717	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root,  externals);  [CE]  orphaned  case  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root,  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externals,    root);    	non-compiled	[CE]  orphaned  case	277	None	replace
718	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externals,  root,  hasOkDuplicateDeclaration);  [CE]  orphaned  case  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externals,  root,  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externals,  root,  hasOkDuplicateDeclaration);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externals,    root);    	non-compiled	[CE]  orphaned  case	277	None	replace
719	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root);  [CE]  orphaned  case  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    root);    	non-compiled	[CE]  orphaned  case	267	None	replace
720	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externs);  [CE]  orphaned  case  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    root);    	non-compiled	[CE]  orphaned  case	267	None	replace
721	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  root);  [CE]  orphaned  case  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    root);    	non-compiled	[CE]  orphaned  case	267	None	replace
722	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root);  [CE]  orphaned  case  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    root);    	non-compiled	[CE]  orphaned  case	267	None	replace
723	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externs,  root);  [CE]  orphaned  case  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    root);    	non-compiled	[CE]  orphaned  case	267	None	replace
724	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  externs);  [CE]  orphaned  case  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    root);    	non-compiled	[CE]  orphaned  case	267	None	replace
725	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  parent);  [CE]  orphaned  case  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  parent);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    root);    	non-compiled	[CE]  orphaned  case	267	None	replace
726	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  orphaned  case  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    root);    	non-compiled	[CE]  orphaned  case	267	None	replace
727	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  externs);  [CE]  orphaned  case  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(externs,    root);    	non-compiled	[CE]  orphaned  case	31	None	replace
728	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  root);  [CE]  orphaned  case  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(externs,    root);    	non-compiled	[CE]  orphaned  case	31	None	replace
729	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  externs,  root);  [CE]  orphaned  case  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(externs,    root);    	non-compiled	[CE]  orphaned  case	31	None	replace
730	[BUG]  [BUGGY]  NodeTraversal  comp  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  root);  [CE]  orphaned  case  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  comp  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  comp  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(externs,    root);    	non-compiled	[CE]  orphaned  case	31	None	replace
731	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  externs);  [CE]  orphaned  case  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(externs,    root);    	non-compiled	[CE]  orphaned  case	31	None	replace
732	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  externals);  [CE]  orphaned  case  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  externals);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(externs,    root);    	non-compiled	[CE]  orphaned  case	31	None	replace
733	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  externs.cloneTree());  [CE]  orphaned  case  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  externs.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  externs.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(externs,    root);    	non-compiled	[CE]  orphaned  case	31	None	replace
734	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(root,  externs);  [CE]  orphaned  case  [FE]                                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(root,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(root,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(externs,    root);    	non-compiled	[CE]  orphaned  case	31	None	replace
735	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  parent,  hasOkDuplicateDeclaration);  [CE]  orphaned  case  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  parent,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  parent,  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    externs,    root,    parent);    	non-compiled	[CE]  orphaned  case	97	None	replace
736	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(root);  [CE]  orphaned  case  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(root);	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  orphaned  case	172	None	replace
737	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(root);  [CE]  orphaned  case  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(root);	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  orphaned  case	172	None	replace
738	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  [CE]  orphaned  case  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange));	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs.traverse(root);    	non-compiled	[CE]  orphaned  case	111	None	replace
739	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs.traverse(externs,  root);  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs.traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs.traverse(externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs.traverse(root);    	non-compiled	[CE]  	111	None	replace
740	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  internals.traverse(root);  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  internals.traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  internals.traverse(root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs.traverse(root);    	non-compiled	[CE]  	111	None	replace
741	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverse(root);  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverse(root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs.traverse(root);    	non-compiled	[CE]  	111	None	replace
742	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations).traverse(root);  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations).traverse(root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs.traverse(root);    	non-compiled	[CE]  	111	None	replace
743	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  [CE]  orphaned  case  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs.traverse(root);    	non-compiled	[CE]  orphaned  case	111	None	replace
744	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs,  root,  assertOnChange);  [CE]  orphaned  case  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs,  root,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs,  root,  assertOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  orphaned  case	127	None	replace
745	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs,  checkUserDeclarations,  hasOkDuplicateDeclaration);  [CE]  orphaned  case  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs,  checkUserDeclarations,  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs,  checkUserDeclarations,  hasOkDuplicateDeclaration);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  orphaned  case	127	None	replace
746	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externals,  assertOnChange);  [CE]  orphaned  case  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externals,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externals,  assertOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  orphaned  case	127	None	replace
747	[BUG]  [BUGGY]  if(verifyOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  }  [CE]  orphaned  case  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(verifyOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(verifyOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  }	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  orphaned  case	127	None	replace
748	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  checkUserDeclaration);  [CE]  orphaned  case  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  checkUserDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  checkUserDeclaration);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  orphaned  case	127	None	replace
749	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs,  assertOnChange);  [CE]  orphaned  case  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs,  assertOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  orphaned  case	127	None	replace
750	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  true);  [CE]  orphaned  case  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  true);	  NodeTraversal.traverse(compiler,    externs,    root,    false);    	non-compiled	[CE]  orphaned  case	96	None	replace
751	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null,  false);  [CE]  orphaned  case  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  null,  false);	  NodeTraversal.traverse(compiler,    externs,    root,    false);    	non-compiled	[CE]  orphaned  case	96	None	replace
752	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  false);  [CE]  orphaned  case  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  false);	  NodeTraversal.traverse(compiler,    externs,    root,    false);    	non-compiled	[CE]  orphaned  case	96	None	replace
753	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  false,  true);  [CE]  orphaned  case  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  false,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  false,  true);	  NodeTraversal.traverse(compiler,    externs,    root,    false);    	non-compiled	[CE]  orphaned  case	96	None	replace
754	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  assertOnChange,  false);  [CE]  orphaned  case  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  assertOnChange,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  assertOnChange,  false);	  NodeTraversal.traverse(compiler,    externs,    root,    false);    	non-compiled	[CE]  orphaned  case	96	None	replace
755	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  true,  false);  [CE]  orphaned  case  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  true,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  true,  false);	  NodeTraversal.traverse(compiler,    externs,    root,    false);    	non-compiled	[CE]  orphaned  case	96	None	replace
756	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  root,  true);  [CE]  orphaned  case  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  root,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externals,  root,  true);	  NodeTraversal.traverse(compiler,    externs,    root,    false);    	non-compiled	[CE]  orphaned  case	96	None	replace
757	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  false,  true);  [CE]  orphaned  case  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  false,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  false,  true);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    false);    	non-compiled	[CE]  orphaned  case	148	None	replace
758	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  assertOnChange,  false);  [CE]  orphaned  case  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  assertOnChange,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  assertOnChange,  false);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    false);    	non-compiled	[CE]  orphaned  case	148	None	replace
759	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  false);  [CE]  orphaned  case  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  renamer,  false);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    false);    	non-compiled	[CE]  orphaned  case	148	None	replace
760	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  null,  false);  [CE]  orphaned  case  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  null,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  null,  false);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    false);    	non-compiled	[CE]  orphaned  case	148	None	replace
761	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  internal,  false);  [CE]  orphaned  case  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  internal,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  internal,  false);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    false);    	non-compiled	[CE]  orphaned  case	148	None	replace
762	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeStatements(),  assertOnChange);  [CE]  orphaned  case  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeStatements(),  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeStatements(),  assertOnChange);	  NodeTraversal.traverse(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  orphaned  case	299	None	replace
763	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  assertOnChange,  new  NormalizeStatements());  [CE]  orphaned  case  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  assertOnChange,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  assertOnChange,  new  NormalizeStatements());	  NodeTraversal.traverse(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  orphaned  case	299	None	replace
764	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  root,  new  NormalizeStatements());  [CE]  orphaned  case  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  root,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externals,  root,  new  NormalizeStatements());	  NodeTraversal.traverse(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  orphaned  case	299	None	replace
765	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeStatements(),  assertOnChange));  [CE]  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeStatements(),  assertOnChange));  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeStatements(),  assertOnChange));	  NodeTraversal.traverse(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  	299	None	replace
766	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  internal,  new  NormalizeStatements());  [CE]  orphaned  case  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  internal,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  internal,  new  NormalizeStatements());	  NodeTraversal.traverse(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  orphaned  case	299	None	replace
767	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  false,  new  NormalizeStatements());  [CE]  orphaned  case  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  false,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  false,  new  NormalizeStatements());	  NodeTraversal.traverse(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  orphaned  case	299	None	replace
768	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  false,  new  NormalizeStatements());  [CE]  orphaned  case  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  false,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  false,  new  NormalizeStatements());	  NodeTraversal.traverse(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  orphaned  case	299	None	replace
769	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(converter,  externs,  root);  [CE]  orphaned  case  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(converter,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(converter,  externs,  root);	  NodeTraversal.traverseRoots(externs,    root);    	non-compiled	[CE]  orphaned  case	209	None	replace
770	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [CE]  orphaned  case  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(externs,  root,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(externs,    root);    	non-compiled	[CE]  orphaned  case	209	None	replace
771	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  false);  [CE]  orphaned  case  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(externs,  root,  false);	  NodeTraversal.traverseRoots(externs,    root);    	non-compiled	[CE]  orphaned  case	209	None	replace
772	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  true);  [CE]  orphaned  case  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(externs,  root,  true);	  NodeTraversal.traverseRoots(externs,    root);    	non-compiled	[CE]  orphaned  case	209	None	replace
773	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  renamer);  [CE]  orphaned  case  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  renamer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(externs,  root,  renamer);	  NodeTraversal.traverseRoots(externs,    root);    	non-compiled	[CE]  orphaned  case	209	None	replace
774	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  new  NormalizeStatements());  [CE]  orphaned  case  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(externs,  root,  new  NormalizeStatements());	  NodeTraversal.traverseRoots(externs,    root);    	non-compiled	[CE]  orphaned  case	209	None	replace
775	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  this);  [CE]  orphaned  case  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  this);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(externs,  root,  this);	  NodeTraversal.traverseRoots(externs,    root);    	non-compiled	[CE]  orphaned  case	209	None	replace
776	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  root);  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)),    externs);    	non-compiled	[CE]  	271	None	replace
777	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);  [CE]  orphaned  case  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)),    externs);    	non-compiled	[CE]  orphaned  case	271	None	replace
778	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  externs);  [CE]  orphaned  case  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)),    externs);    	non-compiled	[CE]  orphaned  case	271	None	replace
779	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root),  externs);  [CE]  orphaned  case  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root),  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root),  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)),    externs);    	non-compiled	[CE]  orphaned  case	271	None	replace
780	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)),  externs);  [CE]  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)),  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)),  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)),    externs);    	non-compiled	[CE]  	271	None	replace
781	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)),  externs);  [CE]  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)),  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)),  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)),    externs);    	non-compiled	[CE]  	271	None	replace
782	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)),  root);  [CE]  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)),  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)),  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)),    externs);    	non-compiled	[CE]  	271	None	replace
783	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)),  externs);  [CE]  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)),  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)),  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)),    externs);    	non-compiled	[CE]  	271	None	replace
784	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(extterns,  externs);  [CE]  orphaned  case  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(extterns,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(extterns,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(extterns,    root);    	non-compiled	[CE]  orphaned  case	212	None	replace
785	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);  [CE]  orphaned  case  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  orphaned  case	34	None	replace
786	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter,  externs,  root);  [CE]  orphaned  case  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter,  externs,  root);	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  orphaned  case	34	None	replace
787	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);  [CE]  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  	34	None	replace
788	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs);  [CE]  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs);	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  	34	None	replace
789	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal);  [CE]  <identifier>  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal);	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
790	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  renamer);  [CE]  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  renamer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  renamer);	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  	34	None	replace
791	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  source);  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  source);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  source);	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  	34	None	replace
792	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  renamer,  hasOkDuplicateDeclaration);  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  renamer,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  renamer,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    renamer);    	non-compiled	[CE]  	186	None	replace
793	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    renamer);    	non-compiled	[CE]  	186	None	replace
794	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  stateOnChange)).traverseRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  stateOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  stateOnChange)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    stateOnChange)).traverse(root);    	non-compiled	[CE]  <identifier>  expected	318	None	replace
795	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  stateOnChange)).traverse(externs,  root);  [CE]  <identifier>  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  stateOnChange)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  stateOnChange)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    stateOnChange)).traverse(root);    	non-compiled	[CE]  <identifier>  expected	318	None	replace
796	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  stateOnChange)).traverse(externs);  [CE]  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  stateOnChange)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  stateOnChange)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    stateOnChange)).traverse(root);    	non-compiled	[CE]  	318	None	replace
797	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  stateOnChange)).traverse(externs);  [CE]  <identifier>  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  stateOnChange)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  stateOnChange)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    stateOnChange)).traverse(root);    	non-compiled	[CE]  <identifier>  expected	318	None	replace
798	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  <identifier>  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  <identifier>  expected	126	None	replace
799	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  parent);  [CE]  <identifier>  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  parent);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  <identifier>  expected	126	None	replace
800	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverse(externs,  root);  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs.traverse(externs,    root);    	non-compiled	[CE]  	112	None	replace
801	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  externs.traverse(externs,  root);  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  externs.traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  externs.traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs.traverse(externs,    root);    	non-compiled	[CE]  	112	None	replace
802	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  internals.traverse(externs,  root);  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  internals.traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  internals.traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs.traverse(externs,    root);    	non-compiled	[CE]  	112	None	replace
803	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root.traverse(externs,  root);  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root.traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root.traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs.traverse(externs,    root);    	non-compiled	[CE]  	112	None	replace
804	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  internal);  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  internal);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  internal);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    internal);    	non-compiled	[CE]  	122	None	replace
805	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  internal);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  internal);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  internal);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    internal);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
806	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  internal);  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  internal);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  internal);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    internal);    	non-compiled	[CE]  	122	None	replace
807	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internal)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internal)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internal)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    internal);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
808	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internal)).traverseRoots(externs,  assertOnChange);  [CE]  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internal)).traverseRoots(externs,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internal)).traverseRoots(externs,  assertOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    internal);    	non-compiled	[CE]  	122	None	replace
809	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  }  [CE]  <identifier>  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  }	  if(compiler!=    null)    {    new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    }    	non-compiled	[CE]  <identifier>  expected	204	None	replace
810	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);	  if(compiler!=    null)    {    new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    }    	non-compiled	[CE]  illegal  start  of  expression	204	None	replace
811	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  internal);  [CE]  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  internal);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  internal);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    internal);    	non-compiled	[CE]  	283	None	replace
812	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs,  internal);  [CE]  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs,  internal);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs,  internal);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    internal);    	non-compiled	[CE]  	283	None	replace
813	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter,  externs,  internal);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter,  externs,  internal);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter,  externs,  internal);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    internal);    	non-compiled	[CE]  illegal  start  of  expression	283	None	replace
814	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs,  internal);  [CE]  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs,  internal);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs,  internal);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    internal);    	non-compiled	[CE]  	283	None	replace
815	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(internal,  externs,  root);  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(internal,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(internal,  externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    internal);    	non-compiled	[CE]  	283	None	replace
816	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  internal);  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  internal);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  internal);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    internal);    	non-compiled	[CE]  	283	None	replace
817	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  internal);  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  internal);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  internal);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    internal);    	non-compiled	[CE]  	283	None	replace
818	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(root);  [CE]  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(root);    	non-compiled	[CE]  	26	None	replace
819	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs,  root);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs,  root);	  new    NodeTraversal(compiler,    compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
820	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  new    NodeTraversal(compiler,    compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
821	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  new    NodeTraversal(compiler,    compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
822	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  hasOkDuplicateDeclaration);	  new    NodeTraversal(compiler,    compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
823	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  parent);  [CE]  illegal  start  of  expression  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  parent);	  new    NodeTraversal(compiler,    compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
824	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs,  parent);  [CE]  illegal  start  of  expression  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs,  parent);	  new    NodeTraversal(compiler,    compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
825	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  forbidChanges);  [CE]  illegal  start  of  expression  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  forbidChanges);	  new    NodeTraversal(compiler,    compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
826	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externals);  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externals);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
827	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals)).plot(externs,  root);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals)).plot(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals)).plot(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externals);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
828	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externals);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externals);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
829	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).plot(externs,  externals);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).plot(externs,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).plot(externs,  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externals);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
830	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals,  assertOnChange)).plot(externs,  root);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals,  assertOnChange)).plot(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals,  assertOnChange)).plot(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externals);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
831	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externals);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
832	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  parent);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  parent);	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatement(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
833	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(root,  externs);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(root,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(root,  externs);	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatement(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
834	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(null,  externs);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(null,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(null,  externs);	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatement(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
835	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(converter,  externs,  root);  [CE]  illegal  start  of  expression  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(converter,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(converter,  externs,  root);	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatement(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
836	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [CE]  illegal  start  of  expression  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  externs);	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatement(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
837	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  internal);  [CE]  illegal  start  of  expression  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  internal);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  internal);	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatement(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
838	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  externals);  [CE]  illegal  start  of  expression  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  externals);	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatement(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
839	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  renamer);  [CE]  illegal  start  of  expression  [FE]                                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  renamer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  renamer);	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatement(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
840	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertNotNull)).traverse(root);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertNotNull)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertNotNull)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertNotNull)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	194	None	replace
841	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNotNull)).traverse(externs);  [CE]  illegal  start  of  expression  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNotNull)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNotNull)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertNotNull)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	194	None	replace
842	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNotNull)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNotNull)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNotNull)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertNotNull)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	194	None	replace
843	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNotNull)).traverse(externs,  root);  [CE]  illegal  start  of  expression  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNotNull)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNotNull)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertNotNull)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	194	None	replace
844	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  extern);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  extern);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  extern);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    extern);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
845	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  external);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  external);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  external);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    extern);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
846	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  extern);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  extern);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  extern);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    extern);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
847	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs,  extern);  [CE]  illegal  start  of  expression  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs,  extern);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs,  extern);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    extern);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
848	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  extern);  [CE]  illegal  start  of  expression  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  extern);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  extern);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    extern);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
849	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  extern);  [CE]  illegal  start  of  expression  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  extern);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  extern);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    extern);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
850	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);  compiler.traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);  compiler.traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root);    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	232	None	replace
851	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs);  compiler.traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs);  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs);  compiler.traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root);    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	232	None	replace
852	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs);  compiler.traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs);  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs);  compiler.traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root);    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	232	None	replace
853	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  root.traverse(externs);  [CE]  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  root.traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  root.traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)),.traverse(externs);    	non-compiled	[CE]  	323	None	replace
854	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  externs);  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)),.traverse(externs);    	non-compiled	[CE]  	323	None	replace
855	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root);  [CE]  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange,    forbidChanges)).traverse(root);    	non-compiled	[CE]  	294	None	replace
856	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  checkUserDeclarations,  forbidChanges)).traverse(root);  [CE]  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  checkUserDeclarations,  forbidChanges)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  checkUserDeclarations,  forbidChanges)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange,    forbidChanges)).traverse(root);    	non-compiled	[CE]  	294	None	replace
857	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root);  [CE]  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange,    forbidChanges)).traverse(root);    	non-compiled	[CE]  	294	None	replace
858	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  checkUserDeclarations)).traverse(externs);  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  checkUserDeclarations)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  checkUserDeclarations)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange,    forbidChanges)).traverse(root);    	non-compiled	[CE]  	294	None	replace
859	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  testUserDeclarations,  forbidChanges)).traverse(root);  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  testUserDeclarations,  forbidChanges)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  testUserDeclarations,  forbidChanges)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange,    forbidChanges)).traverse(root);    	non-compiled	[CE]  	294	None	replace
860	[BUG]  [BUGGY]  new  NormalizeStatement(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root);  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatement(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatement(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange,    forbidChanges)).traverse(root);    	non-compiled	[CE]  	294	None	replace
861	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  verifyOnChanges)).traverse(root);  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  verifyOnChanges)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  verifyOnChanges)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange,    forbidChanges)).traverse(root);    	non-compiled	[CE]  	294	None	replace
862	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  verifyOnChange,  forbidChanges)).traverse(root);  [CE]  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  verifyOnChange,  forbidChanges)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  verifyOnChange,  forbidChanges)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange,    forbidChanges)).traverse(root);    	non-compiled	[CE]  	294	None	replace
863	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  verifyOnChange,  forbidChanges)).traverse(externs);  [CE]  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  verifyOnChange,  forbidChanges)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  verifyOnChange,  forbidChanges)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange,    forbidChanges)).traverse(root);    	non-compiled	[CE]  	294	None	replace
864	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).trace(externs);  [CE]  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).trace(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).trace(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(externs);    	non-compiled	[CE]  	61	None	replace
865	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs);  [CE]  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(externs);    	non-compiled	[CE]  	61	None	replace
866	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  internal);  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  internal);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  internal);	  NodeTraversal.traverse(compiler,    root,    internal);    	non-compiled	[CE]  	83	None	replace
867	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  internal,  hasOkDuplicateDeclaration);  [CE]  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  internal,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  internal,  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    root,    internal);    	non-compiled	[CE]  	83	None	replace
868	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  internal);  [CE]  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  internal);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externals,  internal);	  NodeTraversal.traverse(compiler,    root,    internal);    	non-compiled	[CE]  	83	None	replace
869	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  internal);  [CE]  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externes,  internal);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externes,  internal);	  NodeTraversal.traverse(compiler,    root,    internal);    	non-compiled	[CE]  	83	None	replace
870	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  interns,  root);  [CE]  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  interns,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  interns,  root);	  NodeTraversal.traverse(compiler,    root,    internal);    	non-compiled	[CE]  	83	None	replace
871	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externals)).traverseRoots(externs,  externs);  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externals)).traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externals)).traverseRoots(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange,    externals)).traverseRoots(externs,    root);    	non-compiled	[CE]  	130	None	replace
872	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externals)).traverseRoots(externs,  root);  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externals)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externals)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange,    externals)).traverseRoots(externs,    root);    	non-compiled	[CE]  	130	None	replace
873	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  internals)).traverseRoots(externs,  root);  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  internals)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  internals)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange,    externals)).traverseRoots(externs,    root);    	non-compiled	[CE]  	130	None	replace
874	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externs)).traverseRoots(externs,  externals);  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externs)).traverseRoots(externs,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externs)).traverseRoots(externs,  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange,    externals)).traverseRoots(externs,    root);    	non-compiled	[CE]  	130	None	replace
875	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externals)).traverseRoots(externs,  parent);  [CE]  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externals)).traverseRoots(externs,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externals)).traverseRoots(externs,  parent);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange,    externals)).traverseRoots(externs,    root);    	non-compiled	[CE]  	130	None	replace
876	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externals)).traverseRoots(externs,  internals);  [CE]  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externals)).traverseRoots(externs,  internals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externals)).traverseRoots(externs,  internals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange,    externals)).traverseRoots(externs,    root);    	non-compiled	[CE]  	130	None	replace
877	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseNode(compiler,    root,    externs);    	non-compiled	[CE]  	55	None	replace
878	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  externs,  hasOkDuplicateDeclaration);  [CE]  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  externs,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  root,  externs,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNode(compiler,    root,    externs);    	non-compiled	[CE]  	55	None	replace
879	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  externals,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  externals,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  root,  externals,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseNode(compiler,    root,    externs);    	non-compiled	[CE]  	55	None	replace
880	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  externals,  hasOkDuplicateDeclaration);  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  externals,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  root,  externals,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNode(compiler,    root,    externs);    	non-compiled	[CE]  	55	None	replace
881	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  assertOnChange);  [CE]  not  a  statement  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  root,  assertOnChange);	  NodeTraversal.traverseNode(compiler,    root,    externs);    	non-compiled	[CE]  not  a  statement	55	None	replace
882	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  hasOkDuplicateDeclaration);  [CE]  not  a  statement  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  root,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNode(compiler,    root,    externs);    	non-compiled	[CE]  not  a  statement	55	None	replace
883	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  internals);  [CE]  not  a  statement  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  internals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  root,  internals);	  NodeTraversal.traverseNode(compiler,    root,    externs);    	non-compiled	[CE]  not  a  statement	55	None	replace
884	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  externals,  parent);  [CE]  not  a  statement  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  externals,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  root,  externals,  parent);	  NodeTraversal.traverseNode(compiler,    root,    externs);    	non-compiled	[CE]  not  a  statement	55	None	replace
885	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange),  externs.traverse(root);  [CE]  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange),  externs.traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange),  externs.traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations),    externs.traverse(root);    	non-compiled	[CE]  	75	None	replace
886	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  assertOnChange,  externs.traverse(root);  [CE]  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  assertOnChange,  externs.traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  assertOnChange,  externs.traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations),    externs.traverse(root);    	non-compiled	[CE]  	75	None	replace
887	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange,  externs.traverse(root));  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange,  externs.traverse(root));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange,  externs.traverse(root));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations),    externs.traverse(root);    	non-compiled	[CE]  	75	None	replace
888	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange,  externs.traverse(root);  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange,  externs.traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange,  externs.traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations),    externs.traverse(root);    	non-compiled	[CE]  	75	None	replace
889	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  externs.traverse(root);  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  externs.traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  externs.traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations),    externs.traverse(root);    	non-compiled	[CE]  	75	None	replace
890	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(root);  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    t.traverseRoots(externs);    	non-compiled	[CE]  	324	None	replace
891	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  t.traverseRoots(externs);  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  t.traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  t.traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    t.traverseRoots(externs);    	non-compiled	[CE]  	324	None	replace
892	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root,  t.traverseRoots(externs);  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root,  t.traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root,  t.traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    t.traverseRoots(externs);    	non-compiled	[CE]  	324	None	replace
893	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(externs,  parent);  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(externs,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(externs,  parent);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    t.traverseRoots(externs);    	non-compiled	[CE]  	324	None	replace
894	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  findOnChange)).traverseRoots(externs,  root);  [CE]  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  findOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  findOnChange)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    findOnChange)).traverse(root);    	non-compiled	[CE]  	100	None	replace
895	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  findOnChange)).traverse(externs);  [CE]  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  findOnChange)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  findOnChange)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    findOnChange)).traverse(root);    	non-compiled	[CE]  	100	None	replace
896	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  findOnChange)).traverse(externs,  root);  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  findOnChange)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  findOnChange)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    findOnChange)).traverse(root);    	non-compiled	[CE]  	100	None	replace
897	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  findOnChange)).traverse(externs);  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  findOnChange)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  findOnChange)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    findOnChange)).traverse(root);    	non-compiled	[CE]  	100	None	replace
898	[BUG]  [BUGGY]  if(findOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  findOnChange)).traverse(root);  }  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(findOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  findOnChange)).traverse(root);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(findOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  findOnChange)).traverse(root);  }	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    findOnChange)).traverse(root);    	non-compiled	[CE]  	100	None	replace
899	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  findOnChange)).traverse(root);  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  findOnChange)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  findOnChange)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    findOnChange)).traverse(root);    	non-compiled	[CE]  	100	None	replace
900	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  forbidChanges);  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  forbidChanges);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root,    forbidChanges);    	non-compiled	[CE]  	132	None	replace
901	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  assertOnChange);  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  assertOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root,    forbidChanges);    	non-compiled	[CE]  	132	None	replace
902	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs));  compiler.traverseRoots(externs,  root);  [CE]  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs));  compiler.traverseRoots(externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  	47	None	replace
903	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  compiler.traverseRoots(externs,  root);  [CE]  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  compiler.traverseRoots(externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  	47	None	replace
904	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root));  compiler.traverseRoots(externs,  root);  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root));  compiler.traverseRoots(externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  	47	None	replace
905	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals));  compiler.traverseRoots(externs,  root);  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals));  compiler.traverseRoots(externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  	47	None	replace
906	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false));  compiler.traverseRoots(externs,  root);  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false));  compiler.traverseRoots(externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  	47	None	replace
907	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);  compiler.traverseRoots(externs,  root);  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);  compiler.traverseRoots(externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  	47	None	replace
908	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  internal));  compiler.traverseRoots(externs,  root);  [CE]  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  internal));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  internal));  compiler.traverseRoots(externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  	47	None	replace
909	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(root,  externs);  [CE]  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(root,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(root,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(root,    externs);    	non-compiled	[CE]  	121	None	replace
910	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  root);  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(root,    externs);    	non-compiled	[CE]  	121	None	replace
911	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traceRoots(externs,  root);  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traceRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traceRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(root,    externs);    	non-compiled	[CE]  	121	None	replace
912	[BUG]  [BUGGY]  nodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  nodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	nodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(root,    externs);    	non-compiled	[CE]  	121	None	replace
913	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  constantMap.traverse(root);  [CE]  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  constantMap.traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  constantMap.traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    constantMap.traverse(root);    	non-compiled	[CE]  	301	None	replace
914	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverse(externs);  [CE]  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    constantMap.traverse(root);    	non-compiled	[CE]  	301	None	replace
915	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations).traverse(root);  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    constantMap.traverse(root);    	non-compiled	[CE]  	301	None	replace
916	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).trace(externs,  assertOnChange);  [CE]  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).trace(externs,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).trace(externs,  assertOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(externs,    externs);    	non-compiled	[CE]  	85	None	replace
917	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).path(externs,  root);  [CE]  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).path(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).path(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(externs,    externs);    	non-compiled	[CE]  	85	None	replace
918	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  Externs);  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  Externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  Externs);	  NodeTraversal.traverseRoots(compiler,    externs,    Root);    	non-compiled	[CE]  	310	None	replace
919	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  root.cloneTree());  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  root.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  root.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  	218	None	replace
920	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externals.cloneTree());  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externals.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externals.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  	218	None	replace
921	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  root.cloneTree());  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  root.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  root.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  	218	None	replace
922	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  parent.cloneTree());  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  parent.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  parent.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  	218	None	replace
923	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  checkUserDeclarations.cloneTree());  [CE]  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  checkUserDeclarations.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  checkUserDeclarations.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  	218	None	replace
924	[BUG]  [BUGGY]  nodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [CE]  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  nodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	nodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);	  new    NodeTraversal(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  	70	None	replace
925	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);	  new    NodeTraversal(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  	70	None	replace
926	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [CE]  <identifier>  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  final  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	final  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);	  new    NodeTraversal(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
927	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);	  new    NodeTraversal(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  	70	None	replace
928	[BUG]  [BUGGY]  NewNodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NewNodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NewNodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);	  new    NodeTraversal(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  	70	None	replace
929	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs,  root);  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs,  root);	  NodeTraversal    <    Node>    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  	50	None	replace
930	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  parent);  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  parent);	  NodeTraversal    <    Node>    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  	50	None	replace
931	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations));  compiler.traverseRoots(externs,  root);  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations));  compiler.traverseRoots(externs,  root);	  NodeTraversal    <    Node>    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  	50	None	replace
932	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  forbidChanges);  [CE]  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  forbidChanges);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  	36	None	replace
933	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals);  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  not  a  statement	36	None	replace
934	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  root);  [CE]  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  	252	None	replace
935	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs);  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	252	None	replace
936	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals)).traverseRoots(externs,  root);  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	252	None	replace
937	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externals);  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	252	None	replace
938	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  interns);  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  interns);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  interns);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	252	None	replace
939	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  parent);  [CE]  not  a  statement  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  parent);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	252	None	replace
940	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs);  [CE]  not  a  statement  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	252	None	replace
941	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs,  forbidChanges);  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs,  forbidChanges);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    forbidChanges);    	non-compiled	[CE]  not  a  statement	282	None	replace
942	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  forbidChanges);  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  forbidChanges);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    forbidChanges);    	non-compiled	[CE]  not  a  statement	282	None	replace
943	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs,  forbidChanges);  [CE]  class,  interface,  or  enum  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs,  forbidChanges);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    forbidChanges);    	non-compiled	[CE]  class,  interface,  or  enum  expected	282	None	replace
944	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    forbidChanges);    	non-compiled	[CE]  not  a  statement	282	None	replace
945	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter,  externs,  forbidChanges);  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter,  externs,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter,  externs,  forbidChanges);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    forbidChanges);    	non-compiled	[CE]  not  a  statement	282	None	replace
946	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    forbidChanges);    	non-compiled	[CE]  not  a  statement	282	None	replace
947	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverse(root);  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverse(root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externals)).traverse(root);    	non-compiled	[CE]  not  a  statement	29	None	replace
948	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverse(externs);  [CE]  not  a  statement  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverse(externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverse(externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externals)).traverse(root);    	non-compiled	[CE]  not  a  statement	29	None	replace
949	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverse(root);  [CE]  not  a  statement  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverse(root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externals)).traverse(root);    	non-compiled	[CE]  not  a  statement	29	None	replace
950	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  internal)).traverse(root);  [CE]  not  a  statement  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  internal)).traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  internal)).traverse(root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externals)).traverse(root);    	non-compiled	[CE]  not  a  statement	29	None	replace
951	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  internals)).traverse(root);  [CE]  not  a  statement  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  internals)).traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  internals)).traverse(root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externals)).traverse(root);    	non-compiled	[CE]  not  a  statement	29	None	replace
952	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  true)).traverse(root);  [CE]  not  a  statement  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  true)).traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  true)).traverse(root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externals)).traverse(root);    	non-compiled	[CE]  not  a  statement	29	None	replace
953	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler.traverseRoots(externs,  root));  [CE]  not  a  statement  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler.traverseRoots(externs,  root));  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler.traverseRoots(externs,  root));	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	32	None	replace
954	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler.traverseRoots(externs,  externs);  [CE]  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler.traverseRoots(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler.traverseRoots(externs,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  	32	None	replace
955	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler.traverseRoots(externs,  parent);  [CE]  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler.traverseRoots(externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler.traverseRoots(externs,  parent);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  	32	None	replace
956	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler.traverseRoots(externs,  root);  [CE]  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler.traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  	32	None	replace
957	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler.traverseRoots(externs,  externals);  [CE]  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler.traverseRoots(externs,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler.traverseRoots(externs,  externals);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  	32	None	replace
958	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root.traverseRoots(externs,  root);  [CE]  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root.traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  	32	None	replace
959	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  onChange)).traverse(root);  [CE]  class,  interface,  or  enum  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  onChange)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  onChange)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    onChange)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	297	None	replace
960	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclaration)).traverse(root);  [CE]  class,  interface,  or  enum  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclaration)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclaration)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    onChange)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	297	None	replace
961	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals)).traverse(root);  [CE]  class,  interface,  or  enum  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    onChange)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	297	None	replace
962	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkOkDuplicateDeclaration)).traverse(root);  [CE]  class,  interface,  or  enum  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkOkDuplicateDeclaration)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkOkDuplicateDeclaration)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    onChange)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	297	None	replace
963	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).traverse(externs);  [CE]  class,  interface,  or  enum  expected  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    onChange)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	297	None	replace
964	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertFalse)).traverseRoots(externs);  [CE]  class,  interface,  or  enum  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertFalse)).traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertFalse)).traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertFalse)).traverse(externs);    	non-compiled	[CE]  class,  interface,  or  enum  expected	210	None	replace
965	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertFalse)).traverse(root);  [CE]  class,  interface,  or  enum  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertFalse)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertFalse)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertFalse)).traverse(externs);    	non-compiled	[CE]  class,  interface,  or  enum  expected	210	None	replace
966	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertTrue)).traverse(root);  [CE]  class,  interface,  or  enum  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertTrue)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertTrue)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertFalse)).traverse(externs);    	non-compiled	[CE]  class,  interface,  or  enum  expected	210	None	replace
967	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNull)).traverse(externs);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNull)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNull)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertFalse)).traverse(externs);    	non-compiled	[CE]  illegal  start  of  expression	210	None	replace
968	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs)).traverseRoots(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externs)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
969	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  assertOnChange)).traverse(root);  [CE]  class,  interface,  or  enum  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  assertOnChange)).traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  assertOnChange)).traverse(root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externs)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
970	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverseRoots(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externs)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
971	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverse(externs);  [CE]  class,  interface,  or  enum  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverse(externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverse(externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externs)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
972	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  assertOnChange)).traverse(externs);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  assertOnChange)).traverse(externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  assertOnChange)).traverse(externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externs)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
973	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs,  checkUserDeclarations)).traverse(root);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs,  checkUserDeclarations)).traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs,  checkUserDeclarations)).traverse(root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externs)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
974	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals)).traverse(externs,  root);  [CE]  illegal  start  of  expression  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals)).traverse(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals)).traverse(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externs)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
975	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  checkUserDeclarations);	  NodeTraversal.traverseNode(compiler,    externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
976	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  verifyOnChange);  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  verifyOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  verifyOnChange);	  NodeTraversal.traverseNode(compiler,    externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
977	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  checkUserDeclaration);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  checkUserDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  checkUserDeclaration);	  NodeTraversal.traverseNode(compiler,    externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
978	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  validateDeclaration);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  validateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  validateDeclaration);	  NodeTraversal.traverseNode(compiler,    externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
979	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  verifyUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  verifyUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  verifyUserDeclarations);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
980	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  checkUserDeclarations);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
981	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations,  forbidChanges);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations,  forbidChanges);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
982	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverse(externs,  root);  [CE]  ')'  expected  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externals.traverse(root);    	non-compiled	[CE]  ')'  expected	116	None	replace
983	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  externals.traverse(root);  [CE]  ')'  expected  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  externals.traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  externals.traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externals.traverse(root);    	non-compiled	[CE]  ')'  expected	116	None	replace
984	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  forbidChanges)).traverse(root);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  forbidChanges)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  forbidChanges)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
985	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  testUserDeclarations,  forbidChanges)).traverse(root);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  testUserDeclarations,  forbidChanges)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  testUserDeclarations,  forbidChanges)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
986	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  forbidChanges)).traverse(externs);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  forbidChanges)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  forbidChanges)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
987	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  forbidChanges)).traverse(root);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  forbidChanges)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  forbidChanges)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
988	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  forbidChanges)).traverse(externs,  root);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  forbidChanges)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  forbidChanges)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
989	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
990	[BUG]  [BUGGY]  NodeTraversal  <  Node>  comp  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  comp  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  comp  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);	  NodeTraversal    comp    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
991	[BUG]  [BUGGY]  NodeTraversal  comp  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  comp  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  comp  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	  NodeTraversal    comp    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
992	[BUG]  [BUGGY]  NodeTraversal  comp  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  comp  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  comp  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);	  NodeTraversal    comp    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
993	[BUG]  [BUGGY]  NodeTraversal  component  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  component  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  component  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);	  NodeTraversal    comp    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
994	[BUG]  [BUGGY]  NodeTraversal  composite  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  composite  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  composite  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);	  NodeTraversal    comp    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
995	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  renamer);	  NodeTraversal.traverseRoots(compiler,    root,    renamer);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
996	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externs,  renamer);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externs,  renamer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  externs,  renamer);	  NodeTraversal.traverseRoots(compiler,    root,    renamer);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
997	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externals,  renamer);  [CE]  illegal  start  of  expression  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externals,  renamer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  externals,  renamer);	  NodeTraversal.traverseRoots(compiler,    root,    renamer);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
998	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  renamer,  externs);  [CE]  illegal  start  of  expression  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  renamer,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  renamer,  externs);	  NodeTraversal.traverseRoots(compiler,    root,    renamer);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
999	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  renamer);  [CE]  illegal  start  of  expression  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  renamer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externes,  renamer);	  NodeTraversal.traverseRoots(compiler,    root,    renamer);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
1000	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse();  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse();  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse();	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverse();    	non-compiled	[CE]  illegal  start  of  expression	296	None	replace
1001	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  forbidChanges)).traverse();  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  forbidChanges)).traverse();  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  forbidChanges)).traverse();	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverse();    	non-compiled	[CE]  illegal  start  of  expression	296	None	replace
1002	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse();  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse();  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse();	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverse();    	non-compiled	[CE]  illegal  start  of  expression	296	None	replace
1003	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  testUserDeclarations,  forbidChanges)).traverse();  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  testUserDeclarations,  forbidChanges)).traverse();  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  testUserDeclarations,  forbidChanges)).traverse();	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverse();    	non-compiled	[CE]  illegal  start  of  expression	296	None	replace
1004	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  forbidChanges)).traverse();  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  forbidChanges)).traverse();  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  forbidChanges)).traverse();	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverse();    	non-compiled	[CE]  illegal  start  of  expression	296	None	replace
1005	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).straverse();  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).straverse();  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).straverse();	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverse();    	non-compiled	[CE]  illegal  start  of  expression	296	None	replace
1006	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).trace();  [CE]  illegal  start  of  expression  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).trace();  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).trace();	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverse();    	non-compiled	[CE]  illegal  start  of  expression	296	None	replace
1007	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverse();  [CE]  illegal  start  of  expression  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverse();  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverse();	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverse();    	non-compiled	[CE]  illegal  start  of  expression	296	None	replace
1008	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverse();  [CE]  illegal  start  of  expression  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverse();  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverse();	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverse();    	non-compiled	[CE]  illegal  start  of  expression	296	None	replace
1009	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [CE]  <identifier>  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  final  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	final  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertNoChange)).traverse(root);    	non-compiled	[CE]  <identifier>  expected	190	None	replace
1010	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals)).traverseRoots(externs,  externs);  [CE]  illegal  start  of  expression  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals)).traverseRoots(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals)).traverseRoots(externs,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externals)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
1011	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internals)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internals)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internals)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externals)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
1012	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externals)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
1013	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals)).traverseRoots(externs,  externs,  root);  [CE]  illegal  start  of  expression  [FE]                                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals)).traverseRoots(externs,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals)).traverseRoots(externs,  externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externals)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
1014	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  this);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  this);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  this);	  NodeTraversal.traverseRoots(compiler,    root,    this);    	non-compiled	[CE]  illegal  start  of  expression	311	None	replace
1015	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  this);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  this);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externals,  this);	  NodeTraversal.traverseRoots(compiler,    root,    this);    	non-compiled	[CE]  illegal  start  of  expression	311	None	replace
1016	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this,  externs);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  this,  externs);	  NodeTraversal.traverseRoots(compiler,    root,    this);    	non-compiled	[CE]  illegal  start  of  expression	311	None	replace
1017	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  null);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  null);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  null);	  NodeTraversal.traverseRoots(compiler,    root,    this);    	non-compiled	[CE]  illegal  start  of  expression	311	None	replace
1018	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  this);  [CE]  illegal  start  of  expression  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  this);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externes,  this);	  NodeTraversal.traverseRoots(compiler,    root,    this);    	non-compiled	[CE]  illegal  start  of  expression	311	None	replace
1019	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this,  constantMap);  [CE]  illegal  start  of  expression  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this,  constantMap);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  this,  constantMap);	  NodeTraversal.traverseRoots(compiler,    root,    this);    	non-compiled	[CE]  illegal  start  of  expression	311	None	replace
1020	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this,  externals);  [CE]  illegal  start  of  expression  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  this,  externals);	  NodeTraversal.traverseRoots(compiler,    root,    this);    	non-compiled	[CE]  illegal  start  of  expression	311	None	replace
1021	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
1022	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
1023	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
1024	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
1025	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
1026	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
1027	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root);  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root);	  NodeTraversal.traverse(compiler,    externals,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
1028	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externals);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externals);	  NodeTraversal.traverse(compiler,    externals,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
1029	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  root);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  root);	  NodeTraversal.traverse(compiler,    externals,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
1030	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  root);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  root);	  NodeTraversal.traverse(compiler,    externals,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
1031	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(last,  root);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(last,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(last,  root);	  NodeTraversal.traverse(compiler,    externals,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
1032	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  new  NormalizeStatements());  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  new  NormalizeStatements());	  NodeTraversal.traverseConstants(compiler,    externs,    root,    t);    	non-compiled	[CE]  illegal  start  of  expression	188	None	replace
1033	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  hasOkDuplicateDeclaration,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  hasOkDuplicateDeclaration,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  hasOkDuplicateDeclaration,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
1034	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  hasOkDuplicateDeclaration,  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  hasOkDuplicateDeclaration,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  hasOkDuplicateDeclaration,  checkUserDeclarations);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
1035	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  validateDeclaration);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  validateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  validateDeclaration);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
1036	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverse(externs);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverse(externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverse(externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root).traverse(externs);    	non-compiled	[CE]  illegal  start  of  expression	274	None	replace
1037	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals).traverse(externs);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals).traverse(externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals).traverse(externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root).traverse(externs);    	non-compiled	[CE]  illegal  start  of  expression	274	None	replace
1038	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverse(root);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverse(root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root).traverse(externs);    	non-compiled	[CE]  illegal  start  of  expression	274	None	replace
1039	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root).traverse(externs);    	non-compiled	[CE]  illegal  start  of  expression	274	None	replace
1040	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  internal).traverse(externs);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  internal).traverse(externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  internal).traverse(externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root).traverse(externs);    	non-compiled	[CE]  illegal  start  of  expression	274	None	replace
1041	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals).traverse(root);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals).traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals).traverse(root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root).traverse(externs);    	non-compiled	[CE]  illegal  start  of  expression	274	None	replace
1042	[BUG]  [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  compiler.traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  compiler.traverseRoots(externs,  root);	  NodeTraversal[]    t    =    new    NodeTraversal(    compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	286	None	replace
1043	[BUG]  [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations));  compiler.traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations));  compiler.traverseRoots(externs,  root);	  NodeTraversal[]    t    =    new    NodeTraversal(    compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	286	None	replace
1044	[BUG]  [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs);  compiler.traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs);  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs);  compiler.traverseRoots(externs,  root);	  NodeTraversal[]    t    =    new    NodeTraversal(    compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	286	None	replace
1045	[BUG]  [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);	  NodeTraversal[]    t    =    new    NodeTraversal(    compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	286	None	replace
1046	[BUG]  [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	  NodeTraversal[]    t    =    new    NodeTraversal(    compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	286	None	replace
1047	[BUG]  [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);  compiler.traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);  compiler.traverseRoots(externs,  root);	  NodeTraversal[]    t    =    new    NodeTraversal(    compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	286	None	replace
1048	[BUG]  [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);	  NodeTraversal[]    t    =    new    NodeTraversal(    compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	286	None	replace
1049	[BUG]  [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  parent);  [CE]  illegal  start  of  expression  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  parent);	  NodeTraversal[]    t    =    new    NodeTraversal(    compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	286	None	replace
1050	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).trace(root,  externs);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).trace(root,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).trace(root,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(root,    externs);    	non-compiled	[CE]  illegal  start  of  expression	221	None	replace
1051	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).trace(root,  externs);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).trace(root,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).trace(root,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(root,    externs);    	non-compiled	[CE]  illegal  start  of  expression	221	None	replace
1052	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs,  root);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(root,    externs);    	non-compiled	[CE]  illegal  start  of  expression	221	None	replace
1053	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(root);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
1054	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(root);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(root);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
1055	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root.plot(externs);  [CE]  ')'  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root.plot(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root.plot(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(root);    	non-compiled	[CE]  ')'  expected	63	None	replace
1056	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler.plot(externs);  [CE]  ')'  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler.plot(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler.plot(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(root);    	non-compiled	[CE]  ')'  expected	63	None	replace
1057	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler).plot(externs);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler).plot(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler).plot(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(root);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
1058	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBEEN_LOCAL_NAMES_UNIQUE)).traverse(externs);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBEEN_LOCAL_NAMES_UNIQUE)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBEEN_LOCAL_NAMES_UNIQUE)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    FORBEEN_LOCAL_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	295	None	replace
1059	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBEEN_LOCAL_NAMES_UNIQUE)).traverse(externs,  root);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBEEN_LOCAL_NAMES_UNIQUE)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBEEN_LOCAL_NAMES_UNIQUE)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    FORBEEN_LOCAL_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	295	None	replace
1060	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(externs);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    FORBEEN_LOCAL_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	295	None	replace
1061	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(externs,  root);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    FORBEEN_LOCAL_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	295	None	replace
1062	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),.traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),.traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),.traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	243	None	replace
1063	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),.traverseRoots(externs,  externs);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),.traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),.traverseRoots(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	243	None	replace
1064	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),.traverseRoots(externs,  root));  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),.traverseRoots(externs,  root));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),.traverseRoots(externs,  root));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	243	None	replace
1065	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  externs);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).straverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	213	None	replace
1066	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  parent);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  parent);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).straverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	213	None	replace
1067	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  forbidChanges);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  forbidChanges);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
1068	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  checkUserDeclarations,  forbidChanges);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  checkUserDeclarations,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  checkUserDeclarations,  forbidChanges);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
1069	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  checkUserDeclarations,  forbidChanges);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  checkUserDeclarations,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  checkUserDeclarations,  forbidChanges);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
1070	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  checkUserDeclarations,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  checkUserDeclarations,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  checkUserDeclarations,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
1071	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  verifyUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  verifyUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  verifyUserDeclarations);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
1072	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root);    	non-compiled	[CE]  illegal  start  of  expression	275	None	replace
1073	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  root);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root);    	non-compiled	[CE]  illegal  start  of  expression	275	None	replace
1074	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root);    	non-compiled	[CE]  illegal  start  of  expression	275	None	replace
1075	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  root);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root);    	non-compiled	[CE]  illegal  start  of  expression	275	None	replace
1076	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  externs);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externes);    	non-compiled	[CE]  illegal  start  of  expression	268	None	replace
1077	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  externes);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  externes);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  externes);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externes);    	non-compiled	[CE]  illegal  start  of  expression	268	None	replace
1078	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  externals);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externes);    	non-compiled	[CE]  illegal  start  of  expression	268	None	replace
1079	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).plot(externs,  externs);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).plot(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).plot(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externes);    	non-compiled	[CE]  illegal  start  of  expression	268	None	replace
1080	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  this,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  this,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  this,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNode(compiler,    externs,    root,    this);    	non-compiled	[CE]  illegal  start  of  expression	207	None	replace
1081	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverse(externs,  externs);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverse(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverse(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).straverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	223	None	replace
1082	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverse(externs,  root);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).straverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	223	None	replace
1083	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).straverse(externs,  root);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).straverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).straverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).straverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	223	None	replace
1084	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externs.cloneTree())).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externs.cloneTree())).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externs.cloneTree())).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
1085	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  parent)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  parent)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  parent)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
1086	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externes)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externes)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externes)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
1087	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  parent);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  parent);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    parent);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
1088	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs,  parent);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs,  parent);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    parent);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
1089	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(parent,  externs);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(parent,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(parent,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    parent);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
1090	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverse(externs,  parent);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverse(externs,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverse(externs,  parent);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    parent);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
1091	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  parent);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  parent);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    parent);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
1092	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  checkUserDeclarations);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root,    externs);    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
1093	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  internals);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  internals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  internals);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root,    externs);    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
1094	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  root);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root,    externs);    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
1095	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverse(externs,  assertOnChange);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverse(externs,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverse(externs,  assertOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
1096	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverse(externs,  externs);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverse(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverse(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
1097	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  parent,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  parent,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  parent,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    parent);    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
1098	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  node);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  node);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  node);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    parent);    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
1099	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
1100	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs,  root);  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs,  root);	  new    NodeTraversal(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
1101	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs);	  new    NodeTraversal(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
1102	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(converter,  root);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(converter,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(converter,  root);	  new    NodeTraversal(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
1103	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
1104	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);	  NodeTraversal.traverse(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
1105	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);	  NodeTraversal.traverse(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
1106	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  NodeTraversal.traverse(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
1107	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  NodeTraversal.traverse(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
1108	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals);  compiler.traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals);  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals);  compiler.traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs);    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	233	None	replace
1109	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  internal);  compiler.traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  internal);  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  internal);  compiler.traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs);    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	233	None	replace
1110	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(root,  externs);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(root,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(root,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(root,    externs);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
1111	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(root,  externals);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(root,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(root,  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(root,    externs);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
1112	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(root,    externs);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
1113	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(root,  root);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(root,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(root,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(root,    externs);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
1114	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(root,    externs);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
1115	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).plot(externs,  root);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).plot(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).plot(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(root,    externs);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
1116	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(root,    externs);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
1117	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).plot(externs,  externs);  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).plot(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).plot(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
1118	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).plot(externs,  assertOnChange);  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).plot(externs,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).plot(externs,  assertOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
1119	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  assertOnChange);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  assertOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
1120	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).plot(externs,  assertOnChange);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).plot(externs,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).plot(externs,  assertOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
1121	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  externals);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  externals);	  NodeTraversal.traverseRoots(compiler,    root,    externals);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
1122	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externals,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externals,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  externals,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(compiler,    root,    externals);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
1123	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  compiler);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  compiler);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(externs,  root,  compiler);	  NodeTraversal.traverseRoots(compiler,    root,    externals);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
1124	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externals,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  illegal  start  of  expression  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externals,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  externals,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseRoots(compiler,    root,    externals);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
1125	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  internals);  [CE]  illegal  start  of  expression  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  internals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  internals);	  NodeTraversal.traverseRoots(compiler,    root,    externals);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
1126	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs,  root,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs,  root,  hasOkDuplicateDeclaration);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	236	None	replace
1127	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  checkUserDeclarations);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	236	None	replace
1128	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs,  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs,  hasOkDuplicateDeclaration);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	236	None	replace
1129	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs,  hasOkDuplicateDeclaration);  [CE]  ';'  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs,  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs,  hasOkDuplicateDeclaration);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  ';'  expected	236	None	replace
1130	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs,  root,  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs,  root,  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs,  root,  checkUserDeclarations);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	236	None	replace
1131	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  hasOkDuplicateDeclaration);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	236	None	replace
1132	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  checkUserDeclaration);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  checkUserDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  checkUserDeclaration);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	236	None	replace
1133	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  checkUserDeclarations);  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  checkUserDeclarations);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  ';'  expected	316	None	replace
1134	[BUG]  [BUGGY]  new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  ';'  expected	316	None	replace
1135	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  verifyUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  verifyUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  verifyUserDeclarations);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  illegal  start  of  expression	316	None	replace
1136	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  forbidChanges);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  forbidChanges);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  illegal  start  of  expression	316	None	replace
1137	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  MATCH_BLOCK_VAR_ERROR);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  MATCH_BLOCK_VAR_ERROR);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  MATCH_BLOCK_VAR_ERROR);	  NodeTraversal.traverseNode(compiler,    externs,    root,    renamer);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
1138	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  parent);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  parent);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    parent);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
1139	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent,  hasOkDuplicateDeclaration);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    parent);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
1140	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	180	None	replace
1141	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs,  root);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	180	None	replace
1142	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externals);  [CE]  illegal  start  of  expression  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externals);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	180	None	replace
1143	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations,  forbidChanges);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations,  forbidChanges);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    forbidChanges);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
1144	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges,  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges,  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges,  checkUserDeclarations);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    forbidChanges);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
1145	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges,  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges,  hasOkDuplicateDeclaration);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    forbidChanges);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
1146	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).traverseRoots(externs,  root,  forbidChanges);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).traverseRoots(externs,  root,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).traverseRoots(externs,  root,  forbidChanges);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    forbidChanges);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
1147	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
1148	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverseRoots(externs,  externs);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverseRoots(externs,  externs);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
1149	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  internal)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  internal)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  internal)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
1150	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
1151	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChange)).traverseRoots(externs,  externs);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChange)).traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChange)).traverseRoots(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertNoChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	253	None	replace
1152	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertNoChange)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertNoChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertNoChange)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertNoChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	253	None	replace
1153	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChange)).traverseRoots(externs,  externs,  root);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChange)).traverseRoots(externs,  externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChange)).traverseRoots(externs,  externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertNoChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	253	None	replace
1154	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNotChange)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNotChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNotChange)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertNoChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	253	None	replace
1155	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkForbidChanges.traverse(root);  [CE]  ')'  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkForbidChanges.traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkForbidChanges.traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    checkUserDeclarations.traverse(root);    	non-compiled	[CE]  ')'  expected	303	None	replace
1156	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkConstants.traverse(root);  [CE]  ')'  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkConstants.traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkConstants.traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    checkUserDeclarations.traverse(root);    	non-compiled	[CE]  ')'  expected	303	None	replace
1157	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations);  [CE]  <identifier>  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    checkUserDeclarations.traverse(root);    	non-compiled	[CE]  <identifier>  expected	303	None	replace
1158	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverse(externs);    	non-compiled	[CE]  illegal  start  of  expression	257	None	replace
1159	[BUG]  [BUGGY]  if(verifyOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverse(externs);  }  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(verifyOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverse(externs);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(verifyOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverse(externs);  }	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverse(externs);    	non-compiled	[CE]  illegal  start  of  expression	257	None	replace
1160	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverse(externs,  root);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverse(externs);    	non-compiled	[CE]  illegal  start  of  expression	257	None	replace
1161	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverse(root);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverse(externs);    	non-compiled	[CE]  illegal  start  of  expression	257	None	replace
1162	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverse(externs);  [CE]  <identifier>  expected  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverse(externs);    	non-compiled	[CE]  <identifier>  expected	257	None	replace
1163	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  [CE]  <identifier>  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  this);	  NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  <identifier>  expected	250	None	replace
1164	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  [CE]  <identifier>  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  null);	  NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  <identifier>  expected	250	None	replace
1165	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  hasOkDuplicateDeclaration);  [CE]  <identifier>  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  this,  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  <identifier>  expected	250	None	replace
1166	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  externs);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  this,  externs);	  NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  illegal  start  of  type	250	None	replace
1167	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  this);  [CE]  <identifier>  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  this);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externals,  this);	  NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  <identifier>  expected	250	None	replace
1168	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [CE]  <identifier>  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);	  new    NodeTraversal(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externs);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
1169	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [CE]  <identifier>  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);	  new    NodeTraversal(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externs);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
1170	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  checkUserDeclarations);  [CE]  <identifier>  expected  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  checkUserDeclarations);	  new    NodeTraversal(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externs);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
1171	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externs);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
1172	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  <identifier>  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(externs,    externs,    root);    	non-compiled	[CE]  <identifier>  expected	320	None	replace
1173	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  <identifier>  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(externs,    externs,    root);    	non-compiled	[CE]  <identifier>  expected	320	None	replace
1174	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs,  root,  checkUserDeclarations);  [CE]  <identifier>  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs,  root,  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs,  root,  checkUserDeclarations);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(externs,    externs,    root);    	non-compiled	[CE]  <identifier>  expected	320	None	replace
1175	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  assertOnChange);  [CE]  <identifier>  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  root,  assertOnChange);	  NodeTraversal.traverseNodes(compiler,    root,    externs);    	non-compiled	[CE]  <identifier>  expected	155	None	replace
1176	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  checkUserDeclarations);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  root,  checkUserDeclarations);	  NodeTraversal.traverseNodes(compiler,    root,    externs);    	non-compiled	[CE]  illegal  start  of  type	155	None	replace
1177	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  externals,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  externals,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  root,  externals,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseNodes(compiler,    root,    externs);    	non-compiled	[CE]  illegal  start  of  type	155	None	replace
1178	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  externals,  hasOkDuplicateDeclaration);  [CE]  <identifier>  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  externals,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  root,  externals,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNodes(compiler,    root,    externs);    	non-compiled	[CE]  <identifier>  expected	155	None	replace
1179	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externals,  root);  [CE]  <identifier>  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externals,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externals,  root);	  NodeTraversal.traverseNodes(compiler,    root,    externs);    	non-compiled	[CE]  <identifier>  expected	155	None	replace
1180	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    false)).traverse(root);    	non-compiled	[CE]  <identifier>  expected	165	None	replace
1181	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  true)).traverse(externs);  [CE]  illegal  start  of  type  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  true)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  true)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    false)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
1182	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverse(externs);  [CE]  <identifier>  expected  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    false)).traverse(root);    	non-compiled	[CE]  <identifier>  expected	165	None	replace
1183	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  true)).traverseRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  true)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  true)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    false)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
1184	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverse(root);  [CE]  <identifier>  expected  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    false)).traverse(root);    	non-compiled	[CE]  <identifier>  expected	165	None	replace
1185	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  true)).traverse(externs,  root);  [CE]  <identifier>  expected  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  true)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  true)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    false)).traverse(root);    	non-compiled	[CE]  <identifier>  expected	165	None	replace
1186	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(root);  [CE]  <identifier>  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(root);    	non-compiled	[CE]  <identifier>  expected	199	None	replace
1187	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).translateRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).translateRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).translateRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(root);    	non-compiled	[CE]  <identifier>  expected	199	None	replace
1188	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  externals);  [CE]  <identifier>  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externals);    	non-compiled	[CE]  <identifier>  expected	197	None	replace
1189	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  externals);  [CE]  <identifier>  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externals);    	non-compiled	[CE]  <identifier>  expected	197	None	replace
1190	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange),  externals);  [CE]  <identifier>  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange),  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange),  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externals);    	non-compiled	[CE]  <identifier>  expected	197	None	replace
1191	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs);  [CE]  illegal  start  of  type  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externals);    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
1192	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root),  externals);  [CE]  <identifier>  expected  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root),  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root),  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externals);    	non-compiled	[CE]  <identifier>  expected	197	None	replace
1193	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  checkUserDeclarations);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  checkUserDeclarations);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    assertOnChange);    	non-compiled	[CE]  illegal  start  of  type	205	None	replace
1194	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  assertOnChange);  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  assertOnChange);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    assertOnChange);    	non-compiled	[CE]  illegal  start  of  type	205	None	replace
1195	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root,  checkUserDeclarations)).traverseRoots(externs,  assertOnChange);  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root,  checkUserDeclarations)).traverseRoots(externs,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root,  checkUserDeclarations)).traverseRoots(externs,  assertOnChange);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    assertOnChange);    	non-compiled	[CE]  illegal  start  of  type	205	None	replace
1196	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  checkUserDeclarations,  assertOnChange);  [CE]  <identifier>  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  checkUserDeclarations,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  checkUserDeclarations,  assertOnChange);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    assertOnChange);    	non-compiled	[CE]  <identifier>  expected	205	None	replace
1197	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  verifyOnChange);  [CE]  class,  interface,  or  enum  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  verifyOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  verifyOnChange);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    assertOnChange);    	non-compiled	[CE]  class,  interface,  or  enum  expected	205	None	replace
1198	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  assertOnChange,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  type  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  assertOnChange,  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  assertOnChange,  hasOkDuplicateDeclaration);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    assertOnChange);    	non-compiled	[CE]  illegal  start  of  type	205	None	replace
1199	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  assertOnChange,  checkUserDeclarations);  [CE]  illegal  start  of  type  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  assertOnChange,  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  assertOnChange,  checkUserDeclarations);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    assertOnChange);    	non-compiled	[CE]  illegal  start  of  type	205	None	replace
1200	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertFalse)).traverseRoots(externs,  externs);  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertFalse)).traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertFalse)).traverseRoots(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertFalse)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	254	None	replace
1201	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertFalse)).traverseRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertFalse)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertFalse)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertFalse)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	254	None	replace
1202	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertTrue)).traverseRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertTrue)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertTrue)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertFalse)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	254	None	replace
1203	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNull)).traverseRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNull)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNull)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertFalse)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	254	None	replace
1204	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertUnique)).traverseRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertUnique)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertUnique)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertFalse)).traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	254	None	replace
1205	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertAll)).traverseRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertAll)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertAll)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertFalse)).traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	254	None	replace
1206	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  externals);  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  externals);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externals);    	non-compiled	[CE]  illegal  start  of  type	217	None	replace
1207	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  internals);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  internals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  internals);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externals);    	non-compiled	[CE]  illegal  start  of  type	217	None	replace
1208	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
1209	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
1210	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root,  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
1211	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  root.traverse(externs);  [CE]  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  root.traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  root.traverse(externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)),    externs.traverse(root);    	non-compiled	[CE]  	74	None	replace
1212	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(root);  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
1213	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_VAR_ERROR)).traverse(root);  [CE]  <identifier>  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_VAR_ERROR)).traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_VAR_ERROR)).traverse(root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
1214	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).traverse(root);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).traverse(root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
1215	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  getOkDuplicateDeclaration())).traverse(root);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  getOkDuplicateDeclaration())).traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  getOkDuplicateDeclaration())).traverse(root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
1216	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORbidChanges)).traverse(root);  [CE]  illegal  start  of  type  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORbidChanges)).traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORbidChanges)).traverse(root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
1217	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_DUPLICATE)).traverse(root);  [CE]  illegal  start  of  type  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_DUPLICATE)).traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_DUPLICATE)).traverse(root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
1218	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [CE]  <identifier>  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  <identifier>  expected	152	None	replace
1219	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  <identifier>  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  <identifier>  expected	152	None	replace
1220	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [CE]  class,  interface,  or  enum  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  class,  interface,  or  enum  expected	152	None	replace
1221	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  <identifier>  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  <identifier>  expected	152	None	replace
1222	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [CE]  <identifier>  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  <identifier>  expected	152	None	replace
1223	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [CE]  class,  interface,  or  enum  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  class,  interface,  or  enum  expected	152	None	replace
1224	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverseRoots(externs,  root));  [CE]  <identifier>  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverseRoots(externs,  root));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverseRoots(externs,  root));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    constantMap.traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	304	None	replace
1225	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  constantMap.traverseRoots(externs,  root);  [CE]  ')'  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  constantMap.traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  constantMap.traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    constantMap.traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	304	None	replace
1226	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverseRoots(externs,  externs);  [CE]  ')'  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverseRoots(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    constantMap.traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	304	None	replace
1227	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverseRoots(externs,  root);  [CE]  ')'  expected  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    constantMap.traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	304	None	replace
1228	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [CE]  ')'  expected  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverseRoots(externs,  root,  hasOkDuplicateDeclaration);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    constantMap.traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	304	None	replace
1229	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverseRoots(externs,  parent);  [CE]  ')'  expected  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverseRoots(externs,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverseRoots(externs,  parent);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    constantMap.traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	304	None	replace
1230	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals.cloneTree());  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs.cloneTree());    	non-compiled	[CE]  illegal  start  of  expression	216	None	replace
1231	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root.cloneTree());  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs.cloneTree());    	non-compiled	[CE]  illegal  start  of  expression	216	None	replace
1232	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent.cloneTree());  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs.cloneTree());    	non-compiled	[CE]  illegal  start  of  expression	216	None	replace
1233	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal.cloneTree());  [CE]  illegal  start  of  expression  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs.cloneTree());    	non-compiled	[CE]  illegal  start  of  expression	216	None	replace
1234	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  parent);  [CE]  illegal  start  of  expression  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  parent);	  NodeTraversal.traverseRoots(compiler,    root,    parent);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
1235	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  parent,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  parent,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  parent,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(compiler,    root,    parent);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
1236	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externs,  parent);  [CE]  illegal  start  of  expression  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  externs,  parent);	  NodeTraversal.traverseRoots(compiler,    root,    parent);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
1237	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  parent);  [CE]  illegal  start  of  expression  [FE]                                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externals,  parent);	  NodeTraversal.traverseRoots(compiler,    root,    parent);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
1238	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  parent);  [CE]  illegal  start  of  expression  [FE]                                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externes,  parent);	  NodeTraversal.traverseRoots(compiler,    root,    parent);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
1239	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(externs,  externs);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclaration)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
1240	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(externs,  externs,  root);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(externs,  externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(externs,  externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclaration)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
1241	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclaration)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
1242	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(externs,  root,  assertOnChange);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(externs,  root,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(externs,  root,  assertOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclaration)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
1243	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclaration)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
1244	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(root,  externs);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(root,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(root,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclaration)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
1245	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(externs,  externals);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(externs,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(externs,  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclaration)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
1246	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  null,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  null,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  null,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNode(compiler,    externs,    root,    null);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
1247	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  constantMap);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  constantMap);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  constantMap);	  NodeTraversal.traverseNode(compiler,    externs,    root,    null);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
1248	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  externs,  null);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  externs,  null);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  root,  externs,  null);	  NodeTraversal.traverseNode(compiler,    externs,    root,    null);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
1249	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  t,  null);  [CE]  illegal  start  of  expression  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  t,  null);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  t,  null);	  NodeTraversal.traverseNode(compiler,    externs,    root,    null);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
1250	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  this,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  this,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  this,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    this);    	non-compiled	[CE]  illegal  start  of  expression	230	None	replace
1251	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  this,  true);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  this,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  this,  true);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    this);    	non-compiled	[CE]  illegal  start  of  expression	230	None	replace
1252	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs,  checkUserDeclarations)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs,  checkUserDeclarations)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs,  checkUserDeclarations)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externs)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
1253	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverseRoots(externs,  externals);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverseRoots(externs,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverseRoots(externs,  externals);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externs)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
1254	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	206	None	replace
1255	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(converter,  root);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(converter,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(converter,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	206	None	replace
1256	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(externs,  parent);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(externs,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(externs,  parent);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	206	None	replace
1257	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(null,  root);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(null,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(null,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	206	None	replace
1258	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(constantMap,  externs,  root);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(constantMap,  externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(constantMap,  externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	206	None	replace
1259	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	206	None	replace
1260	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  checkUserDeclaration,  forbidChanges);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  checkUserDeclaration,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  checkUserDeclaration,  forbidChanges);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    checkUserDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	228	None	replace
1261	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  checkUserDeclaration,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  checkUserDeclaration,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  checkUserDeclaration,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    checkUserDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	228	None	replace
1262	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  verifyUserDeclaration);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  verifyUserDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  verifyUserDeclaration);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    checkUserDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	228	None	replace
1263	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  checkUserDeclaration,  forbidChanges);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  checkUserDeclaration,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  checkUserDeclaration,  forbidChanges);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    checkUserDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	228	None	replace
1264	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
1265	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externals,  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
1266	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  haveOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  haveOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  haveOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
1267	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  hasOkDuplicateDeclaration);  [CE]  <identifier>  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externes,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externes,  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
1268	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  checkUserDeclaration);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  checkUserDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  checkUserDeclaration);	  NodeTraversal.traverse(compiler,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
1269	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  failOnChange)).traverse(root);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  failOnChange)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  failOnChange)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
1270	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseGlobals(root);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseGlobals(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseGlobals(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseGlobals(externs);    	non-compiled	[CE]  illegal  start  of  expression	270	None	replace
1271	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseGlobals(externs,  root);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseGlobals(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseGlobals(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseGlobals(externs);    	non-compiled	[CE]  illegal  start  of  expression	270	None	replace
1272	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseGlobals(externs,  internal);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseGlobals(externs,  internal);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseGlobals(externs,  internal);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseGlobals(externs);    	non-compiled	[CE]  illegal  start  of  expression	270	None	replace
1273	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseGlobals(externs,  parent);  [CE]  <identifier>  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseGlobals(externs,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseGlobals(externs,  parent);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseGlobals(externs);    	non-compiled	[CE]  <identifier>  expected	270	None	replace
1274	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseGlobals(externs,  externs);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseGlobals(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseGlobals(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseGlobals(externs);    	non-compiled	[CE]  illegal  start  of  expression	270	None	replace
1275	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseGlobals(externs,  externals);  [CE]  illegal  start  of  expression  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseGlobals(externs,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseGlobals(externs,  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseGlobals(externs);    	non-compiled	[CE]  illegal  start  of  expression	270	None	replace
1276	[BUG]  [BUGGY]  NodeTraversal.traverseGlobals(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseGlobals(externs);  [CE]  illegal  start  of  expression  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseGlobals(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseGlobals(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseGlobals(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseGlobals(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseGlobals(externs);    	non-compiled	[CE]  illegal  start  of  expression	270	None	replace
1277	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseGlobals(externs,  forbidChanges);  [CE]  illegal  start  of  expression  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseGlobals(externs,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseGlobals(externs,  forbidChanges);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseGlobals(externs);    	non-compiled	[CE]  illegal  start  of  expression	270	None	replace
1278	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
1279	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
1280	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
1281	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);  [CE]  <identifier>  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  <identifier>  expected	120	None	replace
1282	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
1283	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs,  root);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
1284	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  0);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  0);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  0);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
1285	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(default);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(default);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(default);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
1286	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(last);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(last);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(last);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
1287	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(return);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(return);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(return);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
1288	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverseRoots(externs);    	non-compiled	[CE]  illegal  start  of  expression	240	None	replace
1289	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  forbidChanges);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  forbidChanges);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverseRoots(externs);    	non-compiled	[CE]  illegal  start  of  expression	240	None	replace
1290	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOkDuplicateDeclaration)).traverseRoots(externs);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOkDuplicateDeclaration)).traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOkDuplicateDeclaration)).traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverseRoots(externs);    	non-compiled	[CE]  illegal  start  of  expression	240	None	replace
1291	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkConstants)).traverseRoots(externs);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkConstants)).traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkConstants)).traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverseRoots(externs);    	non-compiled	[CE]  illegal  start  of  expression	240	None	replace
1292	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkVars)).traverseRoots(externs);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkVars)).traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkVars)).traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverseRoots(externs);    	non-compiled	[CE]  illegal  start  of  expression	240	None	replace
1293	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).trace(root);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).trace(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).trace(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).trace(root);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
1294	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_VAR_ERROR)).trace(root);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_VAR_ERROR)).trace(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_VAR_ERROR)).trace(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).trace(root);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
1295	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORbidChanges)).trace(root);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORbidChanges)).trace(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORbidChanges)).trace(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).trace(root);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
1296	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  getOkDuplicateDeclaration())).trace(root);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  getOkDuplicateDeclaration())).trace(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  getOkDuplicateDeclaration())).trace(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).trace(root);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
1297	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).trace(root);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).trace(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).trace(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).trace(root);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
1298	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBIND_LOCAL_NAMES_UNIQUE)).trace(root);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBIND_LOCAL_NAMES_UNIQUE)).trace(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBIND_LOCAL_NAMES_UNIQUE)).trace(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).trace(root);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
1299	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).trace(root);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).trace(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).trace(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).trace(root);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
1300	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkForbidChanges)).trace(root);  [CE]  <identifier>  expected  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkForbidChanges)).trace(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkForbidChanges)).trace(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).trace(root);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
1301	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  externals);  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    externals,    root);    	non-compiled	[CE]  illegal  start  of  expression	315	None	replace
1302	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  internals);  [CE]  <identifier>  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  internals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  internals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    externals,    root);    	non-compiled	[CE]  <identifier>  expected	315	None	replace
1303	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externals,  root,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externals,  root,  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externals,  root,  hasOkDuplicateDeclaration);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    externals,    root);    	non-compiled	[CE]  illegal  start  of  expression	315	None	replace
1304	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  assertOnChange);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  root,  assertOnChange);	  NodeTraversal.traverseConstants(compiler,    root,    externs);    	non-compiled	[CE]  illegal  start  of  expression	183	None	replace
1305	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  root,  checkUserDeclarations);	  NodeTraversal.traverseConstants(compiler,    root,    externs);    	non-compiled	[CE]  illegal  start  of  expression	183	None	replace
1306	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externals,  root);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externals,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externals,  root);	  NodeTraversal.traverseConstants(compiler,    root,    externs);    	non-compiled	[CE]  illegal  start  of  expression	183	None	replace
1307	[BUG]  [BUGGY]  NodeTraversal.traverseConstant(compiler,  externs,  root);  [CE]  <identifier>  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstant(compiler,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstant(compiler,  externs,  root);	  NodeTraversal.traverseConstants(compiler,    root,    externs);    	non-compiled	[CE]  <identifier>  expected	183	None	replace
1308	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  true);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  root,  true);	  NodeTraversal.traverseConstants(compiler,    root,    externs);    	non-compiled	[CE]  illegal  start  of  expression	183	None	replace
1309	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  this);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  this);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  root,  this);	  NodeTraversal.traverseConstants(compiler,    root,    externs);    	non-compiled	[CE]  illegal  start  of  expression	183	None	replace
1310	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  parent);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  parent);	  NodeTraversal.traverseConstants(compiler,    root,    externs);    	non-compiled	[CE]  illegal  start  of  expression	183	None	replace
1311	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(externs,  root));  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(externs,  root));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(externs,  root));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    t.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	314	None	replace
1312	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(externs,  externs);  [CE]  ')'  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    t.traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	314	None	replace
1313	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  t.traverseRoots(externs,  root);  [CE]  ')'  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  t.traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  t.traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    t.traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	314	None	replace
1314	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [CE]  ')'  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(externs,  root,  hasOkDuplicateDeclaration);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    t.traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	314	None	replace
1315	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(externs,  root);  [CE]  ')'  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    t.traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	314	None	replace
1316	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseNode(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
1317	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  NodeTraversal.traverseNode(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
1318	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNode(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
1319	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseNode(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
1320	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNKNOWN);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNKNOWN);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNKNOWN);	  NodeTraversal.traverseNode(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
1321	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseNode(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
1322	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [CE]  <identifier>  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);	  NodeTraversal.traverseNode(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
1323	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  parent);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  parent);	  NodeTraversal.traverseNode(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
1324	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(parent);  [CE]  <identifier>  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(parent);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(parent);    	non-compiled	[CE]  <identifier>  expected	179	None	replace
1325	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(parent);  [CE]  <identifier>  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(parent);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(parent);    	non-compiled	[CE]  <identifier>  expected	179	None	replace
1326	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  true,  hasOkDuplicateDeclaration);  [CE]  <identifier>  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  true,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  true,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNode(compiler,    externs,    root,    true);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
1327	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  true);  [CE]  <identifier>  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  root,  true);	  NodeTraversal.traverseNode(compiler,    externs,    root,    true);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
1328	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  false,  true);  [CE]  <identifier>  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  false,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  false,  true);	  NodeTraversal.traverseNode(compiler,    externs,    root,    true);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
1329	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  assertOnChange,  true);  [CE]  <identifier>  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  assertOnChange,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  assertOnChange,  true);	  NodeTraversal.traverseNode(compiler,    externs,    root,    true);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
1330	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  renamer,  true);  [CE]  <identifier>  expected  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  renamer,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  renamer,  true);	  NodeTraversal.traverseNode(compiler,    externs,    root,    true);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
1331	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  null,  true);  [CE]  <identifier>  expected  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  null,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  null,  true);	  NodeTraversal.traverseNode(compiler,    externs,    root,    true);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
1332	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements());  [CE]  <identifier>  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements());	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  <identifier>  expected	280	None	replace
1333	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  assertOnChange);  [CE]  <identifier>  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  assertOnChange);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  <identifier>  expected	280	None	replace
1334	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements());  [CE]  <identifier>  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements());	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  <identifier>  expected	280	None	replace
1335	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements());  [CE]  orphaned  case  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements());	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  orphaned  case	280	None	replace
1336	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  hasOkDuplicateDeclaration);  [CE]  orphaned  case  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  orphaned  case	280	None	replace
1337	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  assertOnChange));  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  assertOnChange));  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  assertOnChange));	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  	280	None	replace
1338	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  externs);  [CE]  class,  interface,  or  enum  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  externs);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  class,  interface,  or  enum  expected	280	None	replace
1339	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements()));  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements()));  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements()));	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  	280	None	replace
1340	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).trace(externs,  internal);  [CE]  class,  interface,  or  enum  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).trace(externs,  internal);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).trace(externs,  internal);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(externs,    internal);    	non-compiled	[CE]  class,  interface,  or  enum  expected	321	None	replace
1341	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  internal);  [CE]  class,  interface,  or  enum  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  internal);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  internal);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(externs,    internal);    	non-compiled	[CE]  class,  interface,  or  enum  expected	321	None	replace
1342	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internal)).trace(externs,  assertOnChange);  [CE]  class,  interface,  or  enum  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internal)).trace(externs,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internal)).trace(externs,  assertOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(externs,    internal);    	non-compiled	[CE]  class,  interface,  or  enum  expected	321	None	replace
1343	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(root,  internal);  [CE]  class,  interface,  or  enum  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(root,  internal);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(root,  internal);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(externs,    internal);    	non-compiled	[CE]  class,  interface,  or  enum  expected	321	None	replace
1344	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internal)).trace(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internal)).trace(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internal)).trace(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(externs,    internal);    	non-compiled	[CE]  class,  interface,  or  enum  expected	321	None	replace
1345	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  forbidChanges)).traverse(root);  [CE]  class,  interface,  or  enum  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  forbidChanges)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  forbidChanges)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    forbidChanges)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	99	None	replace
1346	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  forbidChanges)).traverse(externs);  [CE]  class,  interface,  or  enum  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  forbidChanges)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  forbidChanges)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    forbidChanges)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	99	None	replace
1347	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  forbidChanges)).traverse(root);  [CE]  <identifier>  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  final  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  forbidChanges)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	final  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  forbidChanges)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    forbidChanges)).traverse(root);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
1348	[BUG]  [BUGGY]  nodeTraversal(compiler,  new  NormalizeStatements(compiler,  forbidChanges)).traverse(root);  [CE]  class,  interface,  or  enum  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  nodeTraversal(compiler,  new  NormalizeStatements(compiler,  forbidChanges)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	nodeTraversal(compiler,  new  NormalizeStatements(compiler,  forbidChanges)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    forbidChanges)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	99	None	replace
1349	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    compiler).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	278	None	replace
1350	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler).traverseRoots(externs,  externs);  [CE]  class,  interface,  or  enum  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler).traverseRoots(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler).traverseRoots(externs,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    compiler).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	278	None	replace
1351	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals).traverseRoots(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    compiler).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	278	None	replace
1352	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    compiler).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	278	None	replace
1353	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs,  externs);  [CE]  class,  interface,  or  enum  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    compiler).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	278	None	replace
1354	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    compiler).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	278	None	replace
1355	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs,  parent);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs,  parent);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    compiler).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	278	None	replace
1356	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  false);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  false);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    true);    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
1357	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  assertOnChange,  true);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  assertOnChange,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  assertOnChange,  true);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    true);    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
1358	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  null,  true);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  null,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  null,  true);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    true);    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
1359	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  parent,  true);  [CE]  illegal  start  of  expression  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  parent,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  parent,  true);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    true);    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
1360	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  true);  [CE]  illegal  start  of  expression  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  renamer,  true);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    true);    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
1361	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  false,  true);  [CE]  illegal  start  of  expression  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  false,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  false,  true);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    true);    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
1362	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  true,  false);  [CE]  illegal  start  of  expression  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  true,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  true,  false);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    true);    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
1363	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  parent);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  parent);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    parent);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
1364	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).plot(externs,  parent);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).plot(externs,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).plot(externs,  parent);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    parent);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
1365	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  externs,  parent);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  externs,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  externs,  parent);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    parent);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
1366	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).plot(externs,  parent);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).plot(externs,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).plot(externs,  parent);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    parent);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
1367	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  parent)).plot(externs,  root);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  parent)).plot(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  parent)).plot(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    parent);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
1368	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    parent);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
1369	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    parent);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
1370	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  extern);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  extern);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  extern);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    parent);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
1371	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externes);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externes);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externes);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    parent);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
1372	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(compiler,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
1373	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  checkUserDeclarations,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  checkUserDeclarations,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  checkUserDeclarations,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(compiler,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
1374	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  haveOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  haveOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  haveOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(compiler,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
1375	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  hasOkDuplicateDeclaration);  [CE]  case,  default,  or  '}'  expected  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externals,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(compiler,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  case,  default,  or  '}'  expected	2	None	replace
1376	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externes,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(compiler,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
1377	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  isOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  isOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  isOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(compiler,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
1378	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  hasOkDuplicateDeclaration,  assertOnChange);  [CE]  illegal  start  of  expression  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  hasOkDuplicateDeclaration,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  hasOkDuplicateDeclaration,  assertOnChange);	  NodeTraversal.traverseRoots(compiler,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
1379	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChanges)).traverseRoots(root,  externs);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChanges)).traverseRoots(root,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChanges)).traverseRoots(root,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertNoChanges)).traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
1380	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertNoChanges)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertNoChanges)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertNoChanges)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertNoChanges)).traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
1381	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externs,  hasOkDuplicateDeclaration);  [CE]  case,  default,  or  '}'  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externs,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  externs,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(compiler,    root,    externs);    	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	replace
1382	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseRoots(compiler,    root,    externs);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
1383	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externs,  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externs,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  externs,  checkUserDeclarations);	  NodeTraversal.traverseRoots(compiler,    root,    externs);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
1384	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverse(externs);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root).traverse(externs);    	non-compiled	[CE]  illegal  start  of  expression	196	None	replace
1385	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  root).traverse(externs);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  root).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  root).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root).traverse(externs);    	non-compiled	[CE]  illegal  start  of  expression	196	None	replace
1386	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverse(root);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root).traverse(externs);    	non-compiled	[CE]  illegal  start  of  expression	196	None	replace
1387	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root).traverse(externs);    	non-compiled	[CE]  illegal  start  of  expression	196	None	replace
1388	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals).traverse(externs);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root).traverse(externs);    	non-compiled	[CE]  illegal  start  of  expression	196	None	replace
1389	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  externs).plot(externs,  root);  [CE]  case,  default,  or  '}'  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  externs).plot(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  externs).plot(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs).plot(externs,    root);    	non-compiled	[CE]  case,  default,  or  '}'  expected	15	None	replace
1390	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations).plot(externs,  root);  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations).plot(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations).plot(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs).plot(externs,    root);    	non-compiled	[CE]  	15	None	replace
1391	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).plot(externs,  root);  [CE]  case,  default,  or  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).plot(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).plot(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs).plot(externs,    root);    	non-compiled	[CE]  case,  default,  or  	15	None	replace
1392	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange),  externs).plot(externs,  assertOnChange);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange),  externs).plot(externs,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange),  externs).plot(externs,  assertOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs).plot(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
1393	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).plot(externs,  root,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).plot(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).plot(externs,  root,  hasOkDuplicateDeclaration);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs).plot(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
1394	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).plot(externs,  root,  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).plot(externs,  root,  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).plot(externs,  root,  checkUserDeclarations);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs).plot(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
1395	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CATCH_BLOCK_VAR_ERROR)).traverse(root);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CATCH_BLOCK_VAR_ERROR)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CATCH_BLOCK_VAR_ERROR)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    FORBLOCK_VAR_ERROR)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
1396	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_VAR_ERROR)).traverse(externs,  root);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_VAR_ERROR)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_VAR_ERROR)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    FORBLOCK_VAR_ERROR)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
1397	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_VAR_ERROR)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_VAR_ERROR)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_VAR_ERROR)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    FORBLOCK_VAR_ERROR)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
1398	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_VAR_ERROR)).traverse(externs);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_VAR_ERROR)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_VAR_ERROR)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    FORBLOCK_VAR_ERROR)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
1399	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internals);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externals);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
1400	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  externals);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externals);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
1401	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkUserDeclarations)).traverse(root);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkUserDeclarations)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkUserDeclarations)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    verifyOnChange)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
1402	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  verifyOnChange)).traverse(root);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  verifyOnChange)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  verifyOnChange)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    verifyOnChange)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
1403	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  assertOnChange)).traverse(root);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  assertOnChange)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  assertOnChange)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    verifyOnChange)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
1404	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  assertOnChange)).traverse(externs);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  assertOnChange)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  assertOnChange)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    verifyOnChange)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
1405	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).traverse(root);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    verifyOnChange)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
1406	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internals,  root);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internals,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internals,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externals,    root);    	non-compiled	[CE]  illegal  start  of  expression	290	None	replace
1407	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  false);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  false);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externals,    root);    	non-compiled	[CE]  illegal  start  of  expression	290	None	replace
1408	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclaration);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclaration);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
1409	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  verifyOnChange);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  verifyOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  verifyOnChange);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
1410	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  assertOnChange);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  assertOnChange);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
1411	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkForbidChanges)).traverse(externs);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkForbidChanges)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkForbidChanges)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(externs);    	non-compiled	[CE]  illegal  start  of  expression	238	None	replace
1412	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  assertOnChange)).traverse(root);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  assertOnChange)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  assertOnChange)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(externs);    	non-compiled	[CE]  illegal  start  of  expression	238	None	replace
1413	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(externs);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(externs);    	non-compiled	[CE]  illegal  start  of  expression	238	None	replace
1414	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
1415	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs);  [CE]  case,  default,  or  '}'  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  case,  default,  or  '}'  expected	67	None	replace
1416	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externals);  [CE]  case,  default,  or  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externals);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  case,  default,  or  	67	None	replace
1417	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  assertOnChange,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [CE]  case,  default,  or  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  assertOnChange,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  assertOnChange,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  case,  default,  or  	67	None	replace
1418	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null,  root);  [CE]  case,  default,  or  '}'  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  case,  default,  or  '}'  expected	67	None	replace
1419	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs,  root);  [CE]  case,  default,  or  '}'  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  case,  default,  or  '}'  expected	67	None	replace
1420	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(converter,  root);  [CE]  case,  default,  or  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(converter,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(converter,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  case,  default,  or  	67	None	replace
1421	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externals);  [CE]  case,  default,  or  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externals);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  case,  default,  or  	67	None	replace
1422	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  externs,  root);  [CE]  case,  default,  or  '}'  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externs,    root);    	non-compiled	[CE]  case,  default,  or  '}'  expected	14	None	replace
1423	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  case,  default,  or  '}'  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externs,    root);    	non-compiled	[CE]  case,  default,  or  '}'  expected	14	None	replace
1424	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  root,  hasOkDuplicateDeclaration);  [CE]  case,  default,  or  '}'  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  root,  hasOkDuplicateDeclaration);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externs,    root);    	non-compiled	[CE]  case,  default,  or  '}'  expected	14	None	replace
1425	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  case,  default,  or  '}'  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externs,    root);    	non-compiled	[CE]  case,  default,  or  '}'  expected	14	None	replace
1426	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  root,  parent);  [CE]  case,  default,  or  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  root,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  root,  parent);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externs,    root);    	non-compiled	[CE]  case,  default,  or  	14	None	replace
1427	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).plot(externs,  root);  [CE]  case,  default,  or  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).plot(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).plot(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externs,    root);    	non-compiled	[CE]  case,  default,  or  	14	None	replace
1428	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  externs);  [CE]  orphaned  case  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(externs,    root);    	non-compiled	[CE]  orphaned  case	273	None	replace
1429	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  externs,  root);  [CE]  orphaned  case  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(externs,    root);    	non-compiled	[CE]  orphaned  case	273	None	replace
1430	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(root,  externs);  [CE]  orphaned  case  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(root,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(root,  externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(externs,    root);    	non-compiled	[CE]  orphaned  case	273	None	replace
1431	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  parent);  [CE]  class,  interface,  or  enum  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  parent);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	273	None	replace
1432	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  externals);  [CE]  orphaned  case  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  externals);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(externs,    root);    	non-compiled	[CE]  orphaned  case	273	None	replace
1433	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoot(externs,  root);  [CE]  orphaned  case  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoot(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoot(externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(externs,    root);    	non-compiled	[CE]  orphaned  case	273	None	replace
1434	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  root,  hasOkDuplicateDeclaration);  [CE]  orphaned  case  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  root,  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(externs,    root);    	non-compiled	[CE]  orphaned  case	273	None	replace
1435	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  internal);  [CE]  orphaned  case  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  internal);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  internal);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(externs,    root);    	non-compiled	[CE]  orphaned  case	273	None	replace
1436	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  parent,  hasOkDuplicateDeclaration);  [CE]  class,  interface,  or  enum  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  parent,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  parent,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    parent);    	non-compiled	[CE]  class,  interface,  or  enum  expected	149	None	replace
1437	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  parent,  checkUserDeclarations);  [CE]  class,  interface,  or  enum  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  parent,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  parent,  checkUserDeclarations);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    parent);    	non-compiled	[CE]  class,  interface,  or  enum  expected	149	None	replace
1438	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  externals,  assertOnChange)).traverseRoots(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  externals,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  externals,  assertOnChange)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externals)).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
1439	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  externs,  assertOnChange)).traverseRoots(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  externs,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  externs,  assertOnChange)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externals)).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
1440	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals,  checkUserDeclarations)).traverseRoots(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals,  checkUserDeclarations)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals,  checkUserDeclarations)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externals)).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
1441	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals)).traverseRoots(externs,  externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals)).traverseRoots(externs,  externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals)).traverseRoots(externs,  externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externals)).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
1442	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externals)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
1443	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverseRoots(externs,  root));  [CE]  class,  interface,  or  enum  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverseRoots(externs,  root));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverseRoots(externs,  root));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externals.traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	242	None	replace
1444	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  externals.traverseRoots(externs,  root);  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  externals.traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  externals.traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externals.traverseRoots(externs,    root);    	non-compiled	[CE]  	242	None	replace
1445	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  class,  interface,  or  enum  expected  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  class,  interface,  or  enum  expected	288	None	replace
1446	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  class,  interface,  or  enum  expected  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  class,  interface,  or  enum  expected	288	None	replace
1447	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  class,  interface,  or  enum  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  class,  interface,  or  enum  expected	288	None	replace
1448	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  class,  interface,  or  enum  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  class,  interface,  or  enum  expected	288	None	replace
1449	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  class,  interface,  or  enum  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  class,  interface,  or  enum  expected	288	None	replace
1450	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [CE]  class,  interface,  or  enum  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	284	None	replace
1451	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externals,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externals,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externals,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	284	None	replace
1452	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  illegal  start  of  type	284	None	replace
1453	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(converter,  externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(converter,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(converter,  externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	284	None	replace
1454	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	284	None	replace
1455	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  assertOnChange)).plot(externs,  root);  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  assertOnChange)).plot(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  assertOnChange)).plot(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).plot(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
1456	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).plot(externs,  root);  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).plot(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).plot(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).plot(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
1457	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  assertOnChange)).plot(externs,  externs);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  assertOnChange)).plot(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  assertOnChange)).plot(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).plot(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
1458	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).plot(externs,  root);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).plot(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).plot(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).plot(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
1459	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  root,  forbidChanges);  [CE]  illegal  start  of  type  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  root,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  root,  forbidChanges);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).plot(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
1460	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations,  forbidChanges)).plot(externs,  root);  [CE]  illegal  start  of  type  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations,  forbidChanges)).plot(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations,  forbidChanges)).plot(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).plot(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
1461	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange));  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    	non-compiled	[CE]  illegal  start  of  type	302	None	replace
1462	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false));  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    	non-compiled	[CE]  illegal  start  of  type	302	None	replace
1463	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root));  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    	non-compiled	[CE]  illegal  start  of  type	302	None	replace
1464	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertFalse));  [CE]  illegal  start  of  type  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertFalse));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertFalse));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    	non-compiled	[CE]  illegal  start  of  type	302	None	replace
1465	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  false);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  false);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    true);    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
1466	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  null,  true);  [CE]  illegal  start  of  type  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  null,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  null,  true);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    true);    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
1467	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  parent,  true);  [CE]  illegal  start  of  type  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  parent,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  parent,  true);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    true);    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
1468	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  assertOnChange,  true);  [CE]  illegal  start  of  type  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  assertOnChange,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  assertOnChange,  true);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    true);    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
1469	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  false,  true);  [CE]  illegal  start  of  type  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  false,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  false,  true);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    true);    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
1470	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  renamer,  true);  [CE]  illegal  start  of  type  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  renamer,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  renamer,  true);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    true);    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
1471	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  t);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  t);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  t);	  NodeTraversal.traverse(compiler,    root,    t);    	non-compiled	[CE]  illegal  start  of  type	249	None	replace
1472	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  t);  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  t);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externals,  t);	  NodeTraversal.traverse(compiler,    root,    t);    	non-compiled	[CE]  illegal  start  of  type	249	None	replace
1473	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  t);  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externes,  t);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externes,  t);	  NodeTraversal.traverse(compiler,    root,    t);    	non-compiled	[CE]  illegal  start  of  type	249	None	replace
1474	[BUG]  [BUGGY]  Traversal.traverse(compiler,  externs,  t);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  Traversal.traverse(compiler,  externs,  t);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	Traversal.traverse(compiler,  externs,  t);	  NodeTraversal.traverse(compiler,    root,    t);    	non-compiled	[CE]  illegal  start  of  type	249	None	replace
1475	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement());  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement());	  NodeTraversal.traverse(compiler,    root,    t);    	non-compiled	[CE]  illegal  start  of  type	249	None	replace
1476	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkForbidChanges)).traverse(externs,  root);  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkForbidChanges)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkForbidChanges)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
1477	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(externs,  root);  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
1478	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  assertOnChange)).traverse(externs,  root);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  assertOnChange)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  assertOnChange)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
1479	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkUserDeclarations)).traverse(externs,  root);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkUserDeclarations)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkUserDeclarations)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
1480	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  checkUserDeclarations);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  checkUserDeclarations);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    forbidChanges);    	non-compiled	[CE]  illegal  start  of  type	300	None	replace
1481	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  forbidChanges);  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  forbidChanges);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    forbidChanges);    	non-compiled	[CE]  illegal  start  of  type	300	None	replace
1482	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  forbidChanges);  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  forbidChanges);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    forbidChanges);    	non-compiled	[CE]  illegal  start  of  type	300	None	replace
1483	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  forbidChanges);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  forbidChanges);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    forbidChanges);    	non-compiled	[CE]  illegal  start  of  type	300	None	replace
1484	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  true)).traverse(root);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  true)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  true)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    false)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
1485	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverse(externs);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    false)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
1486	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverse(externs,  root);  [CE]  illegal  start  of  type  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    false)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
1487	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  false)).traverse(root);  [CE]  illegal  start  of  type  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  false)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  false)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    false)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
1488	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverse(root,  assertOnChange);  [CE]  illegal  start  of  type  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverse(root,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverse(root,  assertOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    false)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
1489	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	237	None	replace
1490	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	237	None	replace
1491	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	237	None	replace
1492	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(externs);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	237	None	replace
1493	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(null);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(null);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(null);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	237	None	replace
1494	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(root);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	177	None	replace
1495	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkForbidChanges)).traverse(root);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkForbidChanges)).traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkForbidChanges)).traverse(root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	177	None	replace
1496	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(externs);  [CE]  illegal  start  of  type  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	177	None	replace
1497	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChanges)).traverse(root);  [CE]  illegal  start  of  type  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChanges)).traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChanges)).traverse(root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	177	None	replace
1498	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkOkDuplicateDeclaration)).traverse(root);  [CE]  illegal  start  of  type  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkOkDuplicateDeclaration)).traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkOkDuplicateDeclaration)).traverse(root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	177	None	replace
1499	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkDeclarations)).traverse(root);  [CE]  illegal  start  of  type  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkDeclarations)).traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkDeclarations)).traverse(root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	177	None	replace
1500	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs);  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(root);    	non-compiled	[CE]  illegal  start  of  type	276	None	replace
1501	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoot(root);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoot(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoot(root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(root);    	non-compiled	[CE]  illegal  start  of  type	276	None	replace
1502	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(null);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(null);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(null);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(root);    	non-compiled	[CE]  illegal  start  of  type	276	None	replace
1503	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(interns,  root);  [CE]  illegal  start  of  type  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(interns,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(interns,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(root);    	non-compiled	[CE]  illegal  start  of  type	276	None	replace
1504	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(parent);  [CE]  illegal  start  of  type  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(parent);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(root);    	non-compiled	[CE]  illegal  start  of  type	276	None	replace
1505	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs,  externals);  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs,  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
1506	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traceRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traceRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traceRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
1507	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs,  internal);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs,  internal);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs,  internal);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
1508	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).transverseRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).transverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).transverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
1509	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  MAKE_WHILE_TO_FOR);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  MAKE_WHILE_TO_FOR);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  MAKE_WHILE_TO_FOR);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  illegal  start  of  type	182	None	replace
1510	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).trace(externs,  internal);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).trace(externs,  internal);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).trace(externs,  internal);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(externs,    internal);    	non-compiled	[CE]  illegal  start  of  type	321	None	replace
1511	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traceRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traceRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traceRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	322	None	replace
1512	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  internal);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  internal);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  internal);	  new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	322	None	replace
1513	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).straverseRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).straverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).straverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	322	None	replace
1514	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externals)).traceRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externals)).traceRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externals)).traceRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange,    externals)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
1515	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  CATCH_BLOCK_VAR_ERROR);  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  CATCH_BLOCK_VAR_ERROR);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  CATCH_BLOCK_VAR_ERROR);	  NodeTraversal.traverseNode(compiler,    externs,    root,    renamer);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
1516	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  makeDeclaredNamesUnique);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  makeDeclaredNamesUnique);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  makeDeclaredNamesUnique);	  NodeTraversal.traverseNode(compiler,    externs,    root,    renamer);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
1517	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNKNOWN);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNKNOWN);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNKNOWN);	  NodeTraversal.traverseNode(compiler,    externs,    root,    renamer);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
1518	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  new  NormalizeStatements());  [CE]  illegal  start  of  type  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  new  NormalizeStatements());	  NodeTraversal.traverseNode(compiler,    externs,    root,    renamer);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
1519	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverseRoots(externs,  internal);  [CE]  illegal  start  of  type  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverseRoots(externs,  internal);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverseRoots(externs,  internal);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
1520	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externes);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externes);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externes);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externes);    	non-compiled	[CE]  illegal  start  of  type	261	None	replace
1521	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  externals.traverseRoots(externs,  root);  [CE]  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  externals.traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  externals.traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externals.traverseRoots(externs,    root);    	non-compiled	[CE]  	242	None	replace
1522	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverseRoots(externs,  externs);  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverseRoots(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externals.traverseRoots(externs,    root);    	non-compiled	[CE]  	242	None	replace
1523	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  checkUserDeclarations));  [CE]  illegal  start  of  type  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  checkUserDeclarations));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  checkUserDeclarations));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations));    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
1524	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNotNull,  checkUserDeclarations));  [CE]  illegal  start  of  type  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNotNull,  checkUserDeclarations));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNotNull,  checkUserDeclarations));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations));    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
1525	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEquals)).traverseRoots(externs);  [CE]  illegal  start  of  type  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEquals)).traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEquals)).traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertEquals)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	195	None	replace
1526	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertEquals)).traverse(externs);  [CE]  illegal  start  of  type  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertEquals)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertEquals)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertEquals)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	195	None	replace
1527	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  DuplicateDeclarationHandler());  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  DuplicateDeclarationHandler());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  new  DuplicateDeclarationHandler());	  NodeTraversal.traverse(compiler,    externs,    root,    t);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
1528	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeStatement());  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeStatement());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeStatement());	  NodeTraversal.traverse(compiler,    externs,    root,    t);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
1529	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	298	None	replace
1530	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  testUserDeclarations,  forbidChanges)).traverseRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  testUserDeclarations,  forbidChanges)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  testUserDeclarations,  forbidChanges)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	298	None	replace
1531	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CheckUserDeclaration)).traverseRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CheckUserDeclaration)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CheckUserDeclaration)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	298	None	replace
1532	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler());  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler());	  NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  illegal  start  of  type	250	None	replace
1533	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration());  [CE]  <identifier>  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration());	  NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  <identifier>  expected	250	None	replace
1534	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationCallback());  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationCallback());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationCallback());	  NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  illegal  start  of  type	250	None	replace
1535	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  this);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externes,  this);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externes,  this);	  NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  illegal  start  of  type	250	None	replace
1536	[BUG]  [BUGGY]  NodeTraversal.traverseNodeDeclarations(compiler,  root);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodeDeclarations(compiler,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodeDeclarations(compiler,  root);	  NodeTraversal.traverseRoots(compiler,    externs);    	non-compiled	[CE]  illegal  start  of  type	208	None	replace
1537	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  root);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  root);	  NodeTraversal.traverseRoots(compiler,    externs);    	non-compiled	[CE]  illegal  start  of  type	208	None	replace
1538	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_LONG_NAMES_UNIQUE);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_LONG_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_LONG_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  illegal  start  of  type	288	None	replace
1539	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_DOUBLE_NAMES_UNIQUE);  [CE]  <identifier>  expected  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_DOUBLE_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_DOUBLE_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  <identifier>  expected	288	None	replace
1540	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_WHILE_TO_FOR);  [CE]  <identifier>  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_WHILE_TO_FOR);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_WHILE_TO_FOR);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  <identifier>  expected	288	None	replace
1541	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  externs.traverse(externs,  root);  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  externs.traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  externs.traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs.traverse(externs,    root);    	non-compiled	[CE]  	112	None	replace
1542	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBEEN_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBEEN_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBEEN_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    FORBEEN_LOCAL_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  <identifier>  expected	295	None	replace
1543	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  root)).traverseRoots(externs,  externals);  [CE]  <identifier>  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  root)).traverseRoots(externs,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  root)).traverseRoots(externs,  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	133	None	replace
1544	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  checkUserDeclarations,  forbidChanges)).traverse(externs);  [CE]  <identifier>  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  checkUserDeclarations,  forbidChanges)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  checkUserDeclarations,  forbidChanges)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange,    forbidChanges)).traverse(root);    	non-compiled	[CE]  <identifier>  expected	294	None	replace
1545	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  checkUserDeclarations,  assertOnChange)).traverse(root);  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  checkUserDeclarations,  assertOnChange)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  checkUserDeclarations,  assertOnChange)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange,    forbidChanges)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	294	None	replace
1546	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  verifyOnChange,  checkUserDeclarations)).traverse(root);  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  verifyOnChange,  checkUserDeclarations)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  verifyOnChange,  checkUserDeclarations)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange,    forbidChanges)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	294	None	replace
1547	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertNoChange,  checkUserDeclarations)).traverse(root);  [CE]  class,  interface,  or  enum  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertNoChange,  checkUserDeclarations)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertNoChange,  checkUserDeclarations)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange,    forbidChanges)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	294	None	replace
1548	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root.clone());  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root.clone());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root.clone());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root.cloneTree());    	non-compiled	[CE]  illegal  start  of  type	260	None	replace
1549	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs.clone());  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs.clone());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs.clone());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root.cloneTree());    	non-compiled	[CE]  illegal  start  of  type	260	None	replace
1550	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverseRoots(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
1551	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs);  [CE]  class,  interface,  or  enum  expected  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
1552	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverse(externs);  [CE]  illegal  start  of  type  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
1553	[BUG]  [BUGGY]  if(externs!=  null)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverse(root);  }  [CE]  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(externs!=  null)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverse(root);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(externs!=  null)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverse(root);  }	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externals.traverse(root);    	non-compiled	[CE]  	116	None	replace
1554	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverseRoots(root);  [CE]  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverseRoots(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverseRoots(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externals.traverse(root);    	non-compiled	[CE]  	116	None	replace
1555	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverse();  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverse();  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverse();	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root).traverse(externs);    	non-compiled	[CE]  illegal  start  of  type	196	None	replace
1556	[BUG]  [BUGGY]  if(checkUserDeclarations)  {  if(compiler!=  null)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  }  [CE]  class,  interface,  or  enum  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(checkUserDeclarations)  {  if(compiler!=  null)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(checkUserDeclarations)  {  if(compiler!=  null)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  }	  if(compiler!=    null)    {    new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	204	None	replace
1557	[BUG]  [BUGGY]  if(compiler!=  null)  {  compiler  =  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  }  [CE]  class,  interface,  or  enum  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(compiler!=  null)  {  compiler  =  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(compiler!=  null)  {  compiler  =  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  }	  if(compiler!=    null)    {    new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	204	None	replace
1558	[BUG]  [BUGGY]  if(checkUserDeclarations)  {  if(compiler!=  null)  {  compiler  =  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  }  [CE]  class,  interface,  or  enum  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(checkUserDeclarations)  {  if(compiler!=  null)  {  compiler  =  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(checkUserDeclarations)  {  if(compiler!=  null)  {  compiler  =  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  }	  if(compiler!=    null)    {    new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	204	None	replace
1559	[BUG]  [BUGGY]  if(compiler!=  null)  {  compiler  =  new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  }  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(compiler!=  null)  {  compiler  =  new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(compiler!=  null)  {  compiler  =  new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  }	  if(compiler!=    null)    {    new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    }    	non-compiled	[CE]  illegal  start  of  type	204	None	replace
1560	[BUG]  [BUGGY]  if(checkUserDeclarations)  {  if(compiler!=  null)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  }  [CE]  class,  interface,  or  enum  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(checkUserDeclarations)  {  if(compiler!=  null)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(checkUserDeclarations)  {  if(compiler!=  null)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  }	  if(compiler!=    null)    {    new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	204	None	replace
1561	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  this);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  this);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  this);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
1562	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  root.traverseRoots(externs);  [CE]  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  root.traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  root.traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations),    externs.traverse(root);    	non-compiled	[CE]  	75	None	replace
1563	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  externs.traverseRoots(externs);  [CE]  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  externs.traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  externs.traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations),    externs.traverse(root);    	non-compiled	[CE]  	75	None	replace
1564	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
1565	[BUG]  [BUGGY]  new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
1566	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).transverseRoots(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).transverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).transverseRoots(externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	272	None	replace
1567	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	272	None	replace
1568	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(extras,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(extras,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(extras,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	272	None	replace
1569	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  class,  interface,  or  enum  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	39	None	replace
1570	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse();  [CE]  class,  interface,  or  enum  expected  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse();  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse();	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	172	None	replace
1571	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  getOkDuplicateDeclaration());  [CE]  class,  interface,  or  enum  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  getOkDuplicateDeclaration());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  getOkDuplicateDeclaration());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	108	None	replace
1572	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  checkUserDeclarations);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  checkUserDeclarations);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	108	None	replace
1573	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  getUserDeclarations());  [CE]  class,  interface,  or  enum  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  getUserDeclarations());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  getUserDeclarations());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	108	None	replace
1574	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  checkUserDeclarations.traverseRoots(externs,  root);  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  checkUserDeclarations.traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  checkUserDeclarations.traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    checkUserDeclarations.traverse(externs,    root);    	non-compiled	[CE]  	306	None	replace
1575	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externes,  root,  false);  [CE]  class,  interface,  or  enum  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externes,  root,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externes,  root,  false);	  NodeTraversal.traverseNode(compiler,    externs,    root,    true);    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
1576	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  true,  false);  [CE]  class,  interface,  or  enum  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  true,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  true,  false);	  NodeTraversal.traverseNode(compiler,    externs,    root,    true);    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
1577	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  true,  renamer);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  true,  renamer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  true,  renamer);	  NodeTraversal.traverseNode(compiler,    externs,    root,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
1578	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  external);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  external);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  external);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    internal);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
1579	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  internals,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  internals,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  internals,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(compiler,    root,    externals);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
1580	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externals,  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externals,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  externals,  checkUserDeclarations);	  NodeTraversal.traverseRoots(compiler,    root,    externals);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
1581	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  findOnChange)).traverseRoots(externs);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  findOnChange)).traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  findOnChange)).traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    findOnChange)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
1582	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  findOnChange)).trace(externs);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  findOnChange)).trace(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  findOnChange)).trace(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    findOnChange)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
1583	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  new  DuplicateDeclarationHandler());  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  new  DuplicateDeclarationHandler());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  new  DuplicateDeclarationHandler());	  NodeTraversal.traverseConstants(compiler,    externs,    root,    this);    	non-compiled	[CE]  illegal  start  of  expression	230	None	replace
1584	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(compiler);    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
1585	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  forbidChanges);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  forbidChanges);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    null);    	non-compiled	[CE]  illegal  start  of  expression	225	None	replace
1586	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  getOkDuplicateDeclaration());  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  getOkDuplicateDeclaration());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  getOkDuplicateDeclaration());	  NodeTraversal.traverseRoots(compiler,    externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
1587	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  checkUserDeclarations),  hasOkDuplicateDeclaration);  [CE]  ';'  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  checkUserDeclarations),  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  checkUserDeclarations),  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  ';'  expected	147	None	replace
1588	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
1589	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclaration));  compiler.traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclaration));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclaration));  compiler.traverseRoots(externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
1590	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  validateUserDeclaration);  [CE]  class,  interface,  or  enum  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  validateUserDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  validateUserDeclaration);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    checkUserDeclaration);    	non-compiled	[CE]  class,  interface,  or  enum  expected	228	None	replace
1591	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  checkUserDeclarations)).traverseRoots(externs,  externals);  [CE]  class,  interface,  or  enum  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  checkUserDeclarations)).traverseRoots(externs,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  checkUserDeclarations)).traverseRoots(externs,  externals);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	138	None	replace
1592	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes,  checkUserDeclarations)).traverseRoots(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes,  checkUserDeclarations)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes,  checkUserDeclarations)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	138	None	replace
1593	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  DuplicateDeclaration());  [CE]  class,  interface,  or  enum  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  DuplicateDeclaration());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  new  DuplicateDeclaration());	  NodeTraversal.traverse(compiler,    externs,    root,    this);    	non-compiled	[CE]  class,  interface,  or  enum  expected	201	None	replace
1594	[BUG]  [BUGGY]  NodeTraversal  comp  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);  compiler.traverseRoots(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  comp  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  comp  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);  compiler.traverseRoots(externs,  root);	  NodeTraversal    comp    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	48	None	replace
1595	[BUG]  [BUGGY]  NodeTraversal  comp  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  comp  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  comp  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);	  NodeTraversal    comp    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	48	None	replace
1596	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  parent);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  parent);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    parent);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
1597	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).plot(externs,  parent);  [CE]  class,  interface,  or  enum  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).plot(externs,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).plot(externs,  parent);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    parent);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
1598	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  root);  [CE]  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root);    	non-compiled	[CE]  	275	None	replace
1599	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertNoChange),  externs);  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertNoChange),  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertNoChange),  externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root);    	non-compiled	[CE]  illegal  start  of  type	275	None	replace
1600	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(externs,  externals);  [CE]  class,  interface,  or  enum  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(externs,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(externs,  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    false)).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	170	None	replace
1601	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(externs,  externs.cloneTree());  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(externs,  externs.cloneTree());  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(externs,  externs.cloneTree());	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    false)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	170	None	replace
1602	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(externs,  internal);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(externs,  internal);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(externs,  internal);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    false)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	170	None	replace
1603	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals)).traverseRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externs)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
1604	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverseRoots(externs);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverseRoots(externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverseRoots(externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externs)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
1605	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  assertOnChange)).traverseRoots(externs);  [CE]  class,  interface,  or  enum  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  assertOnChange)).traverseRoots(externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  assertOnChange)).traverseRoots(externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externs)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
1606	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externes)).traverseRoots(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externes)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externes)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externs)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
1607	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  renamer);  [CE]  illegal  start  of  type  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  renamer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  renamer);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
1608	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  source);  [CE]  class,  interface,  or  enum  expected  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  source);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  source);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externs);    	non-compiled	[CE]  class,  interface,  or  enum  expected	142	None	replace
1609	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  t.traverseRoots(externs);  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  t.traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  t.traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    t.traverseRoots(externs);    	non-compiled	[CE]  	324	None	replace
1610	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(externs,  root));  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(externs,  root));  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(externs,  root));	  NodeTraversal.traverse(compiler,    root,    externs);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
1611	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChange)).traverseRoots(externs,  externals);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChange)).traverseRoots(externs,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChange)).traverseRoots(externs,  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertNoChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	253	None	replace
1612	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChange)).traverseRoots(externs,  externs.cloneTree());  [CE]  class,  interface,  or  enum  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChange)).traverseRoots(externs,  externs.cloneTree());  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChange)).traverseRoots(externs,  externs.cloneTree());	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertNoChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	253	None	replace
1613	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(externs,  root);  [CE]  <identifier>  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  final  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	final  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).    Traverse(externs,    root);    	non-compiled	[CE]  <identifier>  expected	222	None	replace
1614	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(null,  externs);  [CE]  class,  interface,  or  enum  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(null,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(null,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).    Traverse(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	222	None	replace
1615	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkUserDeclarations)).traverse();  [CE]  class,  interface,  or  enum  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkUserDeclarations)).traverse();  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkUserDeclarations)).traverse();	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverse();    	non-compiled	[CE]  class,  interface,  or  enum  expected	296	None	replace
1616	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs)).traverse();  [CE]  class,  interface,  or  enum  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs)).traverse();  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs)).traverse();	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverse();    	non-compiled	[CE]  class,  interface,  or  enum  expected	296	None	replace
1617	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  assertOnChange)).traverse();  [CE]  class,  interface,  or  enum  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  assertOnChange)).traverse();  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  assertOnChange)).traverse();	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverse();    	non-compiled	[CE]  class,  interface,  or  enum  expected	296	None	replace
1618	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  1)).traverseRoots(externs,  root);  [CE]  not  a  statement  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  1)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  1)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    0)).traverse(root);    	non-compiled	[CE]  not  a  statement	166	None	replace
1619	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  0)).traverseRoots(externs);  [CE]  class,  interface,  or  enum  expected  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  0)).traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  0)).traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    0)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	166	None	replace
1620	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  1)).traverseRoots(externs);  [CE]  class,  interface,  or  enum  expected  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  1)).traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  1)).traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    0)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	166	None	replace
1621	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  1)).traverse(externs);  [CE]  illegal  start  of  expression  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  1)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  1)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    0)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	166	None	replace
1622	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  verifyDeclaration);  [CE]  class,  interface,  or  enum  expected  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  verifyDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  verifyDeclaration);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  class,  interface,  or  enum  expected	104	None	replace
1623	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  hasOkDuplicateDeclaration);  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  hasOkDuplicateDeclaration);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)),    externs);    	non-compiled	[CE]  	271	None	replace
1624	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  roots);  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  roots);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  roots);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)),    externs);    	non-compiled	[CE]  	271	None	replace
1625	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)),  externs);  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)),  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)),  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)),    externs);    	non-compiled	[CE]  	271	None	replace
1626	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  renamer,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	  NodeTraversal.traverse(compiler,    externes,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	41	None	replace
1627	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root);  [CE]  class,  interface,  or  enum  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
1628	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverse(null);  [CE]  class,  interface,  or  enum  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverse(null);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverse(null);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root).traverse(externs);    	non-compiled	[CE]  class,  interface,  or  enum  expected	274	None	replace
1629	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  new  DuplicateDeclarationHandler());  [CE]  class,  interface,  or  enum  expected  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  new  DuplicateDeclarationHandler());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  new  DuplicateDeclarationHandler());	  NodeTraversal.traverseRoots(compiler,    externs,    root,    HashMap.class);    	non-compiled	[CE]  class,  interface,  or  enum  expected	307	None	replace
1630	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  DuplicateDeclarationHandler.class);  [CE]  class,  interface,  or  enum  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  DuplicateDeclarationHandler.class);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  DuplicateDeclarationHandler.class);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    HashMap.class);    	non-compiled	[CE]  class,  interface,  or  enum  expected	307	None	replace
1631	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  Collections.EMPTY_MAP);  [CE]  class,  interface,  or  enum  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  Collections.EMPTY_MAP);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  Collections.EMPTY_MAP);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    HashMap.class);    	non-compiled	[CE]  class,  interface,  or  enum  expected	307	None	replace
1632	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs);  [CE]  class,  interface,  or  enum  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	44	None	replace
1633	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)),  assertOnChange);  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)),  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)),  assertOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  	44	None	replace
1634	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseValues(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseValues(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseValues(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	44	None	replace
1635	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  root,  false);  [CE]  class,  interface,  or  enum  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  root,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externes,  root,  false);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    true);    	non-compiled	[CE]  class,  interface,  or  enum  expected	150	None	replace
1636	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  root,  false);  [CE]  class,  interface,  or  enum  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  root,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externals,  root,  false);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    true);    	non-compiled	[CE]  class,  interface,  or  enum  expected	150	None	replace
1637	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  false);  [CE]  class,  interface,  or  enum  expected  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  false);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    true);    	non-compiled	[CE]  class,  interface,  or  enum  expected	150	None	replace
1638	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).transverseRoots(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).transverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).transverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    forbidChanges);    	non-compiled	[CE]  class,  interface,  or  enum  expected	300	None	replace
1639	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(externs);  [CE]  class,  interface,  or  enum  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    false)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	102	None	replace
1640	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  true)).traverse(externs);  [CE]  class,  interface,  or  enum  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  true)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  true)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    false)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	102	None	replace
1641	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  true)).traverseRoots(externs);  [CE]  class,  interface,  or  enum  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  true)).traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  true)).traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    false)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	102	None	replace
1642	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  false)).traverse(externs);  [CE]  class,  interface,  or  enum  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  false)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  false)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    false)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	102	None	replace
1643	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externals,  root,  true);  [CE]  class,  interface,  or  enum  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externals,  root,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externals,  root,  true);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    false);    	non-compiled	[CE]  class,  interface,  or  enum  expected	154	None	replace
1644	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externes,  root,  true);  [CE]  class,  interface,  or  enum  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externes,  root,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externes,  root,  true);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    false);    	non-compiled	[CE]  class,  interface,  or  enum  expected	154	None	replace
1645	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  renamer,  true);  [CE]  class,  interface,  or  enum  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  renamer,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  renamer,  true);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    true);    	non-compiled	[CE]  class,  interface,  or  enum  expected	187	None	replace
1646	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs);  [CE]  class,  interface,  or  enum  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	177	None	replace
1647	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(null);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(null);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(null);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
1648	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals);  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals);	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
1649	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEmpty)).traverseRoots(externs);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEmpty)).traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEmpty)).traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertEmpty)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	192	None	replace
1650	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertEmpty)).traverse(externs);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertEmpty)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertEmpty)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertEmpty)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	192	None	replace
1651	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  new  NormalizeStatements());  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  new  NormalizeStatements());	  NodeTraversal.traverseRoots(compiler,    externs,    root,    this);    	non-compiled	[CE]  illegal  start  of  expression	226	None	replace
1652	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals,  root)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals,  root)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals,  root)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externs,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
1653	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes,  root)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes,  root)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes,  root)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externs,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
1654	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  root)).traverseRoots(externs,  internal);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  root)).traverseRoots(externs,  internal);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  root)).traverseRoots(externs,  internal);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externs,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
1655	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  root)).traverseRoots(externs,  externals);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  root)).traverseRoots(externs,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  root)).traverseRoots(externs,  externals);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externs,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
1656	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  root)).traverseRoots(externs);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  root)).traverseRoots(externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  root)).traverseRoots(externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externs,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
1657	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  node);  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  node);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  node);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externals,    root);    	non-compiled	[CE]  illegal  start  of  expression	317	None	replace
1658	[BUG]  [BUGGY]  new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  illegal  start  of  expression	316	None	replace
1659	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertNotNull)).traverse(externs);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertNotNull)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertNotNull)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertNotNull)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	194	None	replace
1660	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNotNull)).traverseRoots(externs);  [CE]  illegal  start  of  expression  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNotNull)).traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNotNull)).traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertNotNull)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	194	None	replace
1661	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration())).traverse(root);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration())).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration())).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    getOkDuplicateDeclaration())).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
1662	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  getOkDuplicateDeclaration())).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  getOkDuplicateDeclaration())).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  getOkDuplicateDeclaration())).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    getOkDuplicateDeclaration())).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
1663	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  getOkDuplicateDeclaration())).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  getOkDuplicateDeclaration())).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  getOkDuplicateDeclaration())).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    getOkDuplicateDeclaration())).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
1664	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  getOkDuplicateDeclaration())).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  getOkDuplicateDeclaration())).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  getOkDuplicateDeclaration())).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    getOkDuplicateDeclaration())).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
1665	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  getCheckUserDeclaration())).traverse(root);  [CE]  illegal  start  of  expression  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  getCheckUserDeclaration())).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  getCheckUserDeclaration())).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    getOkDuplicateDeclaration())).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
1666	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    false)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
1667	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  true)).traverseRoots(externs);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  true)).traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  true)).traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    false)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
1668	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  false)).traverse(root);  [CE]  illegal  start  of  expression  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  false)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  false)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    false)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
1669	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverse(externs);  [CE]  illegal  start  of  expression  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    false)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
1670	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  internal);  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  internal);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  internal);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    internal);    	non-compiled	[CE]  illegal  start  of  expression	266	None	replace
1671	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(root);  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    compiler).traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	278	None	replace
1672	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(null,  root);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(null,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(null,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    compiler).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	278	None	replace
1673	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(converter,  root);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(converter,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(converter,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    compiler).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	278	None	replace
1674	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(externs);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    compiler).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	278	None	replace
1675	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVars)).traverseRoots(externs);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVars)).traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVars)).traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertVars)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	309	None	replace
1676	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVars)).trace(externs);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVars)).trace(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVars)).trace(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertVars)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	309	None	replace
1677	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  factory);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  factory);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  factory);	  NodeTraversal.traverseNode(compiler,    externs,    root,    parent);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
1678	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(externs,  externals);  [CE]  ')'  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(externs,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(externs,  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    t.traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	314	None	replace
1679	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  t.traverseRoots(externs,  root);  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  t.traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  t.traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    t.traverseRoots(externs,    root);    	non-compiled	[CE]  ';'  expected	314	None	replace
1680	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(null,  root);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(null,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(null,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externes)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	285	None	replace
1681	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes)).traverseRoots(null,  externs);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes)).traverseRoots(null,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes)).traverseRoots(null,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externes)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	285	None	replace
1682	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes)).straverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes)).straverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes)).straverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externes)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	285	None	replace
1683	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  renamer,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  renamer,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  renamer,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(compiler,    root,    renamer);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
1684	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  renamer,  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  renamer,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  renamer,  checkUserDeclarations);	  NodeTraversal.traverseRoots(compiler,    root,    renamer);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
1685	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  illegal  start  of  expression  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseRoots(compiler,    root,    renamer);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
1686	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  renamer,  checkUserDeclaration);  [CE]  illegal  start  of  expression  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  renamer,  checkUserDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  renamer,  checkUserDeclaration);	  NodeTraversal.traverseRoots(compiler,    root,    renamer);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
1687	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(converter,  root,  renamer);  [CE]  illegal  start  of  expression  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(converter,  root,  renamer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(converter,  root,  renamer);	  NodeTraversal.traverseRoots(compiler,    root,    renamer);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
1688	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverse(root,  externs);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverse(root,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverse(root,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).straverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	223	None	replace
1689	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  renamer);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  renamer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  root,  renamer);	  NodeTraversal.traverseConstants(compiler,    root,    externs);    	non-compiled	[CE]  illegal  start  of  expression	183	None	replace
1690	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externes,  root);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externes,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externes,  root);	  NodeTraversal.traverseConstants(compiler,    root,    externs);    	non-compiled	[CE]  illegal  start  of  expression	183	None	replace
1691	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  new  NormalizeStatements());  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  root,  new  NormalizeStatements());	  NodeTraversal.traverseConstants(compiler,    root,    externs);    	non-compiled	[CE]  illegal  start  of  expression	183	None	replace
1692	[BUG]  [BUGGY]  NodeTraversal.traverseDeclarations(compiler,  externs,  root);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseDeclarations(compiler,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseDeclarations(compiler,  externs,  root);	  NodeTraversal.traverseConstants(compiler,    root,    externs);    	non-compiled	[CE]  illegal  start  of  expression	183	None	replace
1693	[BUG]  [BUGGY]  if(compiler!=  null)  {  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  }  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(compiler!=  null)  {  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  }  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(compiler!=  null)  {  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  }	  NodeTraversal    <    Node>    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
1694	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange));  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange));  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange));	  NodeTraversal    <    Node>    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
1695	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);	  NodeTraversal    <    Node>    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
1696	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  makeDeclaredNamesUnique);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  makeDeclaredNamesUnique);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  makeDeclaredNamesUnique);	  NodeTraversal.traverse(compiler,    externs,    root,    renamer);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
1697	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  renamer);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  renamer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  renamer);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    parent);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
1698	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverse(externs);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)),.traverse(externs);    	non-compiled	[CE]  illegal  start  of  expression	323	None	replace
1699	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),.traverseRoots(externs);  [CE]  ';'  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),.traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),.traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)),.traverse(externs);    	non-compiled	[CE]  ';'  expected	323	None	replace
1700	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations.traverse(externs);  [CE]  ')'  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations.traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations.traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    checkUserDeclarations.traverse(root);    	non-compiled	[CE]  ')'  expected	303	None	replace
1701	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  checkUserDeclarations.traverse(externs,  root);  [CE]  ';'  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  checkUserDeclarations.traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  checkUserDeclarations.traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    checkUserDeclarations.traverse(root);    	non-compiled	[CE]  ';'  expected	303	None	replace
1702	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs);  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(externs);    	non-compiled	[CE]  illegal  start  of  type	238	None	replace
1703	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkOkDuplicateDeclaration)).traverse(externs);  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkOkDuplicateDeclaration)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkOkDuplicateDeclaration)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(externs);    	non-compiled	[CE]  illegal  start  of  type	238	None	replace
1704	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs.cloneTree());  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs.cloneTree());  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs.cloneTree());	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	252	None	replace
1705	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  renamer);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  renamer);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  renamer);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
1706	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  false)).traverseRoots(externs,  externals);  [CE]  illegal  start  of  type  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  false)).traverseRoots(externs,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  false)).traverseRoots(externs,  externals);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root,    false)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
1707	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseGlobals(externs);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseGlobals(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseGlobals(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseGlobals(externs);    	non-compiled	[CE]  illegal  start  of  type	270	None	replace
1708	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseInternals(externs);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseInternals(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseInternals(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseGlobals(externs);    	non-compiled	[CE]  illegal  start  of  type	270	None	replace
1709	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseGlobals(externs);  [CE]  illegal  start  of  type  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseGlobals(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseGlobals(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseGlobals(externs);    	non-compiled	[CE]  illegal  start  of  type	270	None	replace
1710	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  true);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  root,  true);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    true);    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
1711	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externals,  root,  false);  [CE]  illegal  start  of  type  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externals,  root,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externals,  root,  false);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    true);    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
1712	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externes,  root,  false);  [CE]  illegal  start  of  type  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externes,  root,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externes,  root,  false);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    true);    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
1713	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(root);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(externs);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
1714	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traceValues(externs,  root);  [CE]  illegal  start  of  type  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traceValues(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traceValues(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseValues(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	293	None	replace
1715	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseValues(externs,  root);  [CE]  <identifier>  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseValues(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseValues(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseValues(externs,    root);    	non-compiled	[CE]  <identifier>  expected	293	None	replace
1716	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).traverseRoots(externs,  internal);  [CE]  <identifier>  expected  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).traverseRoots(externs,  internal);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).traverseRoots(externs,  internal);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externs.cloneTree())).traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	139	None	replace
1717	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).traverseRoots(externs,  externals);  [CE]  <identifier>  expected  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).traverseRoots(externs,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).traverseRoots(externs,  externals);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externs.cloneTree())).traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	139	None	replace
1718	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).straverseRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).straverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).straverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externs.cloneTree())).traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	139	None	replace
1719	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(externs,  internal));  [CE]  <identifier>  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(externs,  internal));  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(externs,  internal));	  NodeTraversal.traverse(compiler,    root,    internal);    	non-compiled	[CE]  <identifier>  expected	83	None	replace
1720	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkUserDeclaration)).traverseRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkUserDeclaration)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkUserDeclaration)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	131	None	replace
1721	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  verifyOnChange)).traverseRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  verifyOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  verifyOnChange)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	131	None	replace
1722	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).path(outterns);  [CE]  <identifier>  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).path(outterns);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).path(outterns);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).path(root);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
1723	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  internals.cloneTree());  [CE]  <identifier>  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  internals.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  internals.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  <identifier>  expected	218	None	replace
1724	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  interns.cloneTree());  [CE]  <identifier>  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  interns.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  interns.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  <identifier>  expected	218	None	replace
1725	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null,  externs);  [CE]  <identifier>  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null,  externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    root);    	non-compiled	[CE]  <identifier>  expected	267	None	replace
1726	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externals);  [CE]  <identifier>  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externals);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    root);    	non-compiled	[CE]  <identifier>  expected	267	None	replace
1727	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).plot(externs,  root);  [CE]  <identifier>  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).plot(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).plot(externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    root);    	non-compiled	[CE]  <identifier>  expected	267	None	replace
1728	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traceRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traceRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traceRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(extterns,    root);    	non-compiled	[CE]  <identifier>  expected	212	None	replace
1729	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(null,  externs,  root);  [CE]  <identifier>  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(null,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(null,  externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  <identifier>  expected	284	None	replace
1730	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  <identifier>  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  <identifier>  expected	284	None	replace
1731	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(null,  externs);  [CE]  <identifier>  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(null,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(null,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externs);    	non-compiled	[CE]  <identifier>  expected	136	None	replace
1732	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  source);  [CE]  <identifier>  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  source);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  source);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externs);    	non-compiled	[CE]  <identifier>  expected	136	None	replace
1733	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(root,  externs);  [CE]  illegal  start  of  type  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(root,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(root,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
1734	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  externals);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  root,  externals);	  NodeTraversal.traverseNode(compiler,    root,    externs);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
1735	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  renamer);  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  renamer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  root,  renamer);	  NodeTraversal.traverseNode(compiler,    root,    externs);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
1736	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclaration)).traverseRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclaration)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclaration)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externs)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
1737	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(null,  externs);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(null,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(null,  externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	273	None	replace
1738	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  renamer);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  renamer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  renamer);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	273	None	replace
1739	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  externes);  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  externes);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  externes);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	273	None	replace
1740	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    forbidChanges);    	non-compiled	[CE]  illegal  start  of  type	282	None	replace
1741	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  root,  forbidChanges);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  root,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  root,  forbidChanges);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    forbidChanges);    	non-compiled	[CE]  illegal  start  of  type	282	None	replace
1742	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(interns,  root,  forbidChanges);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(interns,  root,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(interns,  root,  forbidChanges);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    forbidChanges);    	non-compiled	[CE]  illegal  start  of  type	282	None	replace
1743	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).plot(root,  externs);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).plot(root,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).plot(root,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(root,    externs);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
1744	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  checkUserDeclarations);  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  checkUserDeclarations);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(root,    externs);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
1745	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).plot(externs);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).plot(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).plot(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(root,    externs);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
1746	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  <identifier>  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  final  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	final  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(root,    externs);    	non-compiled	[CE]  <identifier>  expected	121	None	replace
1747	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).straverseRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).straverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).straverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    checkUserDeclarations).traverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	312	None	replace
1748	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations).traverse(externs,  root);  [CE]  ')'  expected  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    checkUserDeclarations).traverse(externs,    root);    	non-compiled	[CE]  ')'  expected	312	None	replace
1749	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  forbidChanges).traverse(externs,  root);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  forbidChanges).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  forbidChanges).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    checkUserDeclarations).traverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	312	None	replace
1750	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).trace(externs,  root);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).trace(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).trace(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    checkUserDeclarations).traverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	312	None	replace
1751	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  illegal  start  of  type	176	None	replace
1752	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  name);  [CE]  illegal  start  of  type  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  name);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  name);	  NodeTraversal.traverseRoots(compiler,    root,    parent);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
1753	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  root,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externes,  root,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externes,  root,  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    externals,    root);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
1754	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  root,  renamer);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  root,  renamer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externals,  root,  renamer);	  NodeTraversal.traverse(compiler,    externals,    root);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
1755	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root).traverse();  [CE]  illegal  start  of  type  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root).traverse();  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root).traverse();	  NodeTraversal.traverse(compiler,    externals,    root);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
1756	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs,  externs);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs,  externs);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    false)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
1757	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  true)).traverseRoots(externs,  externs);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  true)).traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  true)).traverseRoots(externs,  externs);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    false)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
1758	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  false)).traverseRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  false)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  false)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    false)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
1759	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root,  false)).traverseRoots(externs,  assertOnChange);  [CE]  illegal  start  of  type  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root,  false)).traverseRoots(externs,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root,  false)).traverseRoots(externs,  assertOnChange);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    false)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
1760	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals)).plot(externs,  root);  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals)).plot(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals)).plot(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externals);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
1761	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internals)).plot(externs,  assertOnChange);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internals)).plot(externs,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internals)).plot(externs,  assertOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externals);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
1762	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNotChanges)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNotChanges)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNotChanges)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertNoChanges)).traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
1763	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  renamer);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  renamer);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  renamer);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
1764	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  this);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  this);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  this);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
1765	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  checkUserDeclarations);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  checkUserDeclarations);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  illegal  start  of  type	280	None	replace
1766	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  normalizeStatements());  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  normalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  normalizeStatements());	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  illegal  start  of  type	280	None	replace
1767	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  MAKE_LOCAL_NAMES_VAR_ERROR);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  MAKE_LOCAL_NAMES_VAR_ERROR);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  MAKE_LOCAL_NAMES_VAR_ERROR);	  NodeTraversal.traverseNode(compiler,    externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
1768	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).straverseRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).straverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).straverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  type	244	None	replace
1769	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traceRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traceRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traceRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  type	244	None	replace
1770	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).transverseRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).transverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).transverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  type	244	None	replace
1771	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).trace(root);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).trace(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).trace(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).trace(root);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
1772	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externs);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externes);    	non-compiled	[CE]  illegal  start  of  type	268	None	replace
1773	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler)).traverseRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
1774	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  this);  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  this);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  this);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
1775	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  nodes);  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  nodes);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  nodes);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
1776	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  false);  [CE]  illegal  start  of  type  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  renamer,  false);	  NodeTraversal.traverse(compiler,    externs,    root,    false);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
1777	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  root,  true);  [CE]  illegal  start  of  type  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externes,  root,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externes,  root,  true);	  NodeTraversal.traverse(compiler,    externs,    root,    false);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
1778	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  new  DuplicateDeclarationHandler());  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  new  DuplicateDeclarationHandler());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  new  DuplicateDeclarationHandler());	  NodeTraversal.traverseNodes(compiler,    externs,    root,    this);    	non-compiled	[CE]  illegal  start  of  type	224	None	replace
1779	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  this);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  this);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  root,  this);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    this);    	non-compiled	[CE]  illegal  start  of  type	224	None	replace
1780	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  root);  compiler.traverseRoots(externs,  root);  [CE]  ';'  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  root);  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  root);  compiler.traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root);    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  ';'  expected	232	None	replace
1781	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root);    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	232	None	replace
1782	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  checkUserDeclaration);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  checkUserDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  checkUserDeclaration);	  NodeTraversal.traverseRoots(compiler,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
1783	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  hasOkDuplicateDeclaration,  checkUserDeclarations);  [CE]  illegal  start  of  type  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  hasOkDuplicateDeclaration,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  hasOkDuplicateDeclaration,  checkUserDeclarations);	  NodeTraversal.traverseRoots(compiler,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
1784	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs).plot(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
1785	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  externs).plot(externs,  root);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  externs).plot(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  externs).plot(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs).plot(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
1786	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).plot(root,  checkUserDeclarations);  [CE]  illegal  start  of  type  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).plot(root,  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).plot(root,  checkUserDeclarations);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs).plot(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
1787	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root),  externs).plot(externs,  assertOnChange);  [CE]  illegal  start  of  type  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root),  externs).plot(externs,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root),  externs).plot(externs,  assertOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs).plot(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
1788	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traceRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traceRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traceRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	167	None	replace
1789	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).straverseRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).straverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).straverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	167	None	replace
1790	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkChanges)).traverseRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkChanges)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkChanges)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	167	None	replace
1791	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseNodes(externs,  root);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseNodes(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseNodes(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externals);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
1792	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null,  externs);  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(null,    externs);    	non-compiled	[CE]  illegal  start  of  expression	265	None	replace
1793	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).plot(null,  assertOnChange);  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).plot(null,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).plot(null,  assertOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(null,    externs);    	non-compiled	[CE]  illegal  start  of  expression	265	None	replace
1794	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  this);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  this);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  this);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
1795	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  getOkDuplicateDeclaration());  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  getOkDuplicateDeclaration());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  getOkDuplicateDeclaration());	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
1796	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  root);  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  root);	  new    NodeTraversal(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
1797	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  root);	  new    NodeTraversal(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
1798	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs,  root);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs,  root);	  new    NodeTraversal(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
1799	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  verifyUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  verifyUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  verifyUserDeclarations);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
1800	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOffset)).traverse(externs);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOffset)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOffset)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOffset)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
1801	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    assertOnChange);    	non-compiled	[CE]  illegal  start  of  expression	205	None	replace
1802	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  checkUserDeclaration);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  checkUserDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  checkUserDeclaration);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    assertOnChange);    	non-compiled	[CE]  illegal  start  of  expression	205	None	replace
1803	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(root)).traverseRoots(externs,  assertOnChange);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(root)).traverseRoots(externs,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(root)).traverseRoots(externs,  assertOnChange);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    assertOnChange);    	non-compiled	[CE]  illegal  start  of  expression	205	None	replace
1804	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  false);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  false);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  false);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    assertOnChange);    	non-compiled	[CE]  illegal  start  of  expression	205	None	replace
1805	[BUG]  [BUGGY]  new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  assertOnChange);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  assertOnChange);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    assertOnChange);    	non-compiled	[CE]  illegal  start  of  expression	205	None	replace
1806	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  exprs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  illegal  start  of  expression  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  exprs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  exprs,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseRoots(compiler,    root,    exprs);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
1807	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs.cloneTree());  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs.cloneTree());	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
1808	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals);  [CE]  illegal  start  of  expression  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
1809	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);  [CE]  illegal  start  of  expression  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
1810	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs.cloneTree(),  root);  [CE]  illegal  start  of  expression  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs.cloneTree(),  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs.cloneTree(),  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
1811	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externes);  [CE]  illegal  start  of  expression  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externes);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externes);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
1812	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  externs);  compiler.traverseRoots(externs,  root);  [CE]  ';'  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  externs);  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  externs);  compiler.traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs);    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  ';'  expected	233	None	replace
1813	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externes,  root,  true);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externes,  root,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externes,  root,  true);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    false);    	non-compiled	[CE]  illegal  start  of  expression	185	None	replace
1814	[BUG]  [BUGGY]  new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclaration);  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclaration);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	203	None	replace
1815	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  verifyUserDeclaration);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  verifyUserDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  verifyUserDeclaration);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	203	None	replace
1816	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  null);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  null);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  null);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(null,    externs);    	non-compiled	[CE]  illegal  start  of  expression	215	None	replace
1817	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  verifyUserDeclaration);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  verifyUserDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  verifyUserDeclaration);	  NodeTraversal.traverse(compiler,    externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
1818	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  this.checkUserDeclaration);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  this.checkUserDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  this.checkUserDeclaration);	  NodeTraversal.traverse(compiler,    externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
1819	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).plot(externs,  assertOnChange);  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).plot(externs,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).plot(externs,  assertOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
1820	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  checkUserDeclarations);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
1821	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs,  root,  verifyOnChange);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs,  root,  verifyOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs,  root,  verifyOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root,    assertOnChange);    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
1822	[BUG]  [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChange));  compiler.traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChange));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChange));  compiler.traverseRoots(externs,  root);	  NodeTraversal[]    t    =    new    NodeTraversal(    compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	286	None	replace
1823	[BUG]  [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVars));  compiler.traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVars));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVars));  compiler.traverseRoots(externs,  root);	  NodeTraversal[]    t    =    new    NodeTraversal(    compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	286	None	replace
1824	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  renamer).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  renamer).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  renamer).traverseRoots(externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	291	None	replace
1825	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals).traverseRoots(root);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals).traverseRoots(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals).traverseRoots(root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	291	None	replace
1826	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null,  externs);  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null,  externs);	  new    NodeTraversal(compiler,    externals,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
1827	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    externals,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
1828	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  checkUserDeclarations);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  illegal  start  of  expression	289	None	replace
1829	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).trace(externs,  root);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).trace(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).trace(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(root,    externs);    	non-compiled	[CE]  illegal  start  of  expression	221	None	replace
1830	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_VAR_ERROR)).traverseRoots(externs);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_VAR_ERROR)).traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_VAR_ERROR)).traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    FORBLOCK_VAR_ERROR)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
1831	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CATCH_BLOCK_VAR_ERROR)).traverse(externs);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CATCH_BLOCK_VAR_ERROR)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CATCH_BLOCK_VAR_ERROR)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    FORBLOCK_VAR_ERROR)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
1832	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  root,  true);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  root,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externes,  root,  true);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    false);    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
1833	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  root,  true);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  root,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externals,  root,  true);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    false);    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
1834	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root.cloneTree());  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  illegal  start  of  expression	258	None	replace
1835	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    parent);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
1836	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations.traverse(externs,  root));  [CE]  ')'  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations.traverse(externs,  root));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations.traverse(externs,  root));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations.traverse(root));    	non-compiled	[CE]  ')'  expected	114	None	replace
1837	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations.traverse(externs));  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations.traverse(externs));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations.traverse(externs));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations.traverse(root));    	non-compiled	[CE]  	114	None	replace
1838	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations.traverse(root));  [CE]  ')'  expected  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations.traverse(root));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations.traverse(root));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations.traverse(root));    	non-compiled	[CE]  ')'  expected	114	None	replace
1839	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations.traverse(root),  hasOkDuplicateDeclaration));  [CE]  illegal  start  of  expression  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations.traverse(root),  hasOkDuplicateDeclaration));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations.traverse(root),  hasOkDuplicateDeclaration));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations.traverse(root));    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
1840	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations.traverse(root),  hasOkDuplicateDeclaration);  [CE]  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations.traverse(root),  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations.traverse(root),  hasOkDuplicateDeclaration);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations.traverse(root));    	non-compiled	[CE]  	114	None	replace
1841	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  renamer);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  renamer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  renamer);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externals,    root);    	non-compiled	[CE]  illegal  start  of  expression	290	None	replace
1842	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  constantMap.traverse(externs,  root);  [CE]  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  constantMap.traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  constantMap.traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    constantMap.traverse(root);    	non-compiled	[CE]  	301	None	replace
1843	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  externals);  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  externals);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).straverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	213	None	replace
1844	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).transverseRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).transverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).transverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).straverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	213	None	replace
1845	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(null,  externs);  [CE]  illegal  start  of  type  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(null,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(null,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
1846	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  externes);  [CE]  illegal  start  of  type  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  externes);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  externes);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
1847	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  internal);  [CE]  illegal  start  of  type  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  internal);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  internal);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
1848	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkChanges)).traverseRoots(externs);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkChanges)).traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkChanges)).traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverseRoots(externs);    	non-compiled	[CE]  illegal  start  of  type	240	None	replace
1849	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs);  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverseRoots(externs);    	non-compiled	[CE]  illegal  start  of  type	240	None	replace
1850	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).straverseRoots(root);  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).straverseRoots(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).straverseRoots(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverseRoots(externs);    	non-compiled	[CE]  illegal  start  of  type	240	None	replace
1851	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkOkDuplicateDeclaration)).trace(externs,  root);  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkOkDuplicateDeclaration)).trace(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkOkDuplicateDeclaration)).trace(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).trace(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
1852	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traceRoots(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traceRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traceRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclaration)).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	168	None	replace
1853	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).straverseRoots(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).straverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).straverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclaration)).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	168	None	replace
1854	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_NAMES_UNIQUE)).traverseRoots(externs);  [CE]  class,  interface,  or  enum  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_NAMES_UNIQUE)).traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_NAMES_UNIQUE)).traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    FORBLOCK_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	164	None	replace
1855	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange),  externs.traverse(root);  [CE]  ')'  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange),  externs.traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange),  externs.traverse(root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs.traverse(root);    	non-compiled	[CE]  ')'  expected	111	None	replace
1856	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChange)).traverseRoots(externs,  root);  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChange)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChange)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)),    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	279	None	replace
1857	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).transverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).transverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).transverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	202	None	replace
1858	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	202	None	replace
1859	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeDeclarations());  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeDeclarations());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeDeclarations());	  NodeTraversal.traverse(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  illegal  start  of  expression	299	None	replace
1860	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeStatements()));  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeStatements()));  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeStatements()));	  NodeTraversal.traverse(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  ';'  expected	299	None	replace
1861	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeTicklingCallback());  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeTicklingCallback());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeTicklingCallback());	  NodeTraversal.traverse(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  illegal  start  of  expression	299	None	replace
1862	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  normalizeStatements());  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  normalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  new  normalizeStatements());	  NodeTraversal.traverse(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  illegal  start  of  expression	299	None	replace
1863	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot();  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot();  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot();	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(root);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
1864	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plotRoot(externs);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plotRoot(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plotRoot(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(root);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
1865	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plotForbidChanges(externs,  root);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plotForbidChanges(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plotForbidChanges(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(root);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
1866	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plotRoot(externs,  root);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plotRoot(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plotRoot(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(root);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
1867	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plotTicks(externs,  root);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plotTicks(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plotTicks(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(root);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
1868	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  new  MakeDeclaredNamesUnique());  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  new  MakeDeclaredNamesUnique());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  new  MakeDeclaredNamesUnique());	  NodeTraversal.traverseNodes(compiler,    externs,    root,    renamer);    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
1869	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  makeDeclaredNamesUnique);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  makeDeclaredNamesUnique);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  makeDeclaredNamesUnique);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    renamer);    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
1870	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  stateOnChange)).traverseRoots(externs);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  stateOnChange)).traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  stateOnChange)).traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    stateOnChange)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	318	None	replace
1871	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  stateOnChange)).straverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  stateOnChange)).straverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  stateOnChange)).straverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    stateOnChange)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	318	None	replace
1872	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  this,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(compiler,    root,    this);    	non-compiled	[CE]  illegal  start  of  expression	311	None	replace
1873	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  this);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  this);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  this);	  NodeTraversal.traverseRoots(compiler,    root,    this);    	non-compiled	[CE]  illegal  start  of  expression	311	None	replace
1874	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertNull)).traverse(externs);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertNull)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertNull)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertNull)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	193	None	replace
1875	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkUserDeclarations)).plot(externs,  root);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkUserDeclarations)).plot(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkUserDeclarations)).plot(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).plot(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
1876	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  checkUserDeclarations)).plot(externs,  assertOnChange);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  checkUserDeclarations)).plot(externs,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root,  checkUserDeclarations)).plot(externs,  assertOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).plot(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
1877	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  verifyUserDeclaration);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  verifyUserDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  verifyUserDeclaration);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	181	None	replace
1878	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  this.checkUserDeclaration);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  this.checkUserDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  this.checkUserDeclaration);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	181	None	replace
1879	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [CE]  not  a  statement  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);	  new    NodeTraversal(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externs);    	non-compiled	[CE]  not  a  statement	73	None	replace
1880	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs,  root);  [CE]  not  a  statement  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs,  root);	  new    NodeTraversal(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externs);    	non-compiled	[CE]  not  a  statement	73	None	replace
1881	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externals);  [CE]  not  a  statement  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externals);	  new    NodeTraversal(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externs);    	non-compiled	[CE]  not  a  statement	73	None	replace
1882	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  internals,  assertOnChange)).traverseRoots(externs,  root);  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  internals,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  internals,  assertOnChange)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externals)).traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	20	None	replace
1883	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals)).traverseRoots(externs,  externs);  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals)).traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externals)).traverseRoots(externs,  externs);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externals)).traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	20	None	replace
1884	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  new  MakeDeclaredNamesUnique());  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  new  MakeDeclaredNamesUnique());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  new  MakeDeclaredNamesUnique());	  NodeTraversal.traverseRoots(compiler,    externs,    root,    renamer);    	non-compiled	[CE]  not  a  statement	145	None	replace
1885	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  makeDeclaredNamesUnique);  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  makeDeclaredNamesUnique);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  makeDeclaredNamesUnique);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    renamer);    	non-compiled	[CE]  ';'  expected	145	None	replace
1886	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs);  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  not  a  statement	237	None	replace
1887	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter);  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(converter);    	non-compiled	[CE]  not  a  statement	264	None	replace
1888	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs);  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(converter);    	non-compiled	[CE]  ';'  expected	264	None	replace
1889	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  forbidChanges)).traverseRoots(externs,  root);  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  forbidChanges)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  forbidChanges)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    forbidChanges)).traverse(root);    	non-compiled	[CE]  not  a  statement	99	None	replace
1890	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(null);  [CE]  ';'  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(null);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(null);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    onChange)).traverse(root);    	non-compiled	[CE]  ';'  expected	297	None	replace
1891	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CheckUserDeclaration)).traverse(root);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CheckUserDeclaration)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CheckUserDeclaration)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    onChange)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	297	None	replace
1892	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
1893	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  hasOkDuplicateDeclaration)).traverse(root);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  hasOkDuplicateDeclaration)).traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  hasOkDuplicateDeclaration)).traverse(root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
1894	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traceRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traceRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traceRoots(externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	245	None	replace
1895	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).straverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).straverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).straverseRoots(externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	245	None	replace
1896	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  renamer);  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  renamer);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  renamer);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ';'  expected	245	None	replace
1897	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root,  hasOkDuplicateDeclaration);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
1898	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root);  [CE]  ';'  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externs,    root);    	non-compiled	[CE]  ';'  expected	14	None	replace
1899	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  exprs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  exprs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  exprs,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    exprs);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
1900	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  ';'  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatement(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ';'  expected	42	None	replace
1901	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  ';'  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatement(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ';'  expected	42	None	replace
1902	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(password,  externs,  root);  [CE]  ';'  expected  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(password,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(password,  externs,  root);	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatement(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  ';'  expected	42	None	replace
1903	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(node,  externs);  [CE]  illegal  start  of  expression  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(node,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(node,  externs);	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatement(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
1904	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  interns);  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  interns);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  interns);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    interns);    	non-compiled	[CE]  illegal  start  of  expression	287	None	replace
1905	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkOkDuplicateDeclaration)).traverse(externs,  root);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkOkDuplicateDeclaration)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkOkDuplicateDeclaration)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
1906	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(prototype);    	non-compiled	[CE]  illegal  start  of  expression	263	None	replace
1907	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  externs).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  externs).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  externs).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	206	None	replace
1908	[BUG]  [BUGGY]  new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	206	None	replace
1909	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(new  NormalizeStatements(compiler,  root));  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(new  NormalizeStatements(compiler,  root));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(new  NormalizeStatements(compiler,  root));	  new    NodeTraversal(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
1910	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externals).traverseRoots(externs,  root);	  NodeTraversal.traverse(compiler,    externs).traverseRoots(compiler,    root);    	non-compiled	[CE]  illegal  start  of  expression	255	None	replace
1911	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs).traceRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs).traceRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs).traceRoots(externs,  root);	  NodeTraversal.traverse(compiler,    externs).traverseRoots(compiler,    root);    	non-compiled	[CE]  illegal  start  of  expression	255	None	replace
1912	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externes).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externes).traverseRoots(externs,  root);	  NodeTraversal.traverse(compiler,    externs).traverseRoots(compiler,    root);    	non-compiled	[CE]  illegal  start  of  expression	255	None	replace
1913	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs).traverseRoots(new  NodeTraversal(compiler,  externs,  root));  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs).traverseRoots(new  NodeTraversal(compiler,  externs,  root));  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs).traverseRoots(new  NodeTraversal(compiler,  externs,  root));	  NodeTraversal.traverse(compiler,    externs).traverseRoots(compiler,    root);    	non-compiled	[CE]  not  a  statement	255	None	replace
1914	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs).traverseRoots(locale,  root);  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs).traverseRoots(locale,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs).traverseRoots(locale,  root);	  NodeTraversal.traverse(compiler,    externs).traverseRoots(compiler,    root);    	non-compiled	[CE]  not  a  statement	255	None	replace
1915	[BUG]  [BUGGY]  if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);  }  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);  }	  if(verifyOnChange)    {    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    }    	non-compiled	[CE]  not  a  statement	246	None	replace
1916	[BUG]  [BUGGY]  Preconditions.checkState(verifyOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);  }  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  Preconditions.checkState(verifyOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	Preconditions.checkState(verifyOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);  }	  if(verifyOnChange)    {    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    }    	non-compiled	[CE]  ';'  expected	246	None	replace
1917	[BUG]  [BUGGY]  Preconditions.checkArgument(verifyOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);  }  [CE]  ';'  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  Preconditions.checkArgument(verifyOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	Preconditions.checkArgument(verifyOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);  }	  if(verifyOnChange)    {    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    }    	non-compiled	[CE]  ';'  expected	246	None	replace
1918	[BUG]  [BUGGY]  if(verifyOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs);  }  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(verifyOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(verifyOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs);  }	  if(verifyOnChange)    {    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    }    	non-compiled	[CE]  not  a  statement	246	None	replace
1919	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs,  root,  hasOkDuplicateDeclaration);  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs,  root,  hasOkDuplicateDeclaration);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(externs,    externs,    root);    	non-compiled	[CE]  not  a  statement	320	None	replace
1920	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseNodes(externs);  [CE]  not  a  statement  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseNodes(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseNodes(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverse(externs);    	non-compiled	[CE]  not  a  statement	257	None	replace
1921	[BUG]  [BUGGY]  if(compiler!=  null)  {  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  }  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(compiler!=  null)  {  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  }  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(compiler!=  null)  {  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  }	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	231	None	replace
1922	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CheckUserDeclaration)).traverse(externs,  root);  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CheckUserDeclaration)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CheckUserDeclaration)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externs)).traverse(externs,    root);    	non-compiled	[CE]  not  a  statement	71	None	replace
1923	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclaration)).traverse(externs,  root);  [CE]  not  a  statement  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclaration)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclaration)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externs)).traverse(externs,    root);    	non-compiled	[CE]  not  a  statement	71	None	replace
1924	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverse(externs);  [CE]  not  a  statement  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externs)).traverse(externs,    root);    	non-compiled	[CE]  not  a  statement	71	None	replace
1925	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(root,  externs);  [CE]  not  a  statement  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(root,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(root,  externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root,    externs);    	non-compiled	[CE]  not  a  statement	178	None	replace
1926	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externals);  [CE]  not  a  statement  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externals);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root,    externs);    	non-compiled	[CE]  not  a  statement	178	None	replace
1927	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  internal);  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  internal);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  internal);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	251	None	replace
1928	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traceRoots(externs,  root);  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traceRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traceRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	251	None	replace
1929	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  renamer);  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  renamer);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  renamer);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	251	None	replace
1930	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  new  DuplicateDeclarationHandler());  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  new  DuplicateDeclarationHandler());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  new  DuplicateDeclarationHandler());	  NodeTraversal.traverseNode(compiler,    externs,    root,    this);    	non-compiled	[CE]  not  a  statement	207	None	replace
1931	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  this);  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  this);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  root,  this);	  NodeTraversal.traverseNode(compiler,    externs,    root,    this);    	non-compiled	[CE]  not  a  statement	207	None	replace
1932	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  root.traverseRoots(externs);  [CE]  ';'  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  root.traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  root.traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root.traverse(externs);    	non-compiled	[CE]  ';'  expected	113	None	replace
1933	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  verifyOnChange)).traverseRoots(externs);  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  verifyOnChange)).traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  verifyOnChange)).traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    verifyOnChange)).traverse(root);    	non-compiled	[CE]  not  a  statement	162	None	replace
1934	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkUserDeclarations)).traverse(externs);  [CE]  not  a  statement  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkUserDeclarations)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  checkUserDeclarations)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    verifyOnChange)).traverse(root);    	non-compiled	[CE]  not  a  statement	162	None	replace
1935	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null,  externs,  root);  [CE]  not  a  statement  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null,  externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null,  externs,  root);	  new    NodeTraversal(compiler,    compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externs,    root);    	non-compiled	[CE]  not  a  statement	72	None	replace
1936	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseNode(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  not  a  statement	53	None	replace
1937	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  root);  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  root);	  NodeTraversal.traverseNode(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  not  a  statement	53	None	replace
1938	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNode(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  not  a  statement	53	None	replace
1939	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  MAKE_LONG_NAMES_UNIQUE);  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  MAKE_LONG_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  MAKE_LONG_NAMES_UNIQUE);	  NodeTraversal.traverseNode(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  not  a  statement	53	None	replace
1940	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEqualsOnChange)).traverseRoots(externs,  externals);  [CE]  not  a  statement  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEqualsOnChange)).traverseRoots(externs,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEqualsOnChange)).traverseRoots(externs,  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertEqualsOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	292	None	replace
1941	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null,  externs);  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null,  externs);	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  not  a  statement	234	None	replace
1942	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  externs);  [CE]  not  a  statement  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  externs);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  not  a  statement	25	None	replace
1943	[BUG]  [BUGGY]  if(checkUserDeclarations)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  assertOnChange)).traverseRoots(externs,  root);  }  [CE]  not  a  statement  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(checkUserDeclarations)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  assertOnChange)).traverseRoots(externs,  root);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(checkUserDeclarations)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  assertOnChange)).traverseRoots(externs,  root);  }	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  not  a  statement	25	None	replace
1944	[BUG]  [BUGGY]  if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(root);  }  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(root);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(root);  }	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverse(root);    	non-compiled	[CE]  not  a  statement	159	None	replace
1945	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  forbidChanges)).traverse(externs);  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  forbidChanges)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  forbidChanges)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverse(root);    	non-compiled	[CE]  not  a  statement	159	None	replace
1946	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  parent);  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  parent);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    parent);    	non-compiled	[CE]  not  a  statement	107	None	replace
1947	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  validateOnChange);  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  validateOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  validateOnChange);	  NodeTraversal.traverse(compiler,    externs,    root,    assertOnChange);    	non-compiled	[CE]  not  a  statement	93	None	replace
1948	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  exits)).traverseRoots(externs,  root);  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  exits)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  exits)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externs)).traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	134	None	replace
1949	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  MAKE_BLOCK_VAR_ERROR);  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  MAKE_BLOCK_VAR_ERROR);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  MAKE_BLOCK_VAR_ERROR);	  NodeTraversal.traverse(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  not  a  statement	91	None	replace
1950	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  MAKE_TO_FOR);  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  MAKE_TO_FOR);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  MAKE_TO_FOR);	  NodeTraversal.traverse(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  not  a  statement	91	None	replace
1951	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  new  NormalizeStatements());  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  root,  new  NormalizeStatements());	  NodeTraversal.traverseNodes(compiler,    root,    externs);    	non-compiled	[CE]  not  a  statement	155	None	replace
1952	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  externs,  hasOkDuplicateDeclaration);  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  externs,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  root,  externs,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNodes(compiler,    root,    externs);    	non-compiled	[CE]  not  a  statement	155	None	replace
1953	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  renamer);  [CE]  not  a  statement  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  renamer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  root,  renamer);	  NodeTraversal.traverseNodes(compiler,    root,    externs);    	non-compiled	[CE]  not  a  statement	155	None	replace
1954	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  not  a  statement  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseNodes(compiler,    root,    externs);    	non-compiled	[CE]  not  a  statement	155	None	replace
1955	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs);  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  not  a  statement	36	None	replace
1956	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  checkUserDeclarationsOverVars);  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  checkUserDeclarationsOverVars);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  checkUserDeclarationsOverVars);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    assertOnChange);    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
1957	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  assertOnChange);  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  renamer,  assertOnChange);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    assertOnChange);    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
1958	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChange)).traverse(externs);  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChange)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChange)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertFalse)).traverse(externs);    	non-compiled	[CE]  not  a  statement	210	None	replace
1959	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  not  a  statement	67	None	replace
1960	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  root);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
1961	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
1962	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	67	None	replace
1963	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  enum);  [CE]  as  of  release  5,  'enum'  is  a  keyword,  and  may  not  be  used  as  an  identifier  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  enum);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  enum);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    externals,    root);    	non-compiled	[CE]  as  of  release  5,  'enum'  is  a  keyword,  and  may  not  be  used  as  an  identifier	315	None	replace
1964	[BUG]  [BUGGY]  nodeTraversal  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  nodeTraversal  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	nodeTraversal  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
1965	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(null,  externs);  [CE]  illegal  start  of  type  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(null,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(null,  externs);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
1966	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  verifyUserDeclaration);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  verifyUserDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  verifyUserDeclaration);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
1967	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  this.checkUserDeclaration);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  this.checkUserDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  this.checkUserDeclaration);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
1968	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkChanges)).traverse(externs);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkChanges)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkChanges)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverse(externs);    	non-compiled	[CE]  illegal  start  of  type	239	None	replace
1969	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).straverseRoots(externs);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).straverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).straverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverse(externs);    	non-compiled	[CE]  illegal  start  of  type	239	None	replace
1970	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externs)).traverseRoots(null,  externs);  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externs)).traverseRoots(null,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  externs)).traverseRoots(null,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange,    externs)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
1971	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    forbidChanges);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
1972	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  forbidChanges);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  forbidChanges);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    forbidChanges);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
1973	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root,  internal);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root,  internal);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root,  internal);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    internal);    	non-compiled	[CE]  illegal  start  of  type	283	None	replace
1974	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externes,  root,  true);  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externes,  root,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externes,  root,  true);	  NodeTraversal.traverseNode(compiler,    externs,    root,    false);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
1975	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externals,  root,  true);  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externals,  root,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externals,  root,  true);	  NodeTraversal.traverseNode(compiler,    externs,    root,    false);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
1976	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  makeDeclaredNamesUnique);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  makeDeclaredNamesUnique);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  makeDeclaredNamesUnique);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    renamer);    	non-compiled	[CE]  illegal  start  of  type	186	None	replace
1977	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  new  MakeDeclaredNamesUnique());  [CE]  illegal  start  of  type  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  new  MakeDeclaredNamesUnique());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  new  MakeDeclaredNamesUnique());	  NodeTraversal.traverseConstants(compiler,    externs,    root,    renamer);    	non-compiled	[CE]  illegal  start  of  type	186	None	replace
1978	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root.cloneTree());  [CE]  class,  interface,  or  enum  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root.cloneTree());  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root.cloneTree());	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externs.cloneTree());    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
1979	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).plot(externs,  externs.cloneTree());  [CE]  class,  interface,  or  enum  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).plot(externs,  externs.cloneTree());  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).plot(externs,  externs.cloneTree());	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externs.cloneTree());    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
1980	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).plot(externs,  externs.cloneTree());  [CE]  class,  interface,  or  enum  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).plot(externs,  externs.cloneTree());  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).plot(externs,  externs.cloneTree());	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externs.cloneTree());    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
1981	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseNodes(externs);  [CE]  class,  interface,  or  enum  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseNodes(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseNodes(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseValues(externs);    	non-compiled	[CE]  class,  interface,  or  enum  expected	198	None	replace
1982	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_BLOCK_VAR_ERROR);  [CE]  class,  interface,  or  enum  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_BLOCK_VAR_ERROR);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_BLOCK_VAR_ERROR);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    MAKE_LOCAL_NAMES_VAR_ERROR);    	non-compiled	[CE]  class,  interface,  or  enum  expected	308	None	replace
1983	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_VAR_ERROR,  renamer);  [CE]  class,  interface,  or  enum  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_VAR_ERROR,  renamer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_VAR_ERROR,  renamer);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    MAKE_LOCAL_NAMES_VAR_ERROR);    	non-compiled	[CE]  class,  interface,  or  enum  expected	308	None	replace
1984	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_VAR_ERROR,  true);  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_VAR_ERROR,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_VAR_ERROR,  true);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    MAKE_LOCAL_NAMES_VAR_ERROR);    	non-compiled	[CE]  illegal  start  of  type	308	None	replace
1985	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOkDuplicateDeclaration)).traverse(root);  [CE]  class,  interface,  or  enum  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOkDuplicateDeclaration)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOkDuplicateDeclaration)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkOnChange)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	replace
1986	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverse(externs);  [CE]  class,  interface,  or  enum  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkOnChange)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	replace
1987	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkVars)).traverse(root);  [CE]  class,  interface,  or  enum  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkVars)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkVars)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkOnChange)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	replace
1988	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkLocale)).traverse(root);  [CE]  class,  interface,  or  enum  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkLocale)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkLocale)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkOnChange)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	98	None	replace
1989	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  this.checkUserDeclaration);  [CE]  class,  interface,  or  enum  expected  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  this.checkUserDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  this.checkUserDeclaration);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  class,  interface,  or  enum  expected	143	None	replace
1990	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverse(externs);  [CE]  class,  interface,  or  enum  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclaration)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
1991	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(externs);  [CE]  illegal  start  of  type  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclaration)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
1992	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  root);	  new    NodeTraversal(compiler,    compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
1993	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs,  root);	  new    NodeTraversal(compiler,    compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
1994	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  enum);  [CE]  as  of  release  5,  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  enum);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  enum);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  as  of  release  5,  	236	None	replace
1995	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  interface);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  interface);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root,  interface);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	236	None	replace
1996	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externals,  root);  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externals,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externals,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  not  a  statement	236	None	replace
1997	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(outterns,  root);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(outterns,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(outterns,  root);	  NodeTraversal.traverse(compiler,    externals,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
1998	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseExterns(externs,  root);  [CE]  not  a  statement  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseExterns(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseExterns(externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  not  a  statement	180	None	replace
1999	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseNodes(externs,  root);  [CE]  not  a  statement  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseNodes(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseNodes(externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  not  a  statement	180	None	replace
2000	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traceRoot(externs);  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traceRoot(externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traceRoot(externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(root);    	non-compiled	[CE]  not  a  statement	276	None	replace
2001	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  externes);  [CE]  not  a  statement  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  externes);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  externes);	  NodeTraversal.traverse(compiler,    externes,    root);    	non-compiled	[CE]  not  a  statement	81	None	replace
2002	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  root,  renamer);  [CE]  not  a  statement  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externes,  root,  renamer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externes,  root,  renamer);	  NodeTraversal.traverse(compiler,    externes,    root);    	non-compiled	[CE]  not  a  statement	81	None	replace
2003	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);  compiler.traverseRoots(externs,  externs);  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);  compiler.traverseRoots(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);  compiler.traverseRoots(externs,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    externs);    	non-compiled	[CE]  not  a  statement	49	None	replace
2004	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs);  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).straverse(root);    	non-compiled	[CE]  not  a  statement	319	None	replace
2005	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverse(externs);  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).straverse(root);    	non-compiled	[CE]  not  a  statement	319	None	replace
2006	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)),  externs.traverse(root);  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)),  externs.traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)),  externs.traverse(root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)),    externs.traverse(root);    	non-compiled	[CE]  ';'  expected	74	None	replace
2007	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertFalse)),  externs.traverse(root);  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertFalse)),  externs.traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertFalse)),  externs.traverse(root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)),    externs.traverse(root);    	non-compiled	[CE]  ';'  expected	74	None	replace
2008	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverseRoots(externs,  externals);  [CE]  ')'  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverseRoots(externs,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverseRoots(externs,  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    constantMap.traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	304	None	replace
2009	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverseRoots(externs,  externs));  [CE]  not  a  statement  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverseRoots(externs,  externs));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverseRoots(externs,  externs));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    constantMap.traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	304	None	replace
2010	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  interns);  [CE]  not  a  statement  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  interns);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  interns);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externes);    	non-compiled	[CE]  not  a  statement	220	None	replace
2011	[BUG]  [BUGGY]  if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverse(externs,  root);  }  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverse(externs,  root);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverse(externs,  root);  }	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).straverse(externs,    root);    	non-compiled	[CE]  not  a  statement	223	None	replace
2012	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange,  forbidChanges)).traverse(externs,  root);  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange,  forbidChanges)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange,  forbidChanges)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(externs,    root);    	non-compiled	[CE]  not  a  statement	69	None	replace
2013	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(externs,  root);  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(externs,    root);    	non-compiled	[CE]  not  a  statement	69	None	replace
2014	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  forbidChanges)).traverse(externs,  root);  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  forbidChanges)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  forbidChanges)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(externs,    root);    	non-compiled	[CE]  not  a  statement	69	None	replace
2015	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs,  root);  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	47	None	replace
2016	[BUG]  [BUGGY]  if(compiler!=  null)  {  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  }  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(compiler!=  null)  {  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  }  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(compiler!=  null)  {  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  }	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	47	None	replace
2017	[BUG]  [BUGGY]  NodeTraversal  <  Node>  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	47	None	replace
2018	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externals);  [CE]  not  a  statement  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externals);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	47	None	replace
2019	[BUG]  [BUGGY]  nodeTraversal  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [CE]  not  a  statement  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  nodeTraversal  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	nodeTraversal  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	47	None	replace
2020	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  outers)).traverseRoots(externs,  root);  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  outers)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  outers)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externes)).traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	285	None	replace
2021	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  not  a  statement	316	None	replace
2022	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  forbidChanges);  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  forbidChanges);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  not  a  statement	316	None	replace
2023	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal,  checkUserDeclarations);  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal,  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal,  checkUserDeclarations);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  not  a  statement	316	None	replace
2024	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent,  checkUserDeclarations);  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent,  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent,  checkUserDeclarations);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  not  a  statement	316	None	replace
2025	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  checkUserDeclarations);  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  checkUserDeclarations);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    internal);    	non-compiled	[CE]  not  a  statement	266	None	replace
2026	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null,  internal);  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null,  internal);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null,  internal);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    internal);    	non-compiled	[CE]  not  a  statement	266	None	replace
2027	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(internal,  externs);  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(internal,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(internal,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    internal);    	non-compiled	[CE]  not  a  statement	266	None	replace
2028	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  externs,  new  normalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  externs,  new  normalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  externs,  new  normalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  not  a  statement	65	None	replace
2029	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  exprs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  exprs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  exprs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);	  new    NodeTraversal(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  not  a  statement	65	None	replace
2030	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  root);  [CE]  not  a  statement  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  root);	  new    NodeTraversal(compiler,    compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externs,    root);    	non-compiled	[CE]  not  a  statement	72	None	replace
2031	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  normalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  not  a  statement  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  normalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  compiler,  new  normalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externs,    root);    	non-compiled	[CE]  not  a  statement	72	None	replace
2032	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);  [CE]  not  a  statement  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);	  new    NodeTraversal(compiler,    compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externs,    root);    	non-compiled	[CE]  not  a  statement	72	None	replace
2033	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  constantMap.traverseRoots(externs,  root);  [CE]  ';'  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  constantMap.traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  constantMap.traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    constantMap.traverseRoots(externs,    root);    	non-compiled	[CE]  ';'  expected	304	None	replace
2034	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CheckUserDeclarations)).traverse(root);  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CheckUserDeclarations)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CheckUserDeclarations)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    onChange)).traverse(root);    	non-compiled	[CE]  not  a  statement	297	None	replace
2035	[BUG]  [BUGGY]  if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  }  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  }	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertonChange)).traverse(root);    	non-compiled	[CE]  not  a  statement	101	None	replace
2036	[BUG]  [BUGGY]  if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  }  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  }	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externs);    	non-compiled	[CE]  not  a  statement	84	None	replace
2037	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  CATCH_BLOCK_VAR_ERROR);  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  CATCH_BLOCK_VAR_ERROR);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  CATCH_BLOCK_VAR_ERROR);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  not  a  statement	182	None	replace
2038	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  MAKE_BLOCK_VAR_ERROR);  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  MAKE_BLOCK_VAR_ERROR);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  MAKE_BLOCK_VAR_ERROR);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  not  a  statement	182	None	replace
2039	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  internal,  assertOnChange);  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  internal,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  internal,  assertOnChange);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    assertOnChange);    	non-compiled	[CE]  not  a  statement	146	None	replace
2040	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  verifyOnChanges);  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  verifyOnChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  verifyOnChanges);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    assertOnChange);    	non-compiled	[CE]  not  a  statement	146	None	replace
2041	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null,  externs.cloneTree());  [CE]  not  a  statement  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null,  externs.cloneTree());  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null,  externs.cloneTree());	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externs.cloneTree());    	non-compiled	[CE]  not  a  statement	16	None	replace
2042	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root,  externals.cloneTree());  [CE]  not  a  statement  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root,  externals.cloneTree());  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root,  externals.cloneTree());	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externs.cloneTree());    	non-compiled	[CE]  not  a  statement	16	None	replace
2043	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root,  externs.cloneTree());  [CE]  not  a  statement  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root,  externs.cloneTree());  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root,  externs.cloneTree());	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externs.cloneTree());    	non-compiled	[CE]  not  a  statement	16	None	replace
2044	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  internal,  false);  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  internal,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  internal,  false);	  NodeTraversal.traverseNode(compiler,    externs,    root,    false);    	non-compiled	[CE]  not  a  statement	56	None	replace
2045	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externs,  root,  hasOkDuplicateDeclaration);  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externs,  root,  hasOkDuplicateDeclaration);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externs,    root);    	non-compiled	[CE]  not  a  statement	14	None	replace
2046	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  exprs,  parent);  [CE]  not  a  statement  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  exprs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  exprs,  parent);	  NodeTraversal.traverseRoots(compiler,    root,    parent);    	non-compiled	[CE]  not  a  statement	7	None	replace
2047	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externals);  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externals);	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  not  a  statement	234	None	replace
2048	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs,  root);  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs,  root);	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  not  a  statement	234	None	replace
2049	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  internals)).traverseRoots(externs,  externs);  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  internals)).traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  internals)).traverseRoots(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange,    externals)).traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	130	None	replace
2050	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  exprs);  [CE]  not  a  statement  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  exprs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externals,  exprs);	  NodeTraversal.traverseRoots(compiler,    root,    exprs);    	non-compiled	[CE]  not  a  statement	8	None	replace
2051	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  exprs);  [CE]  not  a  statement  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  exprs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externes,  exprs);	  NodeTraversal.traverseRoots(compiler,    root,    exprs);    	non-compiled	[CE]  not  a  statement	8	None	replace
2052	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  forbidChanges);  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  forbidChanges);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  not  a  statement	289	None	replace
2053	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  renamer,  checkUserDeclarations);  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  renamer,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  renamer,  checkUserDeclarations);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  not  a  statement	289	None	replace
2054	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent,  checkUserDeclarations);  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent,  checkUserDeclarations);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  not  a  statement	289	None	replace
2055	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  factory,  true);  [CE]  not  a  statement  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  factory,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  factory,  true);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    true);    	non-compiled	[CE]  not  a  statement	187	None	replace
2056	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  false,  null);  [CE]  not  a  statement  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  false,  null);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  false,  null);	  NodeTraversal.traverse(compiler,    externs,    root,    false);    	non-compiled	[CE]  not  a  statement	96	None	replace
2057	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  internal,  false);  [CE]  not  a  statement  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  internal,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  internal,  false);	  NodeTraversal.traverse(compiler,    externs,    root,    false);    	non-compiled	[CE]  not  a  statement	96	None	replace
2058	[BUG]  [BUGGY]  if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs);  }  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs);  }	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root,    externs);    	non-compiled	[CE]  ';'  expected	86	None	replace
2059	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  forbidChanges)).traverseRoots(externs,  root);  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  forbidChanges)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  forbidChanges)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  ';'  expected	125	None	replace
2060	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  testUserDeclarations)).traverseRoots(externs,  root);  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  testUserDeclarations)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  testUserDeclarations)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	125	None	replace
2061	[BUG]  [BUGGY]  if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root);  }  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root);  }	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(root);    	non-compiled	[CE]  illegal  start  of  type	199	None	replace
2062	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plotRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plotRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plotRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(root);    	non-compiled	[CE]  illegal  start  of  type	199	None	replace
2063	[BUG]  [BUGGY]  if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  }  [CE]  class,  interface,  or  enum  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  }	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	199	None	replace
2064	[BUG]  [BUGGY]  if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChanges)).traverseRoots(externs,  root);  }  [CE]  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChanges)).traverseRoots(externs,  root);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChanges)).traverseRoots(externs,  root);  }	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertNoChanges)).traverseRoots(externs,    externs);    	non-compiled	[CE]  	169	None	replace
2065	[BUG]  [BUGGY]  if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChanges)).traverseRoots(externs,  externs);  }  [CE]  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChanges)).traverseRoots(externs,  externs);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChanges)).traverseRoots(externs,  externs);  }	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertNoChanges)).traverseRoots(externs,    externs);    	non-compiled	[CE]  	169	None	replace
2066	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  externs,  root);  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseValues(externs,    root);    	non-compiled	[CE]  	293	None	replace
2067	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs,  interns);  [CE]  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs,  interns);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs,  interns);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  	171	None	replace
2068	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs,  externs.cloneTree());  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs,  externs.cloneTree());  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs,  externs.cloneTree());	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  	171	None	replace
2069	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  forbidChanges)).traverse(root);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  forbidChanges)).traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  forbidChanges)).traverse(root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	177	None	replace
2070	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).trace(root);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).trace(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).trace(root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	177	None	replace
2071	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse();  [CE]  illegal  start  of  type  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse();  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse();	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	177	None	replace
2072	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  externs,  checkUserDeclarations);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  externs,  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  externs,  checkUserDeclarations);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(root,    externs);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
2073	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  externs,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  externs,  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  externs,  hasOkDuplicateDeclaration);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(root,    externs);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
2074	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  MAKE_LOCAL_NAMES_UNIQUE,  externs);  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  MAKE_LOCAL_NAMES_UNIQUE,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root,  MAKE_LOCAL_NAMES_UNIQUE,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(root,    externs);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
2075	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOffset)).traverseRoots(root);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOffset)).traverseRoots(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOffset)).traverseRoots(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOffset)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	191	None	replace
2076	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOffset)).traverseValues(externs,  root);  [CE]  illegal  start  of  type  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOffset)).traverseValues(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOffset)).traverseValues(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOffset)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	191	None	replace
2077	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  stateOnChange)).traverseRoots(root);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  stateOnChange)).traverseRoots(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  stateOnChange)).traverseRoots(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    stateOnChange)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	318	None	replace
2078	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  this);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  this);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  this);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    externals,    root);    	non-compiled	[CE]  illegal  start  of  type	315	None	replace
2079	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations.traverseRoots(externs,  root));  [CE]  ')'  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations.traverseRoots(externs,  root));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations.traverseRoots(externs,  root));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations.traverse(root));    	non-compiled	[CE]  ')'  expected	114	None	replace
2080	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations.traverse(root),  false);  [CE]  ')'  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations.traverse(root),  false);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations.traverse(root),  false);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations.traverse(root));    	non-compiled	[CE]  ')'  expected	114	None	replace
2081	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations.traverse(root),  true);  [CE]  ')'  expected  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations.traverse(root),  true);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations.traverse(root),  true);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations.traverse(root));    	non-compiled	[CE]  ')'  expected	114	None	replace
2082	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  verifyOnChanges)).traverseRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  verifyOnChanges)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  verifyOnChanges)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange,    forbidChanges)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	294	None	replace
2083	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  checkUserDeclarations)).traverse(externs,  root);  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  checkUserDeclarations)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  checkUserDeclarations)).traverse(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange,    forbidChanges)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	294	None	replace
2084	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  CheckUserDeclarations)).traverse(root);  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  CheckUserDeclarations)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  CheckUserDeclarations)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange,    forbidChanges)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	294	None	replace
2085	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,)).traverse(root);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,)).traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,)).traverse(root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externals)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
2086	[BUG]  [BUGGY]  if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externals);  }  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externals);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externals);  }	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externals);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
2087	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  interns);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  interns);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  interns);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
2088	[BUG]  [BUGGY]  new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
2089	[BUG]  [BUGGY]  if(!ConVERT_WHILE_TO_FOR)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);  }  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(!ConVERT_WHILE_TO_FOR)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(!ConVERT_WHILE_TO_FOR)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);  }	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
2090	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
2091	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  checkOnChange,  forbidChanges)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  checkOnChange,  forbidChanges)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  checkOnChange,  forbidChanges)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
2092	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(root);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclaration)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
2093	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  new  NormalizeDeclarationHandler());  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  new  NormalizeDeclarationHandler());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  new  NormalizeDeclarationHandler());	  NodeTraversal.traverseRoots(compiler,    externs,    root,    HashMap.class);    	non-compiled	[CE]  illegal  start  of  expression	307	None	replace
2094	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(new  Externals,  root);  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(new  Externals,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(new  Externals,  root);	  NodeTraversal.traverse(compiler,    externes,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  	41	None	replace
2095	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  forbidChanges);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  forbidChanges);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    forbidChanges);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
2096	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    forbidChanges);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
2097	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checksUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checksUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checksUserDeclarations);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    forbidChanges);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
2098	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  verifyOnChange)).traverseRoots(externs,  externs,  root);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  verifyOnChange)).traverseRoots(externs,  externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange,  verifyOnChange)).traverseRoots(externs,  externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
2099	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  interns);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  interns);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  interns);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	267	None	replace
2100	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(converter,  externs,  root);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(converter,  externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(converter,  externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	267	None	replace
2101	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  new  NormalizeConstants());  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  new  NormalizeConstants());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  new  NormalizeConstants());	  NodeTraversal.traverseConstants(compiler,    externs,    root,    this);    	non-compiled	[CE]  illegal  start  of  expression	230	None	replace
2102	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverse(root);  [CE]  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  constantMap.traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    constantMap.traverse(root);    	non-compiled	[CE]  	301	None	replace
2103	[BUG]  [BUGGY]  if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  forbidChanges)).traverse(root);  }  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  forbidChanges)).traverse(root);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  forbidChanges)).traverse(root);  }	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    forbidChanges)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
2104	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs);    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	233	None	replace
2105	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  processDeclaration);  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  processDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  processDeclaration);	  NodeTraversal.traverseNode(compiler,    externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
2106	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse();  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse();  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse();	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(prototype);    	non-compiled	[CE]  illegal  start  of  expression	263	None	replace
2107	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(prototype);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(prototype);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).plot(prototype);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(prototype);    	non-compiled	[CE]  illegal  start  of  expression	263	None	replace
2108	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs,  root);  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	235	None	replace
2109	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(  externals);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(  externals);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs);    	non-compiled	[CE]  illegal  start  of  expression	211	None	replace
2110	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_LIST_NAMES_UNIQUE);  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_LIST_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_LIST_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  illegal  start  of  expression	288	None	replace
2111	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  illegal  start  of  expression	288	None	replace
2112	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  false,  null);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  false,  null);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  false,  null);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    false);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
2113	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  this.hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  this.hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  this.hasOkDuplicateDeclaration);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	181	None	replace
2114	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).plot(externs,  root);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).plot(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).plot(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).plot(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
2115	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).plot(externs,  root);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).plot(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).plot(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).plot(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
2116	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  externs,  forbidChanges);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  externs,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  externs,  forbidChanges);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).plot(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
2117	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  interns);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  interns);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  interns);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	273	None	replace
2118	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  renamer);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  renamer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externals,  renamer);	  NodeTraversal.traverseRoots(compiler,    root,    renamer);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
2119	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  renamer,  externs);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  renamer,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  renamer,  externs);	  NodeTraversal.traverseRoots(compiler,    root,    renamer);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
2120	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer,  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer,  checkUserDeclarations);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    renamer);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
2121	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  interns);  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  interns);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  interns);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
2122	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVars)).traverseValues(externs,  root);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVars)).traverseValues(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVars)).traverseValues(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertVars)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	309	None	replace
2123	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVars)).traverseRoots(root);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVars)).traverseRoots(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVars)).traverseRoots(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertVars)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	309	None	replace
2124	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVars)).traverse();  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVars)).traverse();  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVars)).traverse();	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertVars)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	309	None	replace
2125	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(  compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(  externals,  root);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(  compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(  externals,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(  compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(  externals,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	231	None	replace
2126	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(null,  externs);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(null,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(null,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(externs);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
2127	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),.traverseRoots(externs,  externs));  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),.traverseRoots(externs,  externs));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),.traverseRoots(externs,  externs));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	243	None	replace
2128	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  internals,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  internals,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  internals,  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    root,    externals);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
2129	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).plot(externs,  externs);  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).plot(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).plot(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
2130	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  internal);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  internal);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  internal);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(externs,    internal);    	non-compiled	[CE]  illegal  start  of  expression	321	None	replace
2131	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externs)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
2132	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeStatements(),  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeStatements(),  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeStatements(),  checkUserDeclarations);	  NodeTraversal.traverse(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  illegal  start  of  expression	299	None	replace
2133	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(new  NormalizeStatements(compiler,  assertOnChange));  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(new  NormalizeStatements(compiler,  assertOnChange));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(new  NormalizeStatements(compiler,  assertOnChange));	  new    NodeTraversal(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
2134	[BUG]  [BUGGY]  if(verifyOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  }  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(verifyOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(verifyOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  }	  if(verifyOnChange)    {    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    }    	non-compiled	[CE]  illegal  start  of  expression	246	None	replace
2135	[BUG]  [BUGGY]  process(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  process(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	process(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);	  if(verifyOnChange)    {    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    }    	non-compiled	[CE]  illegal  start  of  expression	246	None	replace
2136	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NormalizeStatementTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NormalizeStatementTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NormalizeStatementTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);	  if(verifyOnChange)    {    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    }    	non-compiled	[CE]  illegal  start  of  expression	246	None	replace
2137	[BUG]  [BUGGY]  NodeTraversal  <  Node>  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
2138	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(  compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(  externals,  root);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(  compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(  externals,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(  compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(  externals,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
2139	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  new  NormalizeStatement());  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  new  NormalizeStatement());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  new  NormalizeStatement());	  NodeTraversal.traverseNodes(compiler,    externs,    root,    t);    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
2140	[BUG]  [BUGGY]  if(checkUserDeclarations)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  }  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(checkUserDeclarations)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(checkUserDeclarations)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  }	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	203	None	replace
2141	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  root,  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  root,  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  root,  checkUserDeclarations);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  expression	203	None	replace
2142	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  externals);  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).plot(externs,  externals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externals);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
2143	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externals,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externals,  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  externals,  hasOkDuplicateDeclaration);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externals);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
2144	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  internals);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  internals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  internals);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    externals);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
2145	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);	  new    NodeTraversal(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
2146	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals);  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals);	  new    NodeTraversal(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
2147	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);	  new    NodeTraversal(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
2148	[BUG]  [BUGGY]  if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverse(root);  }  [CE]  illegal  start  of  expression  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverse(root);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverse(root);  }	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    false)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
2149	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(root);  [CE]  illegal  start  of  expression  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    false)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
2150	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false).traverseRoots(externs,  root);  [CE]  ')'  expected  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    false)).traverse(root);    	non-compiled	[CE]  ')'  expected	165	None	replace
2151	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  true)).traverseRoots(root);  [CE]  illegal  start  of  expression  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  true)).traverseRoots(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  true)).traverseRoots(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    false)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
2152	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler);	  NodeTraversal.traverseRoots(compiler,    externs);    	non-compiled	[CE]  illegal  start  of  expression	208	None	replace
2153	[BUG]  [BUGGY]  NodeTraversal.traverseAnnotations(compiler,  root);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseAnnotations(compiler,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseAnnotations(compiler,  root);	  NodeTraversal.traverseRoots(compiler,    externs);    	non-compiled	[CE]  illegal  start  of  expression	208	None	replace
2154	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externals,  forbidChanges);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externals,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externals,  forbidChanges);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  illegal  start  of  expression	247	None	replace
2155	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  internal,  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  internal,  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  internal,  checkUserDeclarations);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  illegal  start  of  expression	247	None	replace
2156	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal,  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal,  checkUserDeclarations);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
2157	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internals.cloneTree());  [CE]  not  a  statement  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internals.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internals.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs.cloneTree());    	non-compiled	[CE]  not  a  statement	216	None	replace
2158	[BUG]  [BUGGY]  nodeTraversal.traverseRoots(compiler,  externs,  hasOkDuplicateDeclaration);  [CE]  not  a  statement  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  nodeTraversal.traverseRoots(compiler,  externs,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	nodeTraversal.traverseRoots(compiler,  externs,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(compiler,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  not  a  statement	2	None	replace
2159	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEmpty)).traverseRoots(root);  [CE]  not  a  statement  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEmpty)).traverseRoots(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEmpty)).traverseRoots(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertEmpty)).traverse(root);    	non-compiled	[CE]  not  a  statement	192	None	replace
2160	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  forbidChanges)).trace(root);  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  forbidChanges)).trace(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  forbidChanges)).trace(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).trace(root);    	non-compiled	[CE]  not  a  statement	62	None	replace
2161	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBEEN_LOCAL_NAMES_UNIQUE)).trace(root);  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBEEN_LOCAL_NAMES_UNIQUE)).trace(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBEEN_LOCAL_NAMES_UNIQUE)).trace(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).trace(root);    	non-compiled	[CE]  not  a  statement	62	None	replace
2162	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).trace();  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).trace();  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).trace();	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).trace(root);    	non-compiled	[CE]  not  a  statement	62	None	replace
2163	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  onChange)).trace(root);  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  onChange)).trace(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  onChange)).trace(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).trace(root);    	non-compiled	[CE]  not  a  statement	62	None	replace
2164	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).trace(externs);  [CE]  not  a  statement  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).trace(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).trace(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).trace(root);    	non-compiled	[CE]  not  a  statement	62	None	replace
2165	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  exprs);  [CE]  not  a  statement  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  exprs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  exprs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root,    externs);    	non-compiled	[CE]  not  a  statement	178	None	replace
2166	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(  externals,  root);  [CE]  not  a  statement  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(  externals,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(  externals,  root);	  NodeTraversal    <    Node>    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	50	None	replace
2167	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(  externes,  root);  [CE]  not  a  statement  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(  externes,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(  externes,  root);	  NodeTraversal    <    Node>    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	50	None	replace
2168	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root.cloneTree(),  hasOkDuplicateDeclaration);  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root.cloneTree(),  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root.cloneTree(),  hasOkDuplicateDeclaration);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root.cloneTree());    	non-compiled	[CE]  not  a  statement	260	None	replace
2169	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externes,  root.cloneTree());  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externes,  root.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externes,  root.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root.cloneTree());    	non-compiled	[CE]  not  a  statement	260	None	replace
2170	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CheckUserDeclarations)).traverseRoots(externs,  root);  [CE]  not  a  statement  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CheckUserDeclarations)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CheckUserDeclarations)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	298	None	replace
2171	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverseRoots(externs,  externs);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverseRoots(externs,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverseRoots(externs,    root);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	298	None	replace
2172	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_VAR_ERROR)).traverseRoots(root);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_VAR_ERROR)).traverseRoots(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_VAR_ERROR)).traverseRoots(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    FORBLOCK_VAR_ERROR)).traverse(root);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	160	None	replace
2173	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CATCH_BLOCK_VAR_ERROR)).traverseRoots(externs,  root);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CATCH_BLOCK_VAR_ERROR)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CATCH_BLOCK_VAR_ERROR)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    FORBLOCK_VAR_ERROR)).traverse(root);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	160	None	replace
2174	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_VAR_ERROR),.traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_VAR_ERROR),.traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_VAR_ERROR),.traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    FORBLOCK_VAR_ERROR)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
2175	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  false,  hasOkDuplicateDeclaration);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  false,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  false,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	185	None	replace
2176	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  false,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  false,  null);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  false,  null);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	185	None	replace
2177	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(externs,  externs));  [CE]  invalid  method  declaration;  return  type  required  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(externs,  externs));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(externs,  externs));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    t.traverseRoots(externs,    root);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	314	None	replace
2178	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root);  [CE]  invalid  method  declaration;  return  type  required  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root);	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	172	None	replace
2179	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseExterns(externs);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseExterns(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseExterns(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertFalse)).traverse(externs);    	non-compiled	[CE]  illegal  start  of  type	210	None	replace
2180	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertUnique)).traverse(externs);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertUnique)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertUnique)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertFalse)).traverse(externs);    	non-compiled	[CE]  illegal  start  of  type	210	None	replace
2181	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CheckUserDeclaration)).traverseRoots(externs,  root);  [CE]  invalid  method  declaration;  return  type  required  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CheckUserDeclaration)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CheckUserDeclaration)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externs)).traverseRoots(externs,    root);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
2182	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChanges)).traverseRoots(externs,  root);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChanges)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChanges)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externs)).traverseRoots(externs,    root);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
2183	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CheckUserDeclarations)).traverseRoots(externs,  root);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CheckUserDeclarations)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CheckUserDeclarations)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externs)).traverseRoots(externs,    root);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
2184	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBITS)).traverseRoots(externs,  root);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBITS)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBITS)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    FORbidChanges)).traverse(root);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	161	None	replace
2185	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORbidChanges)).traverseRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORbidChanges)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORbidChanges)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    FORbidChanges)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
2186	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBEEN_LOCAL_NAMES)).traverse(root);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBEEN_LOCAL_NAMES)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBEEN_LOCAL_NAMES)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    FORbidChanges)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
2187	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBIGDECIMAL_NAMES)).traverse(root);  [CE]  illegal  start  of  type  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBIGDECIMAL_NAMES)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBIGDECIMAL_NAMES)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    FORbidChanges)).traverse(root);    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
2188	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  renamer,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  renamer,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  renamer,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    renamer);    	non-compiled	[CE]  illegal  start  of  type	156	None	replace
2189	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  forbidChanges);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  forbidChanges);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    assertOnChange);    	non-compiled	[CE]  illegal  start  of  type	205	None	replace
2190	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  assertOnChange);  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  assertOnChange);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    assertOnChange);    	non-compiled	[CE]  illegal  start  of  type	205	None	replace
2191	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  internal);  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  internal);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  internal);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    assertOnChange);    	non-compiled	[CE]  illegal  start  of  type	205	None	replace
2192	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  false,  hasOkDuplicateDeclaration);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  false,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  false,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    false);    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
2193	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  false,  compiler);  [CE]  illegal  start  of  type  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  false,  compiler);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  false,  compiler);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    false);    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
2194	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  false,  null);  [CE]  illegal  start  of  type  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  false,  null);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  false,  null);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    false);    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
2195	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).traverseRoots(externs,  externals,  root);  [CE]  illegal  start  of  type  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).traverseRoots(externs,  externals,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).traverseRoots(externs,  externals,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externs.cloneTree())).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
2196	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root.cloneTree())).traverseRoots(externs,  externs);  [CE]  illegal  start  of  type  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root.cloneTree())).traverseRoots(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root.cloneTree())).traverseRoots(externs,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externs.cloneTree())).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
2197	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  internals)).traverseRoots(externs,  root);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  internals)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  internals)).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externals)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
2198	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(Externs,  root);  [CE]  illegal  start  of  type  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(Externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(Externs,  root);	  NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatement(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
2199	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),.traverseRoots(externs,  root);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),.traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),.traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations),    externs.traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
2200	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  t.traverseRoots(externs,  root);  [CE]  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  t.traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  t.traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations),    externs.traverse(root);    	non-compiled	[CE]  	75	None	replace
2201	[BUG]  [BUGGY]  if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  parent);  }  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  parent);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  parent);  }	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    parent);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
2202	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  externs,  true);  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  externs,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  root,  externs,  true);	  NodeTraversal.traverseNode(compiler,    externs,    root,    true);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
2203	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  false);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  false);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
2204	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);	  new    NodeTraversal(compiler,    compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
2205	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  new  NormalizeStatements());  [CE]  illegal  start  of  type  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  new  NormalizeStatements());	  NodeTraversal.traverseRoots(compiler,    root,    externs);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
2206	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  getCheckUserDeclarations())).traverse(root);  [CE]  class,  interface,  or  enum  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  getCheckUserDeclarations())).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  getCheckUserDeclarations())).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    getOkDuplicateDeclaration())).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	163	None	replace
2207	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations  &&  getOkDuplicateDeclaration())).traverse(root);  [CE]  class,  interface,  or  enum  expected  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations  &&  getOkDuplicateDeclaration())).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations  &&  getOkDuplicateDeclaration())).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    getOkDuplicateDeclaration())).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	163	None	replace
2208	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations())).traverseRoots(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations())).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations())).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    getOkDuplicateDeclaration())).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	163	None	replace
2209	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations())).traverse(externs);  [CE]  class,  interface,  or  enum  expected  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations())).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations())).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    getOkDuplicateDeclaration())).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	163	None	replace
2210	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  getOkDuplicateDeclaration())).traverseRoots(externs);  [CE]  class,  interface,  or  enum  expected  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  getOkDuplicateDeclaration())).traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  getOkDuplicateDeclaration())).traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    getOkDuplicateDeclaration())).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	163	None	replace
2211	[BUG]  [BUGGY]  if(!ConVERT_WHILE_TO_FOR)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  }  [CE]  class,  interface,  or  enum  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(!ConVERT_WHILE_TO_FOR)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(!ConVERT_WHILE_TO_FOR)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  }	  if(compiler!=    null)    {    new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	204	None	replace
2212	[BUG]  [BUGGY]  if(compiler  ==  null)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  }  [CE]  class,  interface,  or  enum  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(compiler  ==  null)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(compiler  ==  null)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  }	  if(compiler!=    null)    {    new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	204	None	replace
2213	[BUG]  [BUGGY]  if(compiler!=  null)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  }  [CE]  class,  interface,  or  enum  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(compiler!=  null)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(compiler!=  null)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  }	  if(compiler!=    null)    {    new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	204	None	replace
2214	[BUG]  [BUGGY]  if(compiler!=  null)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal);  }  [CE]  class,  interface,  or  enum  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(compiler!=  null)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(compiler!=  null)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal);  }	  if(compiler!=    null)    {    new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	204	None	replace
2215	[BUG]  [BUGGY]  if(compiler!=  null)  {  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  }  [CE]  class,  interface,  or  enum  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(compiler!=  null)  {  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  }  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(compiler!=  null)  {  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  }	  NodeTraversal[]    t    =    new    NodeTraversal(    compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	286	None	replace
2216	[BUG]  [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler.traverseRoots(externs,  root);  [CE]  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler.traverseRoots(externs,  root);	  NodeTraversal[]    t    =    new    NodeTraversal(    compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  	286	None	replace
2217	[BUG]  [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externals);  [CE]  class,  interface,  or  enum  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externals);	  NodeTraversal[]    t    =    new    NodeTraversal(    compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	286	None	replace
2218	[BUG]  [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  compiler.traverseRoots(externs,  root);  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  compiler.traverseRoots(externs,  root);	  NodeTraversal[]    t    =    new    NodeTraversal(    compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  	286	None	replace
2219	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  checkUserDeclarations);  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  checkUserDeclarations);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)),    externs);    	non-compiled	[CE]  	271	None	replace
2220	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  forbidChanges);  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  forbidChanges);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)),    externs);    	non-compiled	[CE]  	271	None	replace
2221	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  Root);  [CE]  class,  interface,  or  enum  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  Root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  Root);	  NodeTraversal.traverseRoots(compiler,    externs,    Root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	310	None	replace
2222	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs.clone());  [CE]  class,  interface,  or  enum  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs.clone());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs.clone());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  class,  interface,  or  enum  expected	218	None	replace
2223	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  externals.traverseRoots(externs,  root);  [CE]  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  externals.traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  externals.traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externals.traverse(root);    	non-compiled	[CE]  	116	None	replace
2224	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(root,  checkUserDeclarations);  [CE]  class,  interface,  or  enum  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(root,  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(root,  checkUserDeclarations);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(root,    externs);    	non-compiled	[CE]  class,  interface,  or  enum  expected	221	None	replace
2225	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(root,    externs);    	non-compiled	[CE]  class,  interface,  or  enum  expected	221	None	replace
2226	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  internal).traverseRoots(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  internal).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  internal).traverseRoots(externs,  root);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	206	None	replace
2227	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(externs,  internal);  [CE]  <identifier>  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(externs,  internal);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(externs,  internal);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs).traverseRoots(externs,    root);    	non-compiled	[CE]  <identifier>  expected	206	None	replace
2228	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_DUPLICATE_NAMES_UNIQUE);  [CE]  <identifier>  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_DUPLICATE_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_DUPLICATE_NAMES_UNIQUE);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  <identifier>  expected	144	None	replace
2229	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange,  verifyOnChange)).traverseRoots(externs,  root);  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange,  verifyOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange,  verifyOnChange)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    verifyOnChange)).traverse(root);    	non-compiled	[CE]  not  a  statement	162	None	replace
2230	[BUG]  [BUGGY]  if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).traverse(root);  }  [CE]  unclosed  comment  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).traverse(root);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).traverse(root);  }	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    verifyOnChange)).traverse(root);    	non-compiled	[CE]  unclosed  comment	162	None	replace
2231	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).traverseRoots(externs);  [CE]  not  a  statement  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    verifyOnChange)).traverse(root);    	non-compiled	[CE]  not  a  statement	162	None	replace
2232	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverseRoots(externs);  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(externs);    	non-compiled	[CE]  not  a  statement	238	None	replace
2233	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange,  forbidChanges)).traverse(externs);  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange,  forbidChanges)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange,  forbidChanges)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(externs);    	non-compiled	[CE]  not  a  statement	238	None	replace
2234	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(null);  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(null);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(null);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(externs);    	non-compiled	[CE]  not  a  statement	238	None	replace
2235	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  forbidChanges)).traverse(externs);  [CE]  not  a  statement  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  forbidChanges)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  forbidChanges)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(externs);    	non-compiled	[CE]  not  a  statement	238	None	replace
2236	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations.traverse(root,  forbidChanges);  [CE]  ')'  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations.traverse(root,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations.traverse(root,  forbidChanges);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    checkUserDeclarations.traverse(root);    	non-compiled	[CE]  ')'  expected	303	None	replace
2237	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  checkUserDeclarations.traverse(root);  [CE]  ';'  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  checkUserDeclarations.traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  checkUserDeclarations.traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    checkUserDeclarations.traverse(root);    	non-compiled	[CE]  ';'  expected	303	None	replace
2238	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs,  root,  checkUserDeclarations);  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs,  root,  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs,  root,  checkUserDeclarations);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  ';'  expected	127	None	replace
2239	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs,  root,  hasOkDuplicateDeclaration);  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  externs,  root,  hasOkDuplicateDeclaration);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  ';'  expected	127	None	replace
2240	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals.cloneTree());  [CE]  ';'  expected  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals.cloneTree());  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals.cloneTree());	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  ';'  expected	123	None	replace
2241	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs)).traverseRoots(root);  [CE]  ';'  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs)).traverseRoots(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  externs)).traverseRoots(root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externs)).traverse(root);    	non-compiled	[CE]  ';'  expected	28	None	replace
2242	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  externs.cloneTree());  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  externs.cloneTree());  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  externs.cloneTree());	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,    root);    	non-compiled	[CE]  ';'  expected	251	None	replace
2243	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  interns);  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  interns);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,  interns);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(externs,    root);    	non-compiled	[CE]  not  a  statement	251	None	replace
2244	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  assertOnChange);  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  renamer,  assertOnChange);	  NodeTraversal.traverse(compiler,    externs,    root,    assertOnChange);    	non-compiled	[CE]  not  a  statement	93	None	replace
2245	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  getOkDuplicateDeclaration());  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  getOkDuplicateDeclaration());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  getOkDuplicateDeclaration());	  NodeTraversal.traverse(compiler,    externs,    root,    assertOnChange);    	non-compiled	[CE]  not  a  statement	93	None	replace
2246	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  false);  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  false);	  NodeTraversal.traverseNode(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  not  a  statement	53	None	replace
2247	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  true);  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  true);	  NodeTraversal.traverseNode(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  not  a  statement	53	None	replace
2248	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  getOkDuplicateDeclaration());  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  getOkDuplicateDeclaration());  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  getOkDuplicateDeclaration());	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  not  a  statement	126	None	replace
2249	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  testOnChange)).traverse(externs);  [CE]  not  a  statement  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  testOnChange)).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  testOnChange)).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverse(externs);    	non-compiled	[CE]  not  a  statement	257	None	replace
2250	[BUG]  [BUGGY]  if(verifyOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverse(externs);  }  else  {  hasOkDuplicateDeclaration  =  true;  }  [CE]  not  a  statement  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(verifyOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverse(externs);  }  else  {  hasOkDuplicateDeclaration  =  true;  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(verifyOnChange)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverse(externs);  }  else  {  hasOkDuplicateDeclaration  =  true;  }	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverse(externs);    	non-compiled	[CE]  not  a  statement	257	None	replace
2251	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(root);  [CE]  not  a  statement  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverse(externs);    	non-compiled	[CE]  not  a  statement	257	None	replace
2252	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  illegal  start  of  expression	269	None	replace
2253	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverseRoots(externs,  root);  [CE]  ')'  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverseRoots(externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs.traverse(root);    	non-compiled	[CE]  ')'  expected	111	None	replace
2254	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent,  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent,  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent,  checkUserDeclarations);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    parent);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
2255	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseValues(root);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseValues(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE)).traverseValues(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
2256	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange,  forbidChanges)).traverse(root,  externs);  [CE]  <identifier>  expected  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange,  forbidChanges)).traverse(root,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange,  forbidChanges)).traverse(root,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root,    externs);    	non-compiled	[CE]  <identifier>  expected	313	None	replace
2257	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(root,  externs);  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(root,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverse(root,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root,    externs);    	non-compiled	[CE]  ';'  expected	313	None	replace
2258	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  node);  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  node);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  node);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  illegal  start  of  expression	256	None	replace
2259	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclarations);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclarations);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root,    forbidChanges);    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
2260	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  CATCH_BLOCK_VAR_ERROR);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  CATCH_BLOCK_VAR_ERROR);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  CATCH_BLOCK_VAR_ERROR);	  NodeTraversal.traverse(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
2261	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(root);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverseRoots(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	237	None	replace
2262	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverseValues(externs,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverseValues(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverseValues(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	237	None	replace
2263	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverse();  [CE]  ';'  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverse();  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverse();	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  ';'  expected	237	None	replace
2264	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  checkUserDeclarations);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  renamer,  checkUserDeclarations);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
2265	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  internal,  checkUserDeclarations);  [CE]  class,  interface,  or  enum  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  internal,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  internal,  checkUserDeclarations);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  class,  interface,  or  enum  expected	147	None	replace
2266	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CheckUserDeclarations)).traverse();  [CE]  ';'  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CheckUserDeclarations)).traverse();  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  CheckUserDeclarations)).traverse();	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverse();    	non-compiled	[CE]  ';'  expected	296	None	replace
2267	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  hasOkDuplicateDeclaration)).traverse();  [CE]  ';'  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  hasOkDuplicateDeclaration)).traverse();  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  hasOkDuplicateDeclaration)).traverse();	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverse();    	non-compiled	[CE]  ';'  expected	296	None	replace
2268	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseForbidChanges();  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseForbidChanges();  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseForbidChanges();	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    forbidChanges)).traverse();    	non-compiled	[CE]  illegal  start  of  expression	296	None	replace
2269	[BUG]  [BUGGY]  if(checkUserDeclarations)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs,  root);  }  [CE]  class,  interface,  or  enum  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(checkUserDeclarations)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs,  root);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(checkUserDeclarations)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverseRoots(externs,  root);  }	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    false)).traverseRoots(externs,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
2270	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  hasOkDuplicateDeclaration);  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  renamer,  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  ';'  expected	248	None	replace
2271	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());	  NodeTraversal.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  ';'  expected	248	None	replace
2272	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  new  MakeDeclaredNamesUnique());  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  new  MakeDeclaredNamesUnique());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  renamer,  new  MakeDeclaredNamesUnique());	  NodeTraversal.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  ';'  expected	248	None	replace
2273	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs,  enum);  [CE]  as  of  release  5,  'enum'  is  a  keyword,  and  may  not  be  used  as  an  identifier  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs,  enum);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs,  enum);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  as  of  release  5,  'enum'  is  a  keyword,  and  may  not  be  used  as  an  identifier	236	None	replace
2274	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),.traverseRoots(externs);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),.traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),.traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)),.traverse(externs);    	non-compiled	[CE]  illegal  start  of  expression	323	None	replace
2275	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_NAMES_UNIQUE)).traverseRoots(root);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_NAMES_UNIQUE)).traverseRoots(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBLOCK_NAMES_UNIQUE)).traverseRoots(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    FORBLOCK_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
2276	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  TREE_LOCAL_NAMES_UNIQUE)).traverse(root);  [CE]  class,  interface,  or  enum  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  TREE_LOCAL_NAMES_UNIQUE)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  TREE_LOCAL_NAMES_UNIQUE)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    FORBLOCK_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	164	None	replace
2277	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEquals)).traverseRoots(root);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEquals)).traverseRoots(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEquals)).traverseRoots(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertEquals)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	195	None	replace
2278	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  externs.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  externs.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  externs.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	258	None	replace
2279	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  externals.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  externals.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  externals.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	258	None	replace
2280	[BUG]  [BUGGY]  if(checkUserDeclarations)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  assertOnChange)).traverseRoots(externs,  externs);  }  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(checkUserDeclarations)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  assertOnChange)).traverseRoots(externs,  externs);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(checkUserDeclarations)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  assertOnChange)).traverseRoots(externs,  externs);  }	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
2281	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverseRoots(externs,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  root,  assertOnChange)).traverseRoots(externs,  externs);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
2282	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  assertOnChange)).traverseRoots(externs,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  assertOnChange)).traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations,  assertOnChange)).traverseRoots(externs,  externs);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
2283	[BUG]  [BUGGY]  new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverseRoots(externs,  externs);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
2284	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).trace(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).trace(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).trace(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).trace(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	87	None	replace
2285	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  forbidChanges)).trace(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  forbidChanges)).trace(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  forbidChanges)).trace(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).trace(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	87	None	replace
2286	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange,  forbidChanges)).trace(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange,  forbidChanges)).trace(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkOnChange,  forbidChanges)).trace(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).trace(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	87	None	replace
2287	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(internal,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(internal,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(internal,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    internal);    	non-compiled	[CE]  reached  end  of  file  while  parsing	122	None	replace
2288	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  intern);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  intern);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  intern);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    internal);    	non-compiled	[CE]  reached  end  of  file  while  parsing	122	None	replace
2289	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  checkUserDeclarations,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  checkUserDeclarations,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  checkUserDeclarations,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	67	None	replace
2290	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  exprs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  exprs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  exprs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	67	None	replace
2291	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  internalRoots,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  internalRoots,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  internalRoots,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	67	None	replace
2292	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  false,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  false,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  false,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	67	None	replace
2293	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(externs,  externs.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(externs,  externs.cloneTree());  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(externs,  externs.cloneTree());	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclaration)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	168	None	replace
2294	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(externs,  internal);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(externs,  internal);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(externs,  internal);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclaration)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	168	None	replace
2295	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(externs,  externals,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(externs,  externals,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclaration)).traverseRoots(externs,  externals,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    checkUserDeclaration)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	168	None	replace
2296	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  2)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  2)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  2)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    0)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	166	None	replace
2297	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  internal);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  internal);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  internal);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
2298	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  nodes);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  nodes);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  nodes);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
2299	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(constantMap,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(constantMap,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(constantMap,  externs,  root);	  NodeTraversal.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	209	None	replace
2300	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(converters,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(converters,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(converters,  externs,  root);	  NodeTraversal.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	209	None	replace
2301	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  exits,  root)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  exits,  root)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  exits,  root)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externs,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	135	None	replace
2302	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  exprs,  root)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  exprs,  root)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  exprs,  root)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externs,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	135	None	replace
2303	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  assertOnChange);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  assertOnChange);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root,    assertOnChange);    	non-compiled	[CE]  reached  end  of  file  while  parsing	128	None	replace
2304	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  method);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  method);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  method);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	replace
2305	[BUG]  [BUGGY]  if(checkUserDeclarations)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  }  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(checkUserDeclarations)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(checkUserDeclarations)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  }	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	202	None	replace
2306	[BUG]  [BUGGY]  if(checkUserDeclarations)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  }  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(checkUserDeclarations)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(checkUserDeclarations)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  }	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	202	None	replace
2307	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  renamer,  checkUserDeclarations);	  NodeTraversal.traverse(compiler,    externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  reached  end  of  file  while  parsing	92	None	replace
2308	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_VAR_ERROR,  forbidChanges);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_VAR_ERROR,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_VAR_ERROR,  forbidChanges);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    MAKE_LOCAL_NAMES_VAR_ERROR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	308	None	replace
2309	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_VAR_ERROR,  isStatement);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_VAR_ERROR,  isStatement);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_VAR_ERROR,  isStatement);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    MAKE_LOCAL_NAMES_VAR_ERROR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	308	None	replace
2310	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse();  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse();  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse();	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertNoChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	190	None	replace
2311	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  interns);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  interns);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  interns);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    verifyOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	245	None	replace
2312	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverse();  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverse();  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverse();	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	274	None	replace
2313	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs).traverseRoots(externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	274	None	replace
2314	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals).traverse();  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals).traverse();  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals).traverse();	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	274	None	replace
2315	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(root);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverseRoots(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    false)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	102	None	replace
2316	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
2317	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  onChange)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  onChange)).traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  onChange)).traverse(root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
2318	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals,  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals,  hasOkDuplicateDeclaration);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externals);    	non-compiled	[CE]  reached  end  of  file  while  parsing	197	None	replace
2319	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals,  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals,  checkUserDeclarations);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externals);    	non-compiled	[CE]  reached  end  of  file  while  parsing	197	None	replace
2320	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  findOnChange)).plot(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  findOnChange)).plot(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  findOnChange)).plot(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    findOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	100	None	replace
2321	[BUG]  [BUGGY]  if(checkUserDeclarations)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);  }  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(checkUserDeclarations)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(checkUserDeclarations)  {  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);  }	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    forbidChanges);    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
2322	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checksUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checksUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checksUserDeclarations);	  new    NormalizeStatements(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root,    forbidChanges);    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
2323	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  normalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  normalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  normalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	180	None	replace
2324	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  exprs)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  exprs)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  exprs)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	252	None	replace
2325	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOffChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOffChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOffChange)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	252	None	replace
2326	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs,  externals);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	291	None	replace
2327	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs,  internal);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs,  internal);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoots(externs,  internal);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	291	None	replace
2328	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null,  externs,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null,  externs,  parent);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null,  externs,  parent);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    parent);    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
2329	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  parent,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  parent,  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  parent,  hasOkDuplicateDeclaration);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    parent);    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
2330	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(parent,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(parent,  externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(parent,  externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(externs,    parent);    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
2331	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  TraverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  TraverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  TraverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).    Traverse(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	222	None	replace
2332	[BUG]  [BUGGY]  if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(externs,  root);  }  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(externs,  root);  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).  Traverse(externs,  root);  }	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).    Traverse(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	222	None	replace
2333	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  interns);  [CE]  reached  end  of  file  while  parsing  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  interns);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  interns);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	142	None	replace
2334	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals).traverse();  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals).traverse();  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals).traverse();	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	196	None	replace
2335	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  internal).traverse(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  internal).traverse(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  internal).traverse(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    root).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	196	None	replace
2336	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  externs.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  externs.cloneTree());  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  externs.cloneTree());	  new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	322	None	replace
2337	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  interns);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  interns);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  interns);	  new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	322	None	replace
2338	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  root,  new  NormalizeStatements());	  NodeTraversal.traverseNode(compiler,    root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	55	None	replace
2339	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  externs,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  externs,  renamer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  root,  externs,  renamer);	  NodeTraversal.traverseNode(compiler,    root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	55	None	replace
2340	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  externs,  MAKE_LOCAL_NAMES_VAR);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  externs,  MAKE_LOCAL_NAMES_VAR);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  root,  externs,  MAKE_LOCAL_NAMES_VAR);	  NodeTraversal.traverseNode(compiler,    root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	55	None	replace
2341	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  externs,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  externs,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  root,  externs,  false);	  NodeTraversal.traverseNode(compiler,    root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	55	None	replace
2342	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  root)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    externs)).traverse(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	71	None	replace
2343	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null,  externs,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null,  externs,  checkUserDeclarations);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null,  externs,  checkUserDeclarations);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(null,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	265	None	replace
2344	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null,  externs,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null,  externs,  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null,  externs,  hasOkDuplicateDeclaration);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(null,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	265	None	replace
2345	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(null,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).plot(null,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	265	None	replace
2346	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  internals,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  internals,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  internals,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    externals,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	replace
2347	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	33	None	replace
2348	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  forbidChanges);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  forbidChanges);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	33	None	replace
2349	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  MAKE_BLOCK_VAR_ERROR);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  MAKE_BLOCK_VAR_ERROR);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  MAKE_BLOCK_VAR_ERROR);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	152	None	replace
2350	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  MAKE_DUPLICATE_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  MAKE_DUPLICATE_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  MAKE_DUPLICATE_NAMES_UNIQUE);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	152	None	replace
2351	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  MAKE_LIST_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  MAKE_LIST_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  MAKE_LIST_NAMES_UNIQUE);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	152	None	replace
2352	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  new  NormalizeStatement());  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  new  NormalizeStatement());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  new  NormalizeStatement());	  NodeTraversal.traverseNode(compiler,    externs,    root,    null);    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
2353	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    compiler).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	278	None	replace
2354	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(root,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(root,  externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(root,  externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).trace(externs,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	320	None	replace
2355	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  null);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  null);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  null);	  NodeTraversal.traverseRoots(compiler,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	311	None	replace
2356	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  interns,  this);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  interns,  this);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  interns,  this);	  NodeTraversal.traverseRoots(compiler,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	311	None	replace
2357	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this,  internal);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this,  internal);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  this,  internal);	  NodeTraversal.traverseRoots(compiler,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	311	None	replace
2358	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  true,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  true,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  true,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	157	None	replace
2359	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  new  NormalizeStatement());  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  new  NormalizeStatement());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  new  NormalizeStatement());	  NodeTraversal.traverseRoots(compiler,    externs,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	226	None	replace
2360	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBEEN_LOCAL_NAMES_UNIQUE)).traverseRoots(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBEEN_LOCAL_NAMES_UNIQUE)).traverseRoots(externs);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  FORBEEN_LOCAL_NAMES_UNIQUE)).traverseRoots(externs);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    FORBEEN_LOCAL_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	295	None	replace
2361	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  SHOW_LOCAL_NAMES_UNIQUE)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  SHOW_LOCAL_NAMES_UNIQUE)).traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  SHOW_LOCAL_NAMES_UNIQUE)).traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    FORBEEN_LOCAL_NAMES_UNIQUE)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	295	None	replace
2362	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler.traverseRoots(externs,  root);  [CE]  ')'  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  compiler.traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  ')'  expected	32	None	replace
2363	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  new  NormalizeConstants());  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  new  NormalizeConstants());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  root,  new  NormalizeConstants());	  NodeTraversal.traverseConstants(compiler,    root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	183	None	replace
2364	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)),  externs.traverse(root);  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)),  externs.traverse(root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges)),  externs.traverse(root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations),    externs.traverse(root);    	non-compiled	[CE]  ';'  expected	110	None	replace
2365	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges),  externs.traverseRoots(externs,  root);  [CE]  ')'  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges),  externs.traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges),  externs.traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations),    externs.traverse(root);    	non-compiled	[CE]  ')'  expected	110	None	replace
2366	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root).traverseRoots(compiler,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root).traverseRoots(compiler,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root).traverseRoots(compiler,  externs);	  NodeTraversal.traverse(compiler,    externs).traverseRoots(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	255	None	replace
2367	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  interns).traverseRoots(compiler,  root);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  interns).traverseRoots(compiler,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  interns).traverseRoots(compiler,  root);	  NodeTraversal.traverse(compiler,    externs).traverseRoots(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	255	None	replace
2368	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs).straverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs).straverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs).straverseRoots(externs,  root);	  NodeTraversal.traverse(compiler,    externs).traverseRoots(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	255	None	replace
2369	[BUG]  [BUGGY]  if(!forbidChanges)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  }  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(!forbidChanges)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(!forbidChanges)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  }	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations));    	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
2370	[BUG]  [BUGGY]  if(forbidChanges  ==  null)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  }  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(forbidChanges  ==  null)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(forbidChanges  ==  null)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  }	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations));    	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
2371	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges));  [CE]  ';'  expected  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NormalizeStatements(compiler,  assertOnChange,  forbidChanges));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations));    	non-compiled	[CE]  ';'  expected	115	None	replace
2372	[BUG]  [BUGGY]  if(forbidChanges  ==  null)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  }  else  {  hasOkDuplicateDeclaration  =  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(forbidChanges  ==  null)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  }  else  {  hasOkDuplicateDeclaration  =  true;  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(forbidChanges  ==  null)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  }  else  {  hasOkDuplicateDeclaration  =  true;  }	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations));    	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
2373	[BUG]  [BUGGY]  if(forbidChanges  ==  null)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  }  else  {  hasOkDuplicateDeclaration  =  false;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(forbidChanges  ==  null)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  }  else  {  hasOkDuplicateDeclaration  =  false;  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(forbidChanges  ==  null)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  }  else  {  hasOkDuplicateDeclaration  =  false;  }	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations));    	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
2374	[BUG]  [BUGGY]  if(!forbidChanges)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  }  else  {  hasOkDuplicateDeclaration  =  true;  }  [CE]  reached  end  of  file  while  parsing  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(!forbidChanges)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  }  else  {  hasOkDuplicateDeclaration  =  true;  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(!forbidChanges)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  }  else  {  hasOkDuplicateDeclaration  =  true;  }	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations));    	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
2375	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  forbidChanges));  [CE]  reached  end  of  file  while  parsing  [FE]                                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  forbidChanges));  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange,  forbidChanges));	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange,    checkUserDeclarations));    	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
2376	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(null);    	non-compiled	[CE]  reached  end  of  file  while  parsing	262	None	replace
2377	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  verifyUserDeclarations).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  verifyUserDeclarations).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  verifyUserDeclarations).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    checkUserDeclarations).traverse(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	312	None	replace
2378	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange),  checkUserDeclarations).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange),  checkUserDeclarations).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange),  checkUserDeclarations).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    checkUserDeclarations).traverse(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	312	None	replace
2379	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).traverseRoots(externs,  forbidChanges);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).traverseRoots(externs,  forbidChanges);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).traverseRoots(externs,  forbidChanges);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    checkUserDeclarations).traverse(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	312	None	replace
2380	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUsers).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUsers).traverseRoots(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUsers).traverseRoots(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    checkUserDeclarations).traverse(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	312	None	replace
2381	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  internals);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  internals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  internals);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externals,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	290	None	replace
2382	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  hasOkDuplicateDeclaration);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  hasOkDuplicateDeclaration);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    	non-compiled	[CE]  reached  end  of  file  while  parsing	302	None	replace
2383	[BUG]  [BUGGY]  if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  }  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  }  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	if(checkUserDeclarations)  {  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  }	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    	non-compiled	[CE]  reached  end  of  file  while  parsing	302	None	replace
2384	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).plot(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).plot(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).plot(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs).plot(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
2385	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  externals).plot(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  externals).plot(externs,  root);  [BUGGY]      compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations),  externals).plot(externs,  root);	  new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange),    externs).plot(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
