bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  NodeTraversal  <  Node>  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	153	None	replace
2	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	153	None	replace
3	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	153	None	replace
4	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.transverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.transverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.transverseRoots(externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	153	None	replace
5	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations));  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations));  compiler.traverseRoots(externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	153	None	replace
6	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  internal);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  internal);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  internal);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	153	None	replace
7	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  root.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  root.cloneTree());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  root.cloneTree());	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	94	None	replace
8	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler.cloneTree(),  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler.cloneTree(),  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler.cloneTree(),  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	94	None	replace
9	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler.getName());  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler.getName());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler.getName());	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	94	None	replace
10	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler.getLocalName());  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler.getLocalName());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler.getLocalName());	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	94	None	replace
11	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler.getParent());  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler.getParent());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler.getParent());	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	94	None	replace
12	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler.clone(),  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler.clone(),  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler.clone(),  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	94	None	replace
13	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler.getNameNode());  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler.getNameNode());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler.getNameNode());	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	94	None	replace
14	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler.cloneNode());  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler.cloneNode());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler.cloneNode());	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	94	None	replace
15	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	90	None	replace
16	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  root,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  root,  assertOnChange);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  root,  assertOnChange);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	90	None	replace
17	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs,  root);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	90	None	replace
18	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  internal);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  internal);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  internal);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    internal);    	non-compiled	[CE]  reached  end  of  file  while  parsing	87	None	replace
19	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  external);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  external);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  external);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    internal);    	non-compiled	[CE]  reached  end  of  file  while  parsing	87	None	replace
20	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  internal);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  internal);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  internal);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    internal);    	non-compiled	[CE]  reached  end  of  file  while  parsing	87	None	replace
21	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  new  NormalizeStatements(),  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  new  NormalizeStatements(),  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  new  NormalizeStatements(),  assertOnChange);	  NodeTraversal.traverseNode(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	198	None	replace
22	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  assertOnChange,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  assertOnChange,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  assertOnChange,  new  NormalizeStatements());	  NodeTraversal.traverseNode(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	198	None	replace
23	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  root,  new  NormalizeStatements());	  NodeTraversal.traverseNode(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	198	None	replace
24	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  new  NormalizeStatements(),  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  new  NormalizeStatements(),  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  new  NormalizeStatements(),  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNode(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	198	None	replace
25	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  internal,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  internal,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  internal,  new  NormalizeStatements());	  NodeTraversal.traverseNode(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	198	None	replace
26	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  false,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  false,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  false,  new  NormalizeStatements());	  NodeTraversal.traverseNode(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	198	None	replace
27	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  new  NormalizeStatements(),  hasOkDuplicateDeclaration());  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  new  NormalizeStatements(),  hasOkDuplicateDeclaration());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  new  NormalizeStatements(),  hasOkDuplicateDeclaration());	  NodeTraversal.traverseNode(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	198	None	replace
28	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  true,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  true,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  true,  new  NormalizeStatements());	  NodeTraversal.traverseNode(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	198	None	replace
29	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  parent,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  parent,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  parent,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs,    parent);    	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	replace
30	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  externs,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  externs,  parent);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  externs,  parent);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs,    parent);    	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	replace
31	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  externs,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  externs,  parent);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  externs,  parent);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs,    parent);    	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	replace
32	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(root,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(root,  parent);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(root,  parent);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs,    parent);    	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	replace
33	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  root,  assertOnChange);	  NodeTraversal.traverseNodes(compiler,    root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	106	None	replace
34	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  root,  checkUserDeclarations);	  NodeTraversal.traverseNodes(compiler,    root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	106	None	replace
35	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  externals,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  externals,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  root,  externals,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseNodes(compiler,    root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	106	None	replace
36	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  externals,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  externals,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  root,  externals,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNodes(compiler,    root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	106	None	replace
37	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  externs,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  externs,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  root,  externs,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNodes(compiler,    root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	106	None	replace
38	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseNodes(compiler,    root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	106	None	replace
39	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externals,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externals,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externals,  root);	  NodeTraversal.traverseNodes(compiler,    root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	106	None	replace
40	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
41	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externals,  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
42	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  haveOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  haveOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  haveOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
43	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  checkUserDeclarations);	  NodeTraversal.traverse(compiler,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
44	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externes,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externes,  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
45	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  checkUserDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  checkUserDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  checkUserDeclaration);	  NodeTraversal.traverse(compiler,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
46	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  assertOnChange);	  NodeTraversal.traverse(compiler,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
47	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  false);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	62	None	replace
48	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  assertOnChange,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  assertOnChange,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  assertOnChange,  true);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	62	None	replace
49	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  null,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  null,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  null,  true);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	62	None	replace
50	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  null,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  null,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  null,  false);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	62	None	replace
51	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  false,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  false,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  false,  true);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	62	None	replace
52	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  parent,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  parent,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  parent,  true);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	62	None	replace
53	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  renamer,  true);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	62	None	replace
54	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  true,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  true,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  true,  false);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	62	None	replace
55	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  forbidChanges);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  forbidChanges);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	replace
56	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  checkUserDeclarations,  forbidChanges);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  checkUserDeclarations,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  checkUserDeclarations,  forbidChanges);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	replace
57	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  checkUserDeclarations,  forbidChanges);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  checkUserDeclarations,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  checkUserDeclarations,  forbidChanges);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	replace
58	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  checkUserDeclarations,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  checkUserDeclarations,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  checkUserDeclarations,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	replace
59	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  assertOnChange,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  assertOnChange,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  assertOnChange,  checkUserDeclarations);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	replace
60	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  verifyUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  verifyUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  verifyUserDeclarations);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	replace
61	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  assertOnChange);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    checkUserDeclarations);    	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	replace
62	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(MATCH_BLOCK_VAR_ERROR,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(MATCH_BLOCK_VAR_ERROR,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(MATCH_BLOCK_VAR_ERROR,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(MAKE_LOCAL_NAMES_UNIQUE,    MATCH_BLOCK_VAR_ERROR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
63	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(CONVERT_WHILE_TO_FOR,  MATCH_BLOCK_VAR_ERROR);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(CONVERT_WHILE_TO_FOR,  MATCH_BLOCK_VAR_ERROR);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(CONVERT_WHILE_TO_FOR,  MATCH_BLOCK_VAR_ERROR);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(MAKE_LOCAL_NAMES_UNIQUE,    MATCH_BLOCK_VAR_ERROR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
64	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MATCH_BLOCK_VAR_ERROR);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MATCH_BLOCK_VAR_ERROR);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MATCH_BLOCK_VAR_ERROR);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(MAKE_LOCAL_NAMES_UNIQUE,    MATCH_BLOCK_VAR_ERROR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
65	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(CATCH_BLOCK_VAR_ERROR,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(CATCH_BLOCK_VAR_ERROR,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(CATCH_BLOCK_VAR_ERROR,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(MAKE_LOCAL_NAMES_UNIQUE,    MATCH_BLOCK_VAR_ERROR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
66	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(mATCH_BLOCK_VAR_ERROR,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(mATCH_BLOCK_VAR_ERROR,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(mATCH_BLOCK_VAR_ERROR,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(MAKE_LOCAL_NAMES_UNIQUE,    MATCH_BLOCK_VAR_ERROR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
67	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(EMPTY_STRING_NAMES_UNIQUE,  MATCH_BLOCK_VAR_ERROR);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(EMPTY_STRING_NAMES_UNIQUE,  MATCH_BLOCK_VAR_ERROR);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(EMPTY_STRING_NAMES_UNIQUE,  MATCH_BLOCK_VAR_ERROR);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(MAKE_LOCAL_NAMES_UNIQUE,    MATCH_BLOCK_VAR_ERROR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
68	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(MATCH_LOCAL_NAMES_UNIQUE,  MATCH_BLOCK_VAR_ERROR,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(MATCH_LOCAL_NAMES_UNIQUE,  MATCH_BLOCK_VAR_ERROR,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(MATCH_LOCAL_NAMES_UNIQUE,  MATCH_BLOCK_VAR_ERROR,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(MAKE_LOCAL_NAMES_UNIQUE,    MATCH_BLOCK_VAR_ERROR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
69	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(MATCH_BLOCK_VAR_ERROR,  MAKE_LCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(MATCH_BLOCK_VAR_ERROR,  MAKE_LCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(MATCH_BLOCK_VAR_ERROR,  MAKE_LCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(MAKE_LOCAL_NAMES_UNIQUE,    MATCH_BLOCK_VAR_ERROR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
70	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(MAKE_LOCAL_NAMES_UNIQUE,    CONVERT_WHILE_TO_FOR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	71	None	replace
71	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  CONVERT_WHILE_TO_FOR);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  CONVERT_WHILE_TO_FOR);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  CONVERT_WHILE_TO_FOR);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(MAKE_LOCAL_NAMES_UNIQUE,    CONVERT_WHILE_TO_FOR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	71	None	replace
72	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(ConVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(ConVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(ConVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(MAKE_LOCAL_NAMES_UNIQUE,    CONVERT_WHILE_TO_FOR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	71	None	replace
73	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(MAKE_LOCAL_NAMES_UNIQUE,    CONVERT_WHILE_TO_FOR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	71	None	replace
74	[BUG]  [BUGGY]  NodeTraversal  renamer  =  compiler.getCurrentReturnNodeTraversal();  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  compiler.getCurrentReturnNodeTraversal();  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  compiler.getCurrentReturnNodeTraversal();	  NodeTraversal    renamer    =    compiler.getCurrentNodeTraversal();    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
75	[BUG]  [BUGGY]  NodeTraversal  renamer  =  compiler.getConstantNodeTraversal();  [CE]  reached  end  of  file  while  parsing  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  compiler.getConstantNodeTraversal();  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  compiler.getConstantNodeTraversal();	  NodeTraversal    renamer    =    compiler.getCurrentNodeTraversal();    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
76	[BUG]  [BUGGY]  NodeTraversal  renamer  =  compiler.getCurrentTicklingCallback();  [CE]  reached  end  of  file  while  parsing  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  compiler.getCurrentTicklingCallback();  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  compiler.getCurrentTicklingCallback();	  NodeTraversal    renamer    =    compiler.getCurrentNodeTraversal();    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
77	[BUG]  [BUGGY]  NodeTraversal  renamer  =  compiler.getCurrentNodeTraversal(compiler);  [CE]  reached  end  of  file  while  parsing  [FE]                                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  compiler.getCurrentNodeTraversal(compiler);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  compiler.getCurrentNodeTraversal(compiler);	  NodeTraversal    renamer    =    compiler.getCurrentNodeTraversal();    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
78	[BUG]  [BUGGY]  NodeTraversal  renamer  =  compiler.getCurrentNameTraversal();  [CE]  reached  end  of  file  while  parsing  [FE]                                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  compiler.getCurrentNameTraversal();  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  compiler.getCurrentNameTraversal();	  NodeTraversal    renamer    =    compiler.getCurrentNodeTraversal();    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
79	[BUG]  [BUGGY]  NodeTraversal  renamer  =  compiler.getNativeReference();  [CE]  reached  end  of  file  while  parsing  [FE]                                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  compiler.getNativeReference();  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  compiler.getNativeReference();	  NodeTraversal    renamer    =    compiler.getCurrentNodeTraversal();    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
80	[BUG]  [BUGGY]  NodeTraversal  renamer  =  compiler.getNativeReferences();  [CE]  reached  end  of  file  while  parsing  [FE]                                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  compiler.getNativeReferences();  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  compiler.getNativeReferences();	  NodeTraversal    renamer    =    compiler.getCurrentNodeTraversal();    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
81	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  true);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	138	None	replace
82	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  root,  false);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	138	None	replace
83	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  null,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  null,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  null,  false);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	138	None	replace
84	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  false,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  false,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  false,  true);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	138	None	replace
85	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  renamer,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  renamer,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  renamer,  false);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	138	None	replace
86	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  assertOnChange,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  assertOnChange,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  assertOnChange,  false);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	138	None	replace
87	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  internal,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  internal,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  internal,  false);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	138	None	replace
88	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  assertOnChange,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  assertOnChange,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  assertOnChange,  new  NormalizeStatements());	  NodeTraversal.traverse(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	211	None	replace
89	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeStatements(),  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeStatements(),  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeStatements(),  assertOnChange);	  NodeTraversal.traverse(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	211	None	replace
90	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeStatements(),  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeStatements(),  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeStatements(),  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	211	None	replace
91	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  internal,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  internal,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  internal,  new  NormalizeStatements());	  NodeTraversal.traverse(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	211	None	replace
92	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeStatements()));  [CE]  ';'  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeStatements()));  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeStatements()));	  NodeTraversal.traverse(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  ';'  expected	211	None	replace
93	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  root,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  root,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externals,  root,  new  NormalizeStatements());	  NodeTraversal.traverse(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	211	None	replace
94	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeStatements(),  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeStatements(),  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeStatements(),  checkUserDeclarations);	  NodeTraversal.traverse(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	211	None	replace
95	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter.get(0));  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter.get(0));  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter.get(0));	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs.get(0));    	non-compiled	[CE]  reached  end  of  file  while  parsing	195	None	replace
96	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler.get(0));  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler.get(0));  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler.get(0));	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs.get(0));    	non-compiled	[CE]  reached  end  of  file  while  parsing	195	None	replace
97	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  externs.get(0));  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  externs.get(0));  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  externs.get(0));	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs.get(0));    	non-compiled	[CE]  reached  end  of  file  while  parsing	195	None	replace
98	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  root.get(0));  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  root.get(0));  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  root.get(0));	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs.get(0));    	non-compiled	[CE]  reached  end  of  file  while  parsing	195	None	replace
99	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  externals.get(0));  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  externals.get(0));  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  externals.get(0));	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs.get(0));    	non-compiled	[CE]  reached  end  of  file  while  parsing	195	None	replace
100	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs.get(0),  root);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs.get(0),  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs.get(0),  root);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs.get(0));    	non-compiled	[CE]  reached  end  of  file  while  parsing	195	None	replace
101	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converters.get(0));  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converters.get(0));  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converters.get(0));	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs.get(0));    	non-compiled	[CE]  reached  end  of  file  while  parsing	195	None	replace
102	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs.get(0));  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs.get(0));  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs.get(0));	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs.get(0));    	non-compiled	[CE]  reached  end  of  file  while  parsing	195	None	replace
103	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(root.get(0));  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(root.get(0));  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(root.get(0));	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs.get(0));    	non-compiled	[CE]  reached  end  of  file  while  parsing	195	None	replace
104	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  this,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  this,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  this,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNode(compiler,    externs,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	152	None	replace
105	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  this,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  this,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  this,  checkUserDeclarations);	  NodeTraversal.traverseNode(compiler,    externs,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	152	None	replace
106	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  this,  constantMap);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  this,  constantMap);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  this,  constantMap);	  NodeTraversal.traverseNode(compiler,    externs,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	152	None	replace
107	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement());  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement());	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatement());    	non-compiled	[CE]  reached  end  of  file  while  parsing	182	None	replace
108	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  assertOnChange);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatement());    	non-compiled	[CE]  reached  end  of  file  while  parsing	182	None	replace
109	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatement());  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatement());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatement());	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatement());    	non-compiled	[CE]  reached  end  of  file  while  parsing	182	None	replace
110	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatement());    	non-compiled	[CE]  reached  end  of  file  while  parsing	182	None	replace
111	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatement());  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatement());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatement());	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatement());    	non-compiled	[CE]  reached  end  of  file  while  parsing	182	None	replace
112	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  externs);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatement());    	non-compiled	[CE]  reached  end  of  file  while  parsing	182	None	replace
113	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  false);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  false);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatement());    	non-compiled	[CE]  reached  end  of  file  while  parsing	182	None	replace
114	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement()));  [CE]  ';'  expected  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement()));  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement()));	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatement());    	non-compiled	[CE]  ';'  expected	182	None	replace
115	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  true,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  true,  false);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  true,  false);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	123	None	replace
116	[BUG]  [BUGGY]  makeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  makeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  false);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	makeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  false);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	123	None	replace
117	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  null);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  null);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  null);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	123	None	replace
118	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LCAL_NAMES_UNIQUE,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LCAL_NAMES_UNIQUE,  false);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LCAL_NAMES_UNIQUE,  false);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	123	None	replace
119	[BUG]  [BUGGY]  DeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  DeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  false);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	DeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  false);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	123	None	replace
120	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  parent);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	161	None	replace
121	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	161	None	replace
122	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(null);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(null);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(null);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	161	None	replace
123	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  internal);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  internal);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  internal);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	161	None	replace
124	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoot(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoot(externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverseRoot(externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	161	None	replace
125	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(parent);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(parent);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	161	None	replace
126	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	156	None	replace
127	[BUG]  [BUGGY]  NodeTraversal  visitor  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  visitor  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  visitor  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	156	None	replace
128	[BUG]  [BUGGY]  NodeTraversal  warning  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  warning  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  warning  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	156	None	replace
129	[BUG]  [BUGGY]  NodeTraversal  error  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  error  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  error  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	156	None	replace
130	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	156	None	replace
131	[BUG]  [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs);  renamer.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs);  renamer.traverseRoots(externs,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs);  renamer.traverseRoots(externs,  root);	  NodeTraversal    renamer    =    new    NodeTraversal(compiler,    renamer);    renamer.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	174	None	replace
132	[BUG]  [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs);	  NodeTraversal    renamer    =    new    NodeTraversal(compiler,    renamer);    renamer.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	174	None	replace
133	[BUG]  [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  root);  renamer.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  root);  renamer.traverseRoots(externs,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  new  NodeTraversal(compiler,  root);  renamer.traverseRoots(externs,  root);	  NodeTraversal    renamer    =    new    NodeTraversal(compiler,    renamer);    renamer.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	174	None	replace
134	[BUG]  [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs.cloneTree());  renamer.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs.cloneTree());  renamer.traverseRoots(externs,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs.cloneTree());  renamer.traverseRoots(externs,  root);	  NodeTraversal    renamer    =    new    NodeTraversal(compiler,    renamer);    renamer.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	174	None	replace
135	[BUG]  [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externals);  renamer.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externals);  renamer.traverseRoots(externs,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externals);  renamer.traverseRoots(externs,  root);	  NodeTraversal    renamer    =    new    NodeTraversal(compiler,    renamer);    renamer.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	174	None	replace
136	[BUG]  [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externes);  renamer.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externes);  renamer.traverseRoots(externs,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externes);  renamer.traverseRoots(externs,  root);	  NodeTraversal    renamer    =    new    NodeTraversal(compiler,    renamer);    renamer.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	174	None	replace
137	[BUG]  [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  root);  renamer.traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  root);  renamer.traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  new  NodeTraversal(compiler,  root);  renamer.traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal    renamer    =    new    NodeTraversal(compiler,    renamer);    renamer.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	174	None	replace
138	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(MAKE_LOCAL_NAMES_UNIQUE,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
139	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE  +  1);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE  +  1);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(MAKE_LOCAL_NAMES_UNIQUE,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
140	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(NAME_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(NAME_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(NAME_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(MAKE_LOCAL_NAMES_UNIQUE,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
141	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNKNOWN);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNKNOWN);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNKNOWN);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(MAKE_LOCAL_NAMES_UNIQUE,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
142	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  root,  assertOnChange);	  NodeTraversal.traverseConstants(compiler,    root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	136	None	replace
143	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  root,  checkUserDeclarations);	  NodeTraversal.traverseConstants(compiler,    root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	136	None	replace
144	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externals,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externals,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externals,  root);	  NodeTraversal.traverseConstants(compiler,    root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	136	None	replace
145	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  externals,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  externals,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  root,  externals,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseConstants(compiler,    root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	136	None	replace
146	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  externals,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  externals,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  root,  externals,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseConstants(compiler,    root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	136	None	replace
147	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  renamer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  root,  renamer);	  NodeTraversal.traverseConstants(compiler,    root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	136	None	replace
148	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  root,  true);	  NodeTraversal.traverseConstants(compiler,    root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	136	None	replace
149	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange,  checkUserDeclarations);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange,  checkUserDeclarations);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    assertOnChange);    	non-compiled	[CE]  reached  end  of  file  while  parsing	120	None	replace
150	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange,  forbidChanges);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange,  forbidChanges);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange,  forbidChanges);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    assertOnChange);    	non-compiled	[CE]  reached  end  of  file  while  parsing	120	None	replace
151	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange,  hasOkDuplicateDeclaration);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange,  hasOkDuplicateDeclaration);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    assertOnChange);    	non-compiled	[CE]  reached  end  of  file  while  parsing	120	None	replace
152	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  verifyOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  verifyOnChange);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  verifyOnChange);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    assertOnChange);    	non-compiled	[CE]  reached  end  of  file  while  parsing	120	None	replace
153	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange,  parent);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange,  parent);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    assertOnChange);    	non-compiled	[CE]  reached  end  of  file  while  parsing	120	None	replace
154	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LCAL_NAMES_UNIQUE,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LCAL_NAMES_UNIQUE,  true);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LCAL_NAMES_UNIQUE,  true);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	124	None	replace
155	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  false,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  false,  true);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  false,  true);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	124	None	replace
156	[BUG]  [BUGGY]  makeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  makeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  true);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	makeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  true);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	124	None	replace
157	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  false,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  false,  parent);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  false,  parent);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	124	None	replace
158	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	86	None	replace
159	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(root,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(root,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(root,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	86	None	replace
160	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(compiler,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(compiler,  assertOnChange);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(compiler,  assertOnChange);	  MakeDeclaredNamesUnique    renamer    =    new    MAKE_LOCAL_NAMES_UNIQUE(compiler);    	non-compiled	[CE]  reached  end  of  file  while  parsing	169	None	replace
161	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(compiler,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(compiler,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(compiler,  root);	  MakeDeclaredNamesUnique    renamer    =    new    MAKE_LOCAL_NAMES_UNIQUE(compiler);    	non-compiled	[CE]  reached  end  of  file  while  parsing	169	None	replace
162	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(compiler,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(compiler,  externs);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(compiler,  externs);	  MakeDeclaredNamesUnique    renamer    =    new    MAKE_LOCAL_NAMES_UNIQUE(compiler);    	non-compiled	[CE]  reached  end  of  file  while  parsing	169	None	replace
163	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(compiler,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(compiler,  parent);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(compiler,  parent);	  MakeDeclaredNamesUnique    renamer    =    new    MAKE_LOCAL_NAMES_UNIQUE(compiler);    	non-compiled	[CE]  reached  end  of  file  while  parsing	169	None	replace
164	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(compiler,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(compiler,  true);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(compiler,  true);	  MakeDeclaredNamesUnique    renamer    =    new    MAKE_LOCAL_NAMES_UNIQUE(compiler);    	non-compiled	[CE]  reached  end  of  file  while  parsing	169	None	replace
165	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(compiler,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(compiler,  externals);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(compiler,  externals);	  MakeDeclaredNamesUnique    renamer    =    new    MAKE_LOCAL_NAMES_UNIQUE(compiler);    	non-compiled	[CE]  reached  end  of  file  while  parsing	169	None	replace
166	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(compiler,  forbidChanges);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(compiler,  forbidChanges);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(compiler,  forbidChanges);	  MakeDeclaredNamesUnique    renamer    =    new    MAKE_LOCAL_NAMES_UNIQUE(compiler);    	non-compiled	[CE]  reached  end  of  file  while  parsing	169	None	replace
167	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(compiler,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(compiler,  false);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(compiler,  false);	  MakeDeclaredNamesUnique    renamer    =    new    MAKE_LOCAL_NAMES_UNIQUE(compiler);    	non-compiled	[CE]  reached  end  of  file  while  parsing	169	None	replace
168	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(root);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
169	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  compiler.traverseRoots(externs,  root);  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  compiler.traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(root);    	non-compiled	[CE]  ';'  expected	15	None	replace
170	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
171	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    forbidChanges);    	non-compiled	[CE]  reached  end  of  file  while  parsing	125	None	replace
172	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  testUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  testUserDeclarations);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  testUserDeclarations);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    forbidChanges);    	non-compiled	[CE]  reached  end  of  file  while  parsing	125	None	replace
173	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  findUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  findUserDeclarations);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  findUserDeclarations);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    forbidChanges);    	non-compiled	[CE]  reached  end  of  file  while  parsing	125	None	replace
174	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges,  hasOkDuplicateDeclaration);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges,  hasOkDuplicateDeclaration);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    forbidChanges);    	non-compiled	[CE]  reached  end  of  file  while  parsing	125	None	replace
175	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  assertOnChange);	  NodeTraversal.traverseNode(compiler,    externs,    root,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	151	None	replace
176	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseNode(compiler,    externs,    root,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	151	None	replace
177	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  renamer,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  renamer,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  renamer,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNode(compiler,    externs,    root,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	151	None	replace
178	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseValues(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	213	None	replace
179	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseValues(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	213	None	replace
180	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  root,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  root,  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseValues(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	213	None	replace
181	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  root,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  root,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  root,  checkUserDeclarations);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseValues(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	213	None	replace
182	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  parent);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseValues(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	213	None	replace
183	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  externals);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseValues(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	213	None	replace
184	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(root,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(root,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(root,  externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseValues(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	213	None	replace
185	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseValues(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseValues(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseValues(externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseValues(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	213	None	replace
186	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter.cloneTree(),  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter.cloneTree(),  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter.cloneTree(),  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs.cloneTree(),    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	201	None	replace
187	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs.cloneTree(),  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs.cloneTree(),  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs.cloneTree(),  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs.cloneTree(),    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	201	None	replace
188	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(MAKE_LOCAL_NAMES_UNIQUE.cloneTree(),  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(MAKE_LOCAL_NAMES_UNIQUE.cloneTree(),  externs);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(MAKE_LOCAL_NAMES_UNIQUE.cloneTree(),  externs);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs.cloneTree(),    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	201	None	replace
189	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(parent.cloneTree(),  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(parent.cloneTree(),  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(parent.cloneTree(),  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs.cloneTree(),    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	201	None	replace
190	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs.cloneTree(),  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs.cloneTree(),  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs.cloneTree(),  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs.cloneTree(),    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	201	None	replace
191	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(mAKE_LOCAL_NAMES_UNIQUE.cloneTree(),  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(mAKE_LOCAL_NAMES_UNIQUE.cloneTree(),  externs);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(mAKE_LOCAL_NAMES_UNIQUE.cloneTree(),  externs);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs.cloneTree(),    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	201	None	replace
192	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	237	None	replace
193	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	237	None	replace
194	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	237	None	replace
195	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	237	None	replace
196	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	237	None	replace
197	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  Root);  [CE]  reached  end  of  file  while  parsing  [FE]                                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  Root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  Root);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	237	None	replace
198	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	237	None	replace
199	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoot(root);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoot(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoot(root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	162	None	replace
200	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(converter,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(converter,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(converter,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	162	None	replace
201	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traceRoot(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traceRoot(externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traceRoot(externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoot(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	162	None	replace
202	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  renamer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  renamer);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	222	None	replace
203	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter,  externs,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter,  externs,  renamer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter,  externs,  renamer);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	222	None	replace
204	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs,  renamer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs,  renamer);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	222	None	replace
205	[BUG]  [BUGGY]  NodeTraversal  warning  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  warning  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  warning  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	  NodeTraversal    warning    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	158	None	replace
206	[BUG]  [BUGGY]  NodeTraversal  warning  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  warning  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  warning  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);	  NodeTraversal    warning    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	158	None	replace
207	[BUG]  [BUGGY]  NodeTraversal  warning  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.transverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  warning  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.transverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  warning  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.transverseRoots(externs,  root);	  NodeTraversal    warning    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	158	None	replace
208	[BUG]  [BUGGY]  Traversal  warning  =  new  Traversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  Traversal  warning  =  new  Traversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	Traversal  warning  =  new  Traversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);	  NodeTraversal    warning    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	158	None	replace
209	[BUG]  [BUGGY]  NodeTraversal  warning  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations));  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  warning  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  warning  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations));  compiler.traverseRoots(externs,  root);	  NodeTraversal    warning    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	158	None	replace
210	[BUG]  [BUGGY]  NodeTraversal  warn  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  warn  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  warn  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);	  NodeTraversal    warning    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	158	None	replace
211	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(extras,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(extras,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(extras,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(extras,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	217	None	replace
212	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(extras,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(extras,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(extras,  externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(extras,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	217	None	replace
213	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  true,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  true,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  true,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	92	None	replace
214	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  true,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  true,  false);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  true,  false);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	92	None	replace
215	[BUG]  [BUGGY]  DeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  DeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  false);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	DeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  false);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	92	None	replace
216	[BUG]  [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs).traverseRoots(externs,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs).traverseRoots(externs,  root);	  NodeTraversal    renamer    =    new    NodeTraversal(compiler,    renamer).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	175	None	replace
217	[BUG]  [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  root).traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  root).traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  new  NodeTraversal(compiler,  root).traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal    renamer    =    new    NodeTraversal(compiler,    renamer).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	175	None	replace
218	[BUG]  [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs).traverseRoots(relativeRoots,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs).traverseRoots(relativeRoots,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs).traverseRoots(relativeRoots,  root);	  NodeTraversal    renamer    =    new    NodeTraversal(compiler,    renamer).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	175	None	replace
219	[BUG]  [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs).traverseRoots(root);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs).traverseRoots(root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs).traverseRoots(root);	  NodeTraversal    renamer    =    new    NodeTraversal(compiler,    renamer).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	175	None	replace
220	[BUG]  [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs).traverseRoots(null,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs).traverseRoots(null,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs).traverseRoots(null,  root);	  NodeTraversal    renamer    =    new    NodeTraversal(compiler,    renamer).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	175	None	replace
221	[BUG]  [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs.traverseRoots(externs,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs.traverseRoots(externs,  root);	  NodeTraversal    renamer    =    new    NodeTraversal(compiler,    renamer).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	175	None	replace
222	[BUG]  [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs).traverseRoots(references,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs).traverseRoots(references,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs).traverseRoots(references,  root);	  NodeTraversal    renamer    =    new    NodeTraversal(compiler,    renamer).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	175	None	replace
223	[BUG]  [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs).traverseRoots(last,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs).traverseRoots(last,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs).traverseRoots(last,  root);	  NodeTraversal    renamer    =    new    NodeTraversal(compiler,    renamer).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	175	None	replace
224	[BUG]  [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs).traverseRoots(returnValue,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs).traverseRoots(returnValue,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs).traverseRoots(returnValue,  root);	  NodeTraversal    renamer    =    new    NodeTraversal(compiler,    renamer).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	175	None	replace
225	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  false,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  false,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  false,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(converter,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	220	None	replace
226	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  MAKE_LOCAL_NAMES_UNIQUE,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  MAKE_LOCAL_NAMES_UNIQUE,  false);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  MAKE_LOCAL_NAMES_UNIQUE,  false);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(converter,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	220	None	replace
227	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  false,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  false,  true);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  false,  true);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(converter,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	220	None	replace
228	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	128	None	replace
229	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  forbidChanges);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	128	None	replace
230	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  parent);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	128	None	replace
231	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  checkUserDeclarations);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	128	None	replace
232	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  false);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	128	None	replace
233	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  renamer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  renamer);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	128	None	replace
234	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  false);	  NodeTraversal.traverse(compiler,    externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	78	None	replace
235	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  false,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  false,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  false,  true);	  NodeTraversal.traverse(compiler,    externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	78	None	replace
236	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  null,  true);	  NodeTraversal.traverse(compiler,    externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	78	None	replace
237	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  assertOnChange,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  assertOnChange,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  assertOnChange,  true);	  NodeTraversal.traverse(compiler,    externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	78	None	replace
238	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  null,  false);	  NodeTraversal.traverse(compiler,    externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	78	None	replace
239	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  parent,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  parent,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  parent,  true);	  NodeTraversal.traverse(compiler,    externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	78	None	replace
240	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  renamer,  true);	  NodeTraversal.traverse(compiler,    externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	78	None	replace
241	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  true,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  true,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  true,  false);	  NodeTraversal.traverse(compiler,    externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	78	None	replace
242	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	190	None	replace
243	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  root);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	190	None	replace
244	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  externs,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  externs,  assertOnChange);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  externs,  assertOnChange);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	190	None	replace
245	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  externals);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  externals);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	190	None	replace
246	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  externals.cloneTree(),  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  externals.cloneTree(),  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  externals.cloneTree(),  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs,    externals.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	98	None	replace
247	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  internals.cloneTree(),  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  internals.cloneTree(),  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  internals.cloneTree(),  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs,    externals.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	98	None	replace
248	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  externs.cloneTree(),  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  externs.cloneTree(),  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  externs.cloneTree(),  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs,    externals.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	98	None	replace
249	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  parent.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  parent.cloneTree());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  parent.cloneTree());	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs,    externals.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	98	None	replace
250	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  MAKE_LOCAL_NAMES_UNIQUE.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  MAKE_LOCAL_NAMES_UNIQUE.cloneTree());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  MAKE_LOCAL_NAMES_UNIQUE.cloneTree());	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs,    externals.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	98	None	replace
251	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  externals.clone(),  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  externals.clone(),  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  externals.clone(),  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs,    externals.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	98	None	replace
252	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  true);	  NodeTraversal.traverse(compiler,    externs,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	75	None	replace
253	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  false,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  false,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  false,  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    externs,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	75	None	replace
254	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  false,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  false,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  false,  true);	  NodeTraversal.traverse(compiler,    externs,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	75	None	replace
255	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  assertOnChange,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  assertOnChange,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  assertOnChange,  false);	  NodeTraversal.traverse(compiler,    externs,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	75	None	replace
256	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  false,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  false,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  false,  checkUserDeclarations);	  NodeTraversal.traverse(compiler,    externs,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	75	None	replace
257	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  null,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  null,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  null,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(converter,    null);    	non-compiled	[CE]  reached  end  of  file  while  parsing	168	None	replace
258	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  CATCH_BLOCK_VAR_ERROR);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  CATCH_BLOCK_VAR_ERROR);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  CATCH_BLOCK_VAR_ERROR);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(converter,    null);    	non-compiled	[CE]  reached  end  of  file  while  parsing	168	None	replace
259	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  checkUserDeclarations);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	131	None	replace
260	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	131	None	replace
261	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	131	None	replace
262	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(root,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(root,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(root,  externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	131	None	replace
263	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externals);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	131	None	replace
264	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	131	None	replace
265	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  root,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  root,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externals,  root,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(compiler,    externals,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	184	None	replace
266	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  externals);	  NodeTraversal.traverseRoots(compiler,    externals,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	184	None	replace
267	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  root,  assertOnChange);	  NodeTraversal.traverseNode(compiler,    root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	145	None	replace
268	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  externs,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  externs,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  root,  externs,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNode(compiler,    root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	145	None	replace
269	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  externals,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  externals,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  root,  externals,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNode(compiler,    root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	145	None	replace
270	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  externals,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  externals,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  root,  externals,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseNode(compiler,    root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	145	None	replace
271	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externals,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externals,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externals,  root);	  NodeTraversal.traverseNode(compiler,    root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	145	None	replace
272	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  internals);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  internals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  root,  internals);	  NodeTraversal.traverseNode(compiler,    root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	145	None	replace
273	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LCAL_NAMES_UNIQUE,  assertOnChange);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	93	None	replace
274	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	93	None	replace
275	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externes);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externes);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externes);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externes);    	non-compiled	[CE]  reached  end  of  file  while  parsing	224	None	replace
276	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  assertOnChange,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  assertOnChange,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  assertOnChange,  new  NormalizeStatements());	  NodeTraversal.traverseRoots(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	181	None	replace
277	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  new  NormalizeStatements(),  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  new  NormalizeStatements(),  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  new  NormalizeStatements(),  assertOnChange);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	181	None	replace
278	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  new  NormalizeStatements(),  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  new  NormalizeStatements(),  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  new  NormalizeStatements(),  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	181	None	replace
279	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  internal,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  internal,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  internal,  new  NormalizeStatements());	  NodeTraversal.traverseRoots(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	181	None	replace
280	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  true,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  true,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  true,  new  NormalizeStatements());	  NodeTraversal.traverseRoots(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	181	None	replace
281	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  false,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  false,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  false,  new  NormalizeStatements());	  NodeTraversal.traverseRoots(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	181	None	replace
282	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  root,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  root,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externals,  root,  new  NormalizeStatements());	  NodeTraversal.traverseRoots(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	181	None	replace
283	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externs)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
284	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  assertOnChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs,  assertOnChange)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externs)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
285	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externs)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
286	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(root,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(root,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(root,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	208	None	replace
287	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange));	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	208	None	replace
288	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  true);	  NodeTraversal.traverseRoots(compiler,    externals);    	non-compiled	[CE]  reached  end  of  file  while  parsing	54	None	replace
289	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  internals);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  internals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  internals);	  NodeTraversal.traverseRoots(compiler,    externals);    	non-compiled	[CE]  reached  end  of  file  while  parsing	54	None	replace
290	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externes,  root);	  NodeTraversal.traverseRoots(compiler,    externals);    	non-compiled	[CE]  reached  end  of  file  while  parsing	54	None	replace
291	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  checkUserDeclarations);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverse(compiler,  root,  checkUserDeclarations);	  NodeTraversal.traverse(compiler,    renamer,    checkUserDeclarations);    	non-compiled	[CE]  reached  end  of  file  while  parsing	240	None	replace
292	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  checkUserDeclarations);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverse(compiler,  externs,  checkUserDeclarations);	  NodeTraversal.traverse(compiler,    renamer,    checkUserDeclarations);    	non-compiled	[CE]  reached  end  of  file  while  parsing	240	None	replace
293	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverse(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    renamer,    checkUserDeclarations);    	non-compiled	[CE]  reached  end  of  file  while  parsing	240	None	replace
294	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  checkUserDeclarations,  forbidChanges);  [CE]  reached  end  of  file  while  parsing  [FE]                                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  checkUserDeclarations,  forbidChanges);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverse(compiler,  renamer,  checkUserDeclarations,  forbidChanges);	  NodeTraversal.traverse(compiler,    renamer,    checkUserDeclarations);    	non-compiled	[CE]  reached  end  of  file  while  parsing	240	None	replace
295	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  assertOnChange);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverse(compiler,  renamer,  assertOnChange);	  NodeTraversal.traverse(compiler,    renamer,    checkUserDeclarations);    	non-compiled	[CE]  reached  end  of  file  while  parsing	240	None	replace
296	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  forbidChanges);  [CE]  reached  end  of  file  while  parsing  [FE]                                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  forbidChanges);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverse(compiler,  renamer,  forbidChanges);	  NodeTraversal.traverse(compiler,    renamer,    checkUserDeclarations);    	non-compiled	[CE]  reached  end  of  file  while  parsing	240	None	replace
297	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  checkUserDeclarations,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  checkUserDeclarations,  hasOkDuplicateDeclaration);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverse(compiler,  renamer,  checkUserDeclarations,  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    renamer,    checkUserDeclarations);    	non-compiled	[CE]  reached  end  of  file  while  parsing	240	None	replace
298	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  checkUserDeclarations,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  checkUserDeclarations,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverse(compiler,  renamer,  checkUserDeclarations,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    renamer,    checkUserDeclarations);    	non-compiled	[CE]  reached  end  of  file  while  parsing	240	None	replace
299	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  checkUserDeclarations);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverse(compiler,  externals,  checkUserDeclarations);	  NodeTraversal.traverse(compiler,    renamer,    checkUserDeclarations);    	non-compiled	[CE]  reached  end  of  file  while  parsing	240	None	replace
300	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  renamer);	  NodeTraversal.traverse(compiler,    renamer,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	238	None	replace
301	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  renamer);	  NodeTraversal.traverse(compiler,    renamer,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	238	None	replace
302	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    renamer,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	238	None	replace
303	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  renamer);	  NodeTraversal.traverse(compiler,    renamer,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	238	None	replace
304	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverse(compiler,  renamer,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);	  NodeTraversal.traverse(compiler,    renamer,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	238	None	replace
305	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  renamer);	  NodeTraversal.traverse(compiler,    renamer,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	238	None	replace
306	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);	  NodeTraversal    <    Node>    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	242	None	replace
307	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);	  NodeTraversal    <    Node>    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	242	None	replace
308	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals);	  NodeTraversal    <    Node>    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	242	None	replace
309	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);	  NodeTraversal    <    Node>    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	242	None	replace
310	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);	  NodeTraversal    <    Node>    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	242	None	replace
311	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal);	  NodeTraversal    <    Node>    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	242	None	replace
312	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root);	  NodeTraversal    <    Node>    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	242	None	replace
313	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);	  NodeTraversal    <    Node>    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	242	None	replace
314	[BUG]  [BUGGY]  Node  renamer  =  externs.getFirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  Node  renamer  =  externs.getFirstChild();  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	Node  renamer  =  externs.getFirstChild();	  Node    renamer    =    MAKE_LOCAL_NAMES_UNIQUE.getFirstChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
315	[BUG]  [BUGGY]  Node  renamer  =  MAKE_LOCAL_NAMES_UNIQUE.getLastChild();  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  Node  renamer  =  MAKE_LOCAL_NAMES_UNIQUE.getLastChild();  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	Node  renamer  =  MAKE_LOCAL_NAMES_UNIQUE.getLastChild();	  Node    renamer    =    MAKE_LOCAL_NAMES_UNIQUE.getFirstChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
316	[BUG]  [BUGGY]  Node  renamer  =  root.getFirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  Node  renamer  =  root.getFirstChild();  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	Node  renamer  =  root.getFirstChild();	  Node    renamer    =    MAKE_LOCAL_NAMES_UNIQUE.getFirstChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
317	[BUG]  [BUGGY]  Node  renamer  =  MAKE_LOCAL_NAMES_UNIQUE.removeFirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  Node  renamer  =  MAKE_LOCAL_NAMES_UNIQUE.removeFirstChild();  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	Node  renamer  =  MAKE_LOCAL_NAMES_UNIQUE.removeFirstChild();	  Node    renamer    =    MAKE_LOCAL_NAMES_UNIQUE.getFirstChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
318	[BUG]  [BUGGY]  Node  renamer  =  MAKE_LOCAL_NAMES_UNIQUE.clone();  [CE]  reached  end  of  file  while  parsing  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  Node  renamer  =  MAKE_LOCAL_NAMES_UNIQUE.clone();  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	Node  renamer  =  MAKE_LOCAL_NAMES_UNIQUE.clone();	  Node    renamer    =    MAKE_LOCAL_NAMES_UNIQUE.getFirstChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
319	[BUG]  [BUGGY]  Node  renamer  =  MAKE_LOCAL_NAMES_UNIQUE,  externs.getFirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]                                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  Node  renamer  =  MAKE_LOCAL_NAMES_UNIQUE,  externs.getFirstChild();  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	Node  renamer  =  MAKE_LOCAL_NAMES_UNIQUE,  externs.getFirstChild();	  Node    renamer    =    MAKE_LOCAL_NAMES_UNIQUE.getFirstChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
320	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  null,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  null,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  null,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNode(compiler,    externs,    root,    null);    	non-compiled	[CE]  reached  end  of  file  while  parsing	231	None	replace
321	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  roots);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  roots);	  NodeTraversal.traverse(compiler,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	replace
322	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler);	  NodeTraversal.traverse(compiler,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	replace
323	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  renamer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  renamer);	  NodeTraversal.traverse(compiler,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	replace
324	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  externs.getFirstChild());  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  externs.getFirstChild());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  externs.getFirstChild());	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs,    externs.getLastChild());    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
325	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs.getLastChild());  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs.getLastChild());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs.getLastChild());	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs,    externs.getLastChild());    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
326	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  externs.getLastChild());  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  externs.getLastChild());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  externs.getLastChild());	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs,    externs.getLastChild());    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
327	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(root,  externs.getLastChild());  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(root,  externs.getLastChild());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(root,  externs.getLastChild());	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs,    externs.getLastChild());    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
328	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  root.getFirstChild());  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  root.getFirstChild());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  root.getFirstChild());	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs,    externs.getLastChild());    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
329	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  parent.getLastChild());  [CE]  reached  end  of  file  while  parsing  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  parent.getLastChild());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  parent.getLastChild());	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs,    externs.getLastChild());    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
330	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  null);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  null);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  null);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	replace
331	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  this,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  this,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  this,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	replace
332	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  this,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  this,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  this,  checkUserDeclarations);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	replace
333	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  this,  constantMap);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  this,  constantMap);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  this,  constantMap);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	replace
334	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations,  forbidChanges);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations,  forbidChanges);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations,  forbidChanges);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    checkUserDeclarations);    	non-compiled	[CE]  reached  end  of  file  while  parsing	121	None	replace
335	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  checkUserDeclarations,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  checkUserDeclarations,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  checkUserDeclarations,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    checkUserDeclarations);    	non-compiled	[CE]  reached  end  of  file  while  parsing	121	None	replace
336	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations,  hasOkDuplicateDeclaration);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations,  hasOkDuplicateDeclaration);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    checkUserDeclarations);    	non-compiled	[CE]  reached  end  of  file  while  parsing	121	None	replace
337	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  external);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  external);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  external);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    internal);    	non-compiled	[CE]  reached  end  of  file  while  parsing	210	None	replace
338	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  internal);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  internal);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  internal);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    internal);    	non-compiled	[CE]  reached  end  of  file  while  parsing	210	None	replace
339	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  assertOnChange);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    internal);    	non-compiled	[CE]  reached  end  of  file  while  parsing	210	None	replace
340	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  external)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  external)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  external)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    internal);    	non-compiled	[CE]  reached  end  of  file  while  parsing	210	None	replace
341	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs,  internal);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs,  internal);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs,  internal);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    internal);    	non-compiled	[CE]  reached  end  of  file  while  parsing	210	None	replace
342	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  false);	  NodeTraversal.traverseNode(compiler,    externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	148	None	replace
343	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  false,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  false,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  false,  true);	  NodeTraversal.traverseNode(compiler,    externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	148	None	replace
344	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  null,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  null,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  null,  true);	  NodeTraversal.traverseNode(compiler,    externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	148	None	replace
345	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  assertOnChange,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  assertOnChange,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  assertOnChange,  true);	  NodeTraversal.traverseNode(compiler,    externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	148	None	replace
346	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  null,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  null,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  null,  false);	  NodeTraversal.traverseNode(compiler,    externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	148	None	replace
347	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  parent,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  parent,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  parent,  true);	  NodeTraversal.traverseNode(compiler,    externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	148	None	replace
348	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  root,  false);	  NodeTraversal.traverseNode(compiler,    externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	148	None	replace
349	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  root,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  root,  true);	  NodeTraversal.traverseNode(compiler,    externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	148	None	replace
350	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	163	None	replace
351	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	163	None	replace
352	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverse(root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	163	None	replace
353	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkOkDuplicateDeclaration)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkOkDuplicateDeclaration)).traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkOkDuplicateDeclaration)).traverse(root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	163	None	replace
354	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkLocalDeclarations)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkLocalDeclarations)).traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkLocalDeclarations)).traverse(root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	163	None	replace
355	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkDeclarations)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkDeclarations)).traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkDeclarations)).traverse(root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	163	None	replace
356	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkHasOkDuplicateDeclaration)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkHasOkDuplicateDeclaration)).traverse(root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkHasOkDuplicateDeclaration)).traverse(root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	163	None	replace
357	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverse(compiler,  root);	  NodeTraversal.traverse(compiler,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	234	None	replace
358	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverse(compiler,  externs);	  NodeTraversal.traverse(compiler,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	234	None	replace
359	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);	  NodeTraversal.traverse(compiler,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	234	None	replace
360	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  externs);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverse(compiler,  renamer,  externs);	  NodeTraversal.traverse(compiler,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	234	None	replace
361	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverse(compiler,  externals);	  NodeTraversal.traverse(compiler,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	234	None	replace
362	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverse(compiler,  renamer,  root);	  NodeTraversal.traverse(compiler,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	234	None	replace
363	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots);  [CE]  reached  end  of  file  while  parsing  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  roots);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverse(compiler,  roots);	  NodeTraversal.traverse(compiler,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	234	None	replace
364	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseValues(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	216	None	replace
365	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseValues(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	216	None	replace
366	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseValues(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	216	None	replace
367	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  root,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  root,  hasOkDuplicateDeclaration);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseValues(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	216	None	replace
368	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(root,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(root,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(root,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseValues(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	216	None	replace
369	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  externals);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseValues(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	216	None	replace
370	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseValues(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseValues(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseValues(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseValues(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	216	None	replace
371	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	204	None	replace
372	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	204	None	replace
373	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	204	None	replace
374	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  externs.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  externs.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  externs.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	204	None	replace
375	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	204	None	replace
376	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  externs.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  externs.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  externs.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	204	None	replace
377	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter,  externs.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter,  externs.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter,  externs.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	204	None	replace
378	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	204	None	replace
379	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  checkUserDeclarations);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
380	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(converter,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
381	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  externals,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  externals,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  externals,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(converter,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
382	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements());	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	replace
383	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  assertOnChange);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	replace
384	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements());	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	replace
385	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements());	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	replace
386	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	replace
387	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  externs);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	replace
388	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  false);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  false);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	replace
389	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements()));  [CE]  ';'  expected  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements()));  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements()));	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  ';'  expected	114	None	replace
390	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
391	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
392	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
393	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
394	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
395	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
396	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
397	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
398	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externals,  false);	  NodeTraversal.traverseRoots(compiler,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	55	None	replace
399	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externes,  false);	  NodeTraversal.traverseRoots(compiler,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	55	None	replace
400	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(externs,  root,  false);	  NodeTraversal.traverseRoots(compiler,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	55	None	replace
401	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  false,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  false,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  false,  externs);	  NodeTraversal.traverseRoots(compiler,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	55	None	replace
402	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  roots,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  roots,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  roots,  true);	  NodeTraversal.traverseRoots(compiler,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	55	None	replace
403	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  false);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	139	None	replace
404	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  null,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  null,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  null,  true);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	139	None	replace
405	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  assertOnChange,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  assertOnChange,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  assertOnChange,  true);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	139	None	replace
406	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  false,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  false,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  false,  true);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	139	None	replace
407	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  parent,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  parent,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  parent,  true);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	139	None	replace
408	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  renamer,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  renamer,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  renamer,  true);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	139	None	replace
409	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);	  NodeTraversal    <    Node>    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	154	None	replace
410	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.transverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.transverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.transverseRoots(externs,  root);	  NodeTraversal    <    Node>    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	154	None	replace
411	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  parent);	  NodeTraversal    <    Node>    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	154	None	replace
412	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(converter,  externs,  root,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(converter,  externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(converter,  externs,  root,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(converter,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	replace
413	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(converter,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(converter,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(converter,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseRoots(converter,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	replace
414	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(converter,  externs,  root,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(converter,  externs,  root,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(converter,  externs,  root,  checkUserDeclarations);	  NodeTraversal.traverseRoots(converter,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	replace
415	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(converter,  externs,  root,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(converter,  externs,  root,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(converter,  externs,  root,  false);	  NodeTraversal.traverseRoots(converter,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	replace
416	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(converter,  externs,  root,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(converter,  externs,  root,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(converter,  externs,  root,  true);	  NodeTraversal.traverseRoots(converter,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	replace
417	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(converter,  root,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(converter,  root,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(converter,  root,  externs);	  NodeTraversal.traverseRoots(converter,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	replace
418	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(converter,  externs,  root,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(converter,  externs,  root,  renamer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(converter,  externs,  root,  renamer);	  NodeTraversal.traverseRoots(converter,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	replace
419	[BUG]  [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs);  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs);  compiler.traverseRoots(externs,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs);  compiler.traverseRoots(externs,  root);	  NodeTraversal    renamer    =    new    NodeTraversal(compiler,    renamer);    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	179	None	replace
420	[BUG]  [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  compiler.traverseRoots(externs,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  compiler.traverseRoots(externs,  root);	  NodeTraversal    renamer    =    new    NodeTraversal(compiler,    renamer);    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	179	None	replace
421	[BUG]  [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  root);  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  root);  compiler.traverseRoots(externs,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  new  NodeTraversal(compiler,  root);  compiler.traverseRoots(externs,  root);	  NodeTraversal    renamer    =    new    NodeTraversal(compiler,    renamer);    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	179	None	replace
422	[BUG]  [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  CATCH_BLOCK_VAR_ERROR);  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  CATCH_BLOCK_VAR_ERROR);  compiler.traverseRoots(externs,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  new  NodeTraversal(compiler,  CATCH_BLOCK_VAR_ERROR);  compiler.traverseRoots(externs,  root);	  NodeTraversal    renamer    =    new    NodeTraversal(compiler,    renamer);    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	179	None	replace
423	[BUG]  [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externals);  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externals);  compiler.traverseRoots(externs,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externals);  compiler.traverseRoots(externs,  root);	  NodeTraversal    renamer    =    new    NodeTraversal(compiler,    renamer);    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	179	None	replace
424	[BUG]  [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  INVALID_NAMES_UNIQUE);  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  INVALID_NAMES_UNIQUE);  compiler.traverseRoots(externs,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  new  NodeTraversal(compiler,  INVALID_NAMES_UNIQUE);  compiler.traverseRoots(externs,  root);	  NodeTraversal    renamer    =    new    NodeTraversal(compiler,    renamer);    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	179	None	replace
425	[BUG]  [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs.cloneTree());  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs.cloneTree());  compiler.traverseRoots(externs,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externs.cloneTree());  compiler.traverseRoots(externs,  root);	  NodeTraversal    renamer    =    new    NodeTraversal(compiler,    renamer);    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	179	None	replace
426	[BUG]  [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externes);  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externes);  compiler.traverseRoots(externs,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  new  NodeTraversal(compiler,  externes);  compiler.traverseRoots(externs,  root);	  NodeTraversal    renamer    =    new    NodeTraversal(compiler,    renamer);    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	179	None	replace
427	[BUG]  [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  parent);  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  parent);  compiler.traverseRoots(externs,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  new  NodeTraversal(compiler,  parent);  compiler.traverseRoots(externs,  root);	  NodeTraversal    renamer    =    new    NodeTraversal(compiler,    renamer);    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	179	None	replace
428	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
429	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
430	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
431	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
432	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
433	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal);  [CE]  reached  end  of  file  while  parsing  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
434	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
435	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
436	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	134	None	replace
437	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	134	None	replace
438	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	134	None	replace
439	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkOnChange)).traverseRoots(externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	134	None	replace
440	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  forbidChanges);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  root,  forbidChanges);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	134	None	replace
441	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  root).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  root).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations),  root).traverseRoots(externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	134	None	replace
442	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(externs,  parent);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    checkUserDeclarations)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	134	None	replace
443	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  assertOnChange);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	225	None	replace
444	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  checkUserDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  checkUserDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  checkUserDeclaration);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	225	None	replace
445	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  t,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  t,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  t,  root);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	225	None	replace
446	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internal)).traverseRoots(externs,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internal)).traverseRoots(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internal)).traverseRoots(externs,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    internal)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
447	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internal)).traverseRoots(externs,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internal)).traverseRoots(externs,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internal)).traverseRoots(externs,  externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    internal)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
448	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internal)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internal)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internal)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    internal)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
449	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  interns)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  interns)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  interns)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    internal)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
450	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internal)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internal)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internal)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    internal)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
451	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	104	None	replace
452	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	104	None	replace
453	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	104	None	replace
454	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	104	None	replace
455	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	104	None	replace
456	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	104	None	replace
457	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	104	None	replace
458	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	122	None	replace
459	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNKNOWN);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNKNOWN);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNKNOWN);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	122	None	replace
460	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	122	None	replace
461	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE  +  1);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE  +  1);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	122	None	replace
462	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE  |  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE  |  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE  |  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	122	None	replace
463	[BUG]  [BUGGY]  DeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  DeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	DeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	122	None	replace
464	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  null,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  null,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  null,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    null);    	non-compiled	[CE]  reached  end  of  file  while  parsing	167	None	replace
465	[BUG]  [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  externs.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  externs.traverseRoots(externs,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  externs.traverseRoots(externs,  root);	  NodeTraversal    renamer    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    renamer.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	178	None	replace
466	[BUG]  [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  parent);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  parent);	  NodeTraversal    renamer    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    renamer.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	178	None	replace
467	[BUG]  [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  externs,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  externs,  root);	  NodeTraversal    renamer    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    renamer.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	178	None	replace
468	[BUG]  [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  extern.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  extern.traverseRoots(externs,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  extern.traverseRoots(externs,  root);	  NodeTraversal    renamer    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    renamer.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	178	None	replace
469	[BUG]  [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  internal);  [CE]  reached  end  of  file  while  parsing  [FE]                                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  internal);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  internal);	  NodeTraversal    renamer    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    renamer.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	178	None	replace
470	[BUG]  [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  externs);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  externs);	  NodeTraversal    renamer    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    renamer.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	178	None	replace
471	[BUG]  [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal  renamer  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE).traverseRoots(externs,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal  renamer  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE).traverseRoots(externs,  root);	  NodeTraversal    renamer    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    renamer.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	178	None	replace
472	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  parent);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    parent);    	non-compiled	[CE]  reached  end  of  file  while  parsing	84	None	replace
473	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  parent);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    parent);    	non-compiled	[CE]  reached  end  of  file  while  parsing	84	None	replace
474	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  parent,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  parent,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  parent,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNode(compiler,    externs,    root,    parent);    	non-compiled	[CE]  reached  end  of  file  while  parsing	150	None	replace
475	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(externs,  root,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
476	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  renamer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(externs,  root,  renamer);	  NodeTraversal.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
477	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(externs,  root,  true);	  NodeTraversal.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
478	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(externs,  root,  new  NormalizeStatements());	  NodeTraversal.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
479	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  parent,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  parent,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  parent,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    parent);    	non-compiled	[CE]  reached  end  of  file  while  parsing	91	None	replace
480	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  parent,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  parent,  assertOnChange);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  parent,  assertOnChange);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    parent);    	non-compiled	[CE]  reached  end  of  file  while  parsing	91	None	replace
481	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  externals);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externals);    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
482	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  internals);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  internals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  internals);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externals);    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
483	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internals)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internals)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  internals)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externals);    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
484	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  internals);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  internals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  internals);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externals);    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
485	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  root);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(null,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
486	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(null,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
487	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(root,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(root,  externs);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(root,  externs);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(null,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
488	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	160	None	replace
489	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	160	None	replace
490	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  parent);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	160	None	replace
491	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs,  root);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	160	None	replace
492	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externals);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	160	None	replace
493	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externals);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	160	None	replace
494	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(parent.clone(),  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(parent.clone(),  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(parent.clone(),  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(parent.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	102	None	replace
495	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  parent.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  parent.cloneTree());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  parent.cloneTree());	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(parent.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	102	None	replace
496	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  parent.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  parent.cloneTree());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  parent.cloneTree());	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(parent.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	102	None	replace
497	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(mAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(mAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(mAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(CONVERT_WHILE_TO_FOR,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	69	None	replace
498	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(CONVERT_WHILE_TO_FOR,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	69	None	replace
499	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(CONVERT_WHILE_TO_FOR,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	69	None	replace
500	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(CONVERT_WHILE_TO_FOR,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	69	None	replace
501	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(CONVERT_WHILE_TO_FOR,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	69	None	replace
502	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(CONVERT_WHILE_TO_FOR,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	69	None	replace
503	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  roots);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  roots);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  roots);	  NodeTraversal.traverseRoots(compiler,    externes);    	non-compiled	[CE]  reached  end  of  file  while  parsing	56	None	replace
504	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  roots);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  roots);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  roots);	  NodeTraversal.traverseRoots(compiler,    externes);    	non-compiled	[CE]  reached  end  of  file  while  parsing	56	None	replace
505	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  parent,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  parent,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  parent,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(converter,    parent);    	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	replace
506	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  externals);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  externals);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(converter,    parent);    	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	replace
507	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations));  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations));  compiler.traverseRoots(externs,  root);	  NodeTraversal    <    Node>    t    =    new    NodeTraversal(    compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(    externals,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	243	None	replace
508	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  compiler.traverseRoots(externs,  root);	  NodeTraversal    <    Node>    t    =    new    NodeTraversal(    compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(    externals,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	243	None	replace
509	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);  compiler.traverseRoots(externs,  root);	  NodeTraversal    <    Node>    t    =    new    NodeTraversal(    compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(    externals,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	243	None	replace
510	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals);  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals);  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals);  compiler.traverseRoots(externs,  root);	  NodeTraversal    <    Node>    t    =    new    NodeTraversal(    compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(    externals,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	243	None	replace
511	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs);  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs);  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs);  compiler.traverseRoots(externs,  root);	  NodeTraversal    <    Node>    t    =    new    NodeTraversal(    compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(    externals,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	243	None	replace
512	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root));  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root));  compiler.traverseRoots(externs,  root);	  NodeTraversal    <    Node>    t    =    new    NodeTraversal(    compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(    externals,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	243	None	replace
513	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_DUPLICATE_NAMES_UNIQUE(compiler);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_DUPLICATE_NAMES_UNIQUE(compiler);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MAKE_DUPLICATE_NAMES_UNIQUE(compiler);	  MakeDeclaredNamesUnique    renamer    =    new    MAKE_DUPLICATE_NAMES_UNIQUE();    	non-compiled	[CE]  reached  end  of  file  while  parsing	189	None	replace
514	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_DUPLICATE_NAMES_UNIQUE(converter);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_DUPLICATE_NAMES_UNIQUE(converter);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MAKE_DUPLICATE_NAMES_UNIQUE(converter);	  MakeDeclaredNamesUnique    renamer    =    new    MAKE_DUPLICATE_NAMES_UNIQUE();    	non-compiled	[CE]  reached  end  of  file  while  parsing	189	None	replace
515	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_DUPLICATE_NAMES_UNIQUE(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_DUPLICATE_NAMES_UNIQUE(externs);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MAKE_DUPLICATE_NAMES_UNIQUE(externs);	  MakeDeclaredNamesUnique    renamer    =    new    MAKE_DUPLICATE_NAMES_UNIQUE();    	non-compiled	[CE]  reached  end  of  file  while  parsing	189	None	replace
516	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_DOUBLE_NAMES_UNIQUE();  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_DOUBLE_NAMES_UNIQUE();  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MAKE_DOUBLE_NAMES_UNIQUE();	  MakeDeclaredNamesUnique    renamer    =    new    MAKE_DUPLICATE_NAMES_UNIQUE();    	non-compiled	[CE]  reached  end  of  file  while  parsing	189	None	replace
517	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_DUPLICATE_NAMES_UNIQUE(null);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_DUPLICATE_NAMES_UNIQUE(null);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MAKE_DUPLICATE_NAMES_UNIQUE(null);	  MakeDeclaredNamesUnique    renamer    =    new    MAKE_DUPLICATE_NAMES_UNIQUE();    	non-compiled	[CE]  reached  end  of  file  while  parsing	189	None	replace
518	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter.clone(),  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter.clone(),  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter.clone(),  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(converter.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	96	None	replace
519	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter.cloneNode());  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter.cloneNode());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter.cloneNode());	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(converter.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	96	None	replace
520	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  compiler.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  compiler.cloneTree());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  compiler.cloneTree());	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(converter.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	96	None	replace
521	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter.cloneTree(),  MAKE_LCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter.cloneTree(),  MAKE_LCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter.cloneTree(),  MAKE_LCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(converter.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	96	None	replace
522	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  this,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  this,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  this,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	143	None	replace
523	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  null);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  null);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  null);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	143	None	replace
524	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  this,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  this,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  this,  checkUserDeclarations);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	143	None	replace
525	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  this,  constantMap);  [CE]  reached  end  of  file  while  parsing  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  this,  constantMap);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  this,  constantMap);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	143	None	replace
526	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externals,  true);	  NodeTraversal.traverseRoots(compiler,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	57	None	replace
527	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externes,  true);	  NodeTraversal.traverseRoots(compiler,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	57	None	replace
528	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  roots,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  roots,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  roots,  false);	  NodeTraversal.traverseRoots(compiler,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	57	None	replace
529	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  interns,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  interns,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  interns,  true);	  NodeTraversal.traverseRoots(compiler,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	57	None	replace
530	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  exprs,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  exprs,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  exprs,  true);	  NodeTraversal.traverseRoots(compiler,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	57	None	replace
531	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  false,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  false,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  false,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNode(compiler,    externs,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	147	None	replace
532	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  false,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  false,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  false,  true);	  NodeTraversal.traverseNode(compiler,    externs,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	147	None	replace
533	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  true);	  NodeTraversal.traverseNode(compiler,    externs,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	147	None	replace
534	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  true,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  true,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  true,  false);	  NodeTraversal.traverseNode(compiler,    externs,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	147	None	replace
535	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  renamer,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  renamer,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  renamer,  false);	  NodeTraversal.traverseNode(compiler,    externs,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	147	None	replace
536	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  root.cloneTree(),  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  root.cloneTree(),  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  root.cloneTree(),  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs,    root.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	95	None	replace
537	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE.cloneTree());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE.cloneTree());	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs,    root.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	95	None	replace
538	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(root,  externs.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(root,  externs.cloneTree());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(root,  externs.cloneTree());	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs,    root.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	95	None	replace
539	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  externs.cloneTree(),  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  externs.cloneTree(),  assertOnChange);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  externs.cloneTree(),  assertOnChange);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs,    root.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	95	None	replace
540	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  externs,  root.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  externs,  root.cloneTree());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  externs,  root.cloneTree());	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs,    root.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	95	None	replace
541	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  externs.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  externs.cloneTree());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  externs.cloneTree());	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs,    root.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	95	None	replace
542	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(converter,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(converter,  true);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(converter,  true);	  MakeDeclaredNamesUnique    renamer    =    new    MAKE_LOCAL_NAMES_UNIQUE(converter);    	non-compiled	[CE]  reached  end  of  file  while  parsing	170	None	replace
543	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(converter,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(converter,  false);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(converter,  false);	  MakeDeclaredNamesUnique    renamer    =    new    MAKE_LOCAL_NAMES_UNIQUE(converter);    	non-compiled	[CE]  reached  end  of  file  while  parsing	170	None	replace
544	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(converter,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(converter,  parent);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(converter,  parent);	  MakeDeclaredNamesUnique    renamer    =    new    MAKE_LOCAL_NAMES_UNIQUE(converter);    	non-compiled	[CE]  reached  end  of  file  while  parsing	170	None	replace
545	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(converter,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(converter,  assertOnChange);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(converter,  assertOnChange);	  MakeDeclaredNamesUnique    renamer    =    new    MAKE_LOCAL_NAMES_UNIQUE(converter);    	non-compiled	[CE]  reached  end  of  file  while  parsing	170	None	replace
546	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  true);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  true);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(null,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	193	None	replace
547	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(false,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(false,  false);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(false,  false);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(null,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	193	None	replace
548	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  false,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  false,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  false,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(null,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	193	None	replace
549	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  MAKE_LOCAL_NAMES_UNIQUE,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  MAKE_LOCAL_NAMES_UNIQUE,  false);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  MAKE_LOCAL_NAMES_UNIQUE,  false);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(null,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	193	None	replace
550	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverse(externs);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverse(externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverse(externs);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	159	None	replace
551	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	159	None	replace
552	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  this);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  this);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  this);	  NodeTraversal.traverseRoots(compiler,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	229	None	replace
553	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  this,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(compiler,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	229	None	replace
554	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  checkUserDeclarations);	  NodeTraversal.traverseRoots(compiler,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	229	None	replace
555	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  null);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  null);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  null);	  NodeTraversal.traverseRoots(compiler,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	229	None	replace
556	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  this);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  this);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externals,  this);	  NodeTraversal.traverseRoots(compiler,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	229	None	replace
557	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  this);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  this);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externes,  this);	  NodeTraversal.traverseRoots(compiler,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	229	None	replace
558	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  root,  this,  externs);	  NodeTraversal.traverseRoots(compiler,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	229	None	replace
559	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externals,  false);	  NodeTraversal.traverse(compiler,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
560	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externes,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externes,  false);	  NodeTraversal.traverse(compiler,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
561	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  false,  externs);	  NodeTraversal.traverse(compiler,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
562	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  roots,  true);	  NodeTraversal.traverse(compiler,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
563	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  interns,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  interns,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  interns,  false);	  NodeTraversal.traverse(compiler,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
564	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  DEFAULT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  DEFAULT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  DEFAULT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    DEFAULT_WHILE_TO_FOR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	226	None	replace
565	[BUG]  [BUGGY]  DeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  DEFAULT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  DeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  DEFAULT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	DeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  DEFAULT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    DEFAULT_WHILE_TO_FOR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	226	None	replace
566	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  DEFAULT_WILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  DEFAULT_WILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  DEFAULT_WILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    DEFAULT_WHILE_TO_FOR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	226	None	replace
567	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  DEFAULT_WHILE_TO_FOR,  DEFAULT_WHILE_TO_FOR);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  DEFAULT_WHILE_TO_FOR,  DEFAULT_WHILE_TO_FOR);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  DEFAULT_WHILE_TO_FOR,  DEFAULT_WHILE_TO_FOR);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    DEFAULT_WHILE_TO_FOR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	226	None	replace
568	[BUG]  [BUGGY]  DeseclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  DEFAULT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  DeseclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  DEFAULT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	DeseclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  DEFAULT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    DEFAULT_WHILE_TO_FOR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	226	None	replace
569	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs,  DEFAULT_WHILE_TO_FOR);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs,  DEFAULT_WHILE_TO_FOR);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs,  DEFAULT_WHILE_TO_FOR);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    DEFAULT_WHILE_TO_FOR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	226	None	replace
570	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  DEFAULT_WHILE_TO_FOR);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  DEFAULT_WHILE_TO_FOR);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  DEFAULT_WHILE_TO_FOR);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    DEFAULT_WHILE_TO_FOR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	226	None	replace
571	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  CATCH_BLOCK_VAR_ERROR);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  CATCH_BLOCK_VAR_ERROR);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  CATCH_BLOCK_VAR_ERROR);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_BLOCK_VAR_ERROR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	191	None	replace
572	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  CATCH_BLOCK_VAR_ERROR,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  CATCH_BLOCK_VAR_ERROR,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  CATCH_BLOCK_VAR_ERROR,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_BLOCK_VAR_ERROR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	191	None	replace
573	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs,  MAKE_BLOCK_VAR_ERROR);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs,  MAKE_BLOCK_VAR_ERROR);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs,  MAKE_BLOCK_VAR_ERROR);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_BLOCK_VAR_ERROR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	191	None	replace
574	[BUG]  [BUGGY]  DeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  DeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	DeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_BLOCK_VAR_ERROR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	191	None	replace
575	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	214	None	replace
576	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	214	None	replace
577	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	214	None	replace
578	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  externals);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	214	None	replace
579	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  parent);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	214	None	replace
580	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(root,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(root,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(root,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	214	None	replace
581	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  internal);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  internal);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  internal);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	214	None	replace
582	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  checkUserDeclarations)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  checkUserDeclarations)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  checkUserDeclarations)).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatement(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	214	None	replace
583	[BUG]  [BUGGY]  Node  renamer  =  externs.getNext();  [CE]  reached  end  of  file  while  parsing  [FE]                                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  Node  renamer  =  externs.getNext();  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	Node  renamer  =  externs.getNext();	  Node    renamer    =    MAKE_LOCAL_NAMES_UNIQUE.getNext();    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
584	[BUG]  [BUGGY]  Node  renamer  =  MAKE_LOCAL_NAMES_UNIQUE.removeFirst();  [CE]  reached  end  of  file  while  parsing  [FE]                                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  Node  renamer  =  MAKE_LOCAL_NAMES_UNIQUE.removeFirst();  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	Node  renamer  =  MAKE_LOCAL_NAMES_UNIQUE.removeFirst();	  Node    renamer    =    MAKE_LOCAL_NAMES_UNIQUE.getNext();    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
585	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  false,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  false,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  false,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
586	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  false,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  false,  parent);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  false,  parent);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
587	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  false,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  false,  true);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  false,  true);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
588	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(externs,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(externs,  root);	  MakeDeclaredNamesUnique    renamer    =    new    MAKE_LOCAL_NAMES_UNIQUE(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	171	None	replace
589	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(root);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(root);	  MakeDeclaredNamesUnique    renamer    =    new    MAKE_LOCAL_NAMES_UNIQUE(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	171	None	replace
590	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(externs,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(externs,  parent);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(externs,  parent);	  MakeDeclaredNamesUnique    renamer    =    new    MAKE_LOCAL_NAMES_UNIQUE(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	171	None	replace
591	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(converter,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(converter,  externs);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(converter,  externs);	  MakeDeclaredNamesUnique    renamer    =    new    MAKE_LOCAL_NAMES_UNIQUE(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	171	None	replace
592	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  parent,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  parent,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  parent,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    parent);    	non-compiled	[CE]  reached  end  of  file  while  parsing	142	None	replace
593	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  parent,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  parent,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  parent,  checkUserDeclarations);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    parent);    	non-compiled	[CE]  reached  end  of  file  while  parsing	142	None	replace
594	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(cATCH_BLOCK_VAR_ERROR,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(cATCH_BLOCK_VAR_ERROR,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(cATCH_BLOCK_VAR_ERROR,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(mAKE_BLOCK_VAR_ERROR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	228	None	replace
595	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(catchBLOCK_VAR_ERROR,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(catchBLOCK_VAR_ERROR,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(catchBLOCK_VAR_ERROR,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(mAKE_BLOCK_VAR_ERROR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	228	None	replace
596	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(catch_BLOCK_VAR_ERROR,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(catch_BLOCK_VAR_ERROR,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(catch_BLOCK_VAR_ERROR,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(mAKE_BLOCK_VAR_ERROR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	228	None	replace
597	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(cATCH_BLOCK_VAR_ERROR);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(cATCH_BLOCK_VAR_ERROR);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(cATCH_BLOCK_VAR_ERROR);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(mAKE_BLOCK_VAR_ERROR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	228	None	replace
598	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  root.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  root.cloneTree());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  root.cloneTree());	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(null,    externs.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	99	None	replace
599	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  externs.cloneTree(),  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  externs.cloneTree(),  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  externs.cloneTree(),  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(null,    externs.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	99	None	replace
600	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  externs,  root.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  externs,  root.cloneTree());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  externs,  root.cloneTree());	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(null,    externs.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	99	None	replace
601	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(parent,  externs.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(parent,  externs.cloneTree());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(parent,  externs.cloneTree());	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(null,    externs.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	99	None	replace
602	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(converter,    MAKE_LCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
603	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(converter,    MAKE_LCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
604	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  MAKE_LCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  MAKE_LCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  MAKE_LCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(converter,    MAKE_LCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
605	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(converter,    MAKE_LCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
606	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  MAKE_LOCAL_NAMES_UNIQUE,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  MAKE_LOCAL_NAMES_UNIQUE,  true);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  MAKE_LOCAL_NAMES_UNIQUE,  true);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(converter,    MAKE_LCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
607	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  MAKE_LCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  MAKE_LCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  MAKE_LCAL_NAMES_UNIQUE,  assertOnChange);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(converter,    MAKE_LCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
608	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs,  null);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs,  null);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs,  null);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs,    null);    	non-compiled	[CE]  reached  end  of  file  while  parsing	194	None	replace
609	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  externs,  null);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  externs,  null);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  externs,  null);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs,    null);    	non-compiled	[CE]  reached  end  of  file  while  parsing	194	None	replace
610	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(root,  null);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(root,  null);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(root,  null);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs,    null);    	non-compiled	[CE]  reached  end  of  file  while  parsing	194	None	replace
611	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  null,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  null,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs,  null,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs,    null);    	non-compiled	[CE]  reached  end  of  file  while  parsing	194	None	replace
612	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs,  assertOnChange);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs,  assertOnChange);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    assertOnChange);    	non-compiled	[CE]  reached  end  of  file  while  parsing	89	None	replace
613	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    assertOnChange);    	non-compiled	[CE]  reached  end  of  file  while  parsing	89	None	replace
614	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  checkUserDeclarations);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  checkUserDeclarations);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    assertOnChange);    	non-compiled	[CE]  reached  end  of  file  while  parsing	89	None	replace
615	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externals,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externals,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externals,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
616	[BUG]  [BUGGY]  DeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  DeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	DeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  root);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
617	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  false,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  false,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  false,  true);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	replace
618	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  renamer,  false);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	replace
619	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  assertOnChange,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  assertOnChange,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  assertOnChange,  false);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	replace
620	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  internal,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  internal,  false);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  internal,  false);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	replace
621	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs.getFirstChild(),  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs.getFirstChild(),  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs.getFirstChild(),  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs.getLastChild(),    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
622	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler.getLastChild(),  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler.getLastChild(),  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler.getLastChild(),  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs.getLastChild(),    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
623	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter.getLastChild(),  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter.getLastChild(),  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter.getLastChild(),  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs.getLastChild(),    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
624	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(parent.getLastChild(),  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(parent.getLastChild(),  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(parent.getLastChild(),  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs.getLastChild(),    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
625	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  externs.getLastChild(),  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  externs.getLastChild(),  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  externs.getLastChild(),  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs.getLastChild(),    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
626	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs.getLastChild(),  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs.getLastChild(),  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs.getLastChild(),  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs.getLastChild(),    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
627	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(mAKE_LOCAL_NAMES_UNIQUE,  externs.getLastChild());  [CE]  reached  end  of  file  while  parsing  [FE]                                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(mAKE_LOCAL_NAMES_UNIQUE,  externs.getLastChild());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(mAKE_LOCAL_NAMES_UNIQUE,  externs.getLastChild());	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(externs.getLastChild(),    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
628	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(null,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	166	None	replace
629	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(mockOkDuplicateDeclaration,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(mockOkDuplicateDeclaration,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(mockOkDuplicateDeclaration,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(null,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	166	None	replace
630	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  parent);	  NodeTraversal.traverse(compiler,    root,    parent);    	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
631	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  parent,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  parent,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  parent,  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    root,    parent);    	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
632	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externals,  parent);	  NodeTraversal.traverse(compiler,    root,    parent);    	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
633	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  externals);	  NodeTraversal.traverse(compiler,    root,    parent);    	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
634	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externes,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externes,  parent);	  NodeTraversal.traverse(compiler,    root,    parent);    	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
635	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  roots,  externs);	  NodeTraversal.traverse(compiler,    root,    parent);    	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
636	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(null,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	206	None	replace
637	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(null,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	206	None	replace
638	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(null,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(null,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverseRoots(null,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(null,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	206	None	replace
639	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(null,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(null,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(null,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(null,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	206	None	replace
640	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(parent.getFirstChild());  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(parent.getFirstChild());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(parent.getFirstChild());	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(parent.getLastChild());    	non-compiled	[CE]  reached  end  of  file  while  parsing	30	None	replace
641	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter.getFirstChild());  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter.getFirstChild());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter.getFirstChild());	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(parent.getLastChild());    	non-compiled	[CE]  reached  end  of  file  while  parsing	30	None	replace
642	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler.getFirstChild());  [CE]  reached  end  of  file  while  parsing  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler.getFirstChild());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler.getFirstChild());	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(parent.getLastChild());    	non-compiled	[CE]  reached  end  of  file  while  parsing	30	None	replace
643	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  externs.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  externs.cloneTree());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  externs.cloneTree());	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    externs.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	100	None	replace
644	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs,  root.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs,  root.cloneTree());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs,  root.cloneTree());	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    externs.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	100	None	replace
645	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE.cloneTree());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE.cloneTree());	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    externs.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	100	None	replace
646	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs.clone(),  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs.clone(),  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externs.clone(),  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    externs.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	100	None	replace
647	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE.cloneTree());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE.cloneTree());	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    externs.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	100	None	replace
648	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  checkUserDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  checkUserDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  checkUserDeclaration);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	103	None	replace
649	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  verifyOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  verifyOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  verifyOnChange);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	103	None	replace
650	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  hasOkDuplicateDeclaration,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  hasOkDuplicateDeclaration,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  hasOkDuplicateDeclaration,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	103	None	replace
651	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  hasOkDuplicateDeclaration,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  hasOkDuplicateDeclaration,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  hasOkDuplicateDeclaration,  checkUserDeclarations);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	103	None	replace
652	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  this.checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  this.checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  this.checkUserDeclarations);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	103	None	replace
653	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  forbidChanges);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  forbidChanges);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	165	None	replace
654	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  checkUserDeclarations);	  NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	165	None	replace
655	[BUG]  [BUGGY]  Node  renamer  =  externs.cloneTree();  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  Node  renamer  =  externs.cloneTree();  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	Node  renamer  =  externs.cloneTree();	  Node    renamer    =    MAKE_LOCAL_NAMES_UNIQUE.cloneTree();    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
656	[BUG]  [BUGGY]  Node  renamer  =  parent.cloneTree();  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  Node  renamer  =  parent.cloneTree();  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	Node  renamer  =  parent.cloneTree();	  Node    renamer    =    MAKE_LOCAL_NAMES_UNIQUE.cloneTree();    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
657	[BUG]  [BUGGY]  Node  renamer  =  root.cloneTree();  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  Node  renamer  =  root.cloneTree();  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	Node  renamer  =  root.cloneTree();	  Node    renamer    =    MAKE_LOCAL_NAMES_UNIQUE.cloneTree();    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
658	[BUG]  [BUGGY]  Node  renamer  =  MAKE_LOCAL_NAMES_UNIQUE.clonePath();  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  Node  renamer  =  MAKE_LOCAL_NAMES_UNIQUE.clonePath();  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	Node  renamer  =  MAKE_LOCAL_NAMES_UNIQUE.clonePath();	  Node    renamer    =    MAKE_LOCAL_NAMES_UNIQUE.cloneTree();    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
659	[BUG]  [BUGGY]  Node  renamer  =  MAKE_LOCAL_NAMES_UNIQUE.cloneTree(converter);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  Node  renamer  =  MAKE_LOCAL_NAMES_UNIQUE.cloneTree(converter);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	Node  renamer  =  MAKE_LOCAL_NAMES_UNIQUE.cloneTree(converter);	  Node    renamer    =    MAKE_LOCAL_NAMES_UNIQUE.cloneTree();    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
660	[BUG]  [BUGGY]  Node  renamer  =  MAKE_LOCAL_NAMES_UNIQUE.cloneChild(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  Node  renamer  =  MAKE_LOCAL_NAMES_UNIQUE.cloneChild(externs);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	Node  renamer  =  MAKE_LOCAL_NAMES_UNIQUE.cloneChild(externs);	  Node    renamer    =    MAKE_LOCAL_NAMES_UNIQUE.cloneTree();    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
661	[BUG]  [BUGGY]  Node  renamer  =  MAKE_LOCAL_NAMES_UNIQUE.cloneBlock();  [CE]  reached  end  of  file  while  parsing  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  Node  renamer  =  MAKE_LOCAL_NAMES_UNIQUE.cloneBlock();  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	Node  renamer  =  MAKE_LOCAL_NAMES_UNIQUE.cloneBlock();	  Node    renamer    =    MAKE_LOCAL_NAMES_UNIQUE.cloneTree();    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
662	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	180	None	replace
663	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer);	  NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	180	None	replace
664	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  renamer);	  NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	180	None	replace
665	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	180	None	replace
666	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	180	None	replace
667	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  assertOnChange);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  assertOnChange);	  NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	180	None	replace
668	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  assertOnChange);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  assertOnChange);	  NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	180	None	replace
669	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	180	None	replace
670	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  false);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  false);	  NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	180	None	replace
671	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  renamer);	  NodeTraversal.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	119	None	replace
672	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externes,  renamer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externes,  renamer);	  NodeTraversal.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	119	None	replace
673	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  renamer);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externals,  renamer);	  NodeTraversal.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	119	None	replace
674	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  root,  renamer,  externs);	  NodeTraversal.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	119	None	replace
675	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  renamer,  externs);	  NodeTraversal.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	119	None	replace
676	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  internals,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  internals,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  internals,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    externals);    	non-compiled	[CE]  reached  end  of  file  while  parsing	200	None	replace
677	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externes,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externes,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  externes,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    externals);    	non-compiled	[CE]  reached  end  of  file  while  parsing	200	None	replace
678	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  assertOnChange);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	64	None	replace
679	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	64	None	replace
680	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	64	None	replace
681	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  root.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  root.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs)).traverseRoots(externs,  root.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	209	None	replace
682	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  root.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  root.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  root.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	209	None	replace
683	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externals.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externals.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externals.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	209	None	replace
684	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  parent.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  parent.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  parent.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	209	None	replace
685	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externs.cloneTree())).traverseRoots(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	209	None	replace
686	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals)).traverseRoots(externs,  root.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals)).traverseRoots(externs,  root.cloneTree());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals)).traverseRoots(externs,  root.cloneTree());	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    externs.cloneTree());    	non-compiled	[CE]  reached  end  of  file  while  parsing	209	None	replace
687	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(converter,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
688	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	137	None	replace
689	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	137	None	replace
690	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	137	None	replace
691	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	137	None	replace
692	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	137	None	replace
693	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	137	None	replace
694	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	137	None	replace
695	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  true);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	137	None	replace
696	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
697	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
698	[BUG]  [BUGGY]  Node  renamer  =  externs.getParent();  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  Node  renamer  =  externs.getParent();  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	Node  renamer  =  externs.getParent();	  Node    renamer    =    MAKE_LOCAL_NAMES_UNIQUE.getParent();    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
699	[BUG]  [BUGGY]  Node  renamer  =  MAKE_LOCAL_NAMES_UNIQUE,  externs.getParent();  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  Node  renamer  =  MAKE_LOCAL_NAMES_UNIQUE,  externs.getParent();  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	Node  renamer  =  MAKE_LOCAL_NAMES_UNIQUE,  externs.getParent();	  Node    renamer    =    MAKE_LOCAL_NAMES_UNIQUE.getParent();    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
700	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  this,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  this,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  this,  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    externs,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	81	None	replace
701	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  null);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  null);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  null);	  NodeTraversal.traverse(compiler,    externs,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	81	None	replace
702	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  this,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  this,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  this,  checkUserDeclarations);	  NodeTraversal.traverse(compiler,    externs,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	81	None	replace
703	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  this,  constantMap);  [CE]  reached  end  of  file  while  parsing  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  this,  constantMap);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  this,  constantMap);	  NodeTraversal.traverse(compiler,    externs,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	81	None	replace
704	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  assertOnChange);	  NodeTraversal.traverse(compiler,    externs,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	81	None	replace
705	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseNode(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	146	None	replace
706	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  NodeTraversal.traverseNode(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	146	None	replace
707	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNode(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	146	None	replace
708	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);	  NodeTraversal.traverseNode(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	146	None	replace
709	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);	  NodeTraversal.traverseNode(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	146	None	replace
710	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNode(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	146	None	replace
711	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  NodeTraversal.traverseNode(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	146	None	replace
712	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(conVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(conVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(conVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MAKE_LOCAL_NAMES_UNIQUE(conVERT_WHILE_TO_FOR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	188	None	replace
713	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MAKE_LOCAL_NAMES_UNIQUE(conVERT_WHILE_TO_FOR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	188	None	replace
714	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(conVERT_WHILE_TO_FOR,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(conVERT_WHILE_TO_FOR,  true);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(conVERT_WHILE_TO_FOR,  true);	  MakeDeclaredNamesUnique    renamer    =    new    MAKE_LOCAL_NAMES_UNIQUE(conVERT_WHILE_TO_FOR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	188	None	replace
715	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(conVERT_WHILE_TO_FOR,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(conVERT_WHILE_TO_FOR,  false);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(conVERT_WHILE_TO_FOR,  false);	  MakeDeclaredNamesUnique    renamer    =    new    MAKE_LOCAL_NAMES_UNIQUE(conVERT_WHILE_TO_FOR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	188	None	replace
716	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(conVERT_WHILE_TO_FOR,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(conVERT_WHILE_TO_FOR,  externs);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(conVERT_WHILE_TO_FOR,  externs);	  MakeDeclaredNamesUnique    renamer    =    new    MAKE_LOCAL_NAMES_UNIQUE(conVERT_WHILE_TO_FOR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	188	None	replace
717	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(compiler,  CONVERT_WHILE_TO_FOR);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(compiler,  CONVERT_WHILE_TO_FOR);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE(compiler,  CONVERT_WHILE_TO_FOR);	  MakeDeclaredNamesUnique    renamer    =    new    MAKE_LOCAL_NAMES_UNIQUE(conVERT_WHILE_TO_FOR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	188	None	replace
718	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(root,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
719	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(parent,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(parent,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(parent,  root);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
720	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	141	None	replace
721	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  renamer,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root,  renamer,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root,  renamer,  hasOkDuplicateDeclaration);	  NodeTraversal.traverseConstants(compiler,    externs,    root,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	141	None	replace
722	[BUG]  [BUGGY]  NodeTraversal  visitor  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  visitor  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  visitor  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	  NodeTraversal    visitor    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	155	None	replace
723	[BUG]  [BUGGY]  NodeTraversal  visitor  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.transverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  visitor  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.transverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  visitor  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.transverseRoots(externs,  root);	  NodeTraversal    visitor    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	155	None	replace
724	[BUG]  [BUGGY]  NodeTraversal  visitor  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  visitor  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  visitor  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);	  NodeTraversal    visitor    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	155	None	replace
725	[BUG]  [BUGGY]  NodeTraversal  visitor  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations));  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  visitor  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  visitor  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations));  compiler.traverseRoots(externs,  root);	  NodeTraversal    visitor    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	155	None	replace
726	[BUG]  [BUGGY]  NodeTraversal  visitor  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  visitor  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  visitor  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  parent);	  NodeTraversal    visitor    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	155	None	replace
727	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externs);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
728	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals)).traverseRoots(externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
729	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externals);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  externals);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
730	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  parent);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
731	[BUG]  [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  compiler  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externes)).traverseRoots(externs,  root);	  NodeTraversal    compiler    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    root)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
732	[BUG]  [BUGGY]  NodeTraversal.traverseNodeRoots(compiler,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodeRoots(compiler,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodeRoots(compiler,  root);	  NodeTraversal.traverseNodeRoots(compiler,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	187	None	replace
733	[BUG]  [BUGGY]  NodeTraversal.traverseNodeRoots(compiler,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodeRoots(compiler,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodeRoots(compiler,  externs,  root);	  NodeTraversal.traverseNodeRoots(compiler,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	187	None	replace
734	[BUG]  [BUGGY]  NodeTraversal.traverseNodeRoots(compiler,  externals,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodeRoots(compiler,  externals,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodeRoots(compiler,  externals,  root);	  NodeTraversal.traverseNodeRoots(compiler,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	187	None	replace
735	[BUG]  [BUGGY]  NodeTraversal.traverseNodeRoots(compiler,  roots);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodeRoots(compiler,  roots);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodeRoots(compiler,  roots);	  NodeTraversal.traverseNodeRoots(compiler,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	187	None	replace
736	[BUG]  [BUGGY]  NodeTraversal.traverseConstantsRoots(compiler,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseConstantsRoots(compiler,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseConstantsRoots(compiler,  root);	  NodeTraversal.traverseNodeRoots(compiler,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	187	None	replace
737	[BUG]  [BUGGY]  NodeTraversal.traverseDeclaration(compiler,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseDeclaration(compiler,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseDeclaration(compiler,  root);	  NodeTraversal.traverseNodeRoots(compiler,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	187	None	replace
738	[BUG]  [BUGGY]  NodeTraversal.traverseNodeRoots(compiler,  externs,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodeRoots(compiler,  externs,  true);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodeRoots(compiler,  externs,  true);	  NodeTraversal.traverseNodeRoots(compiler,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	187	None	replace
739	[BUG]  [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	  NodeTraversal[]    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	157	None	replace
740	[BUG]  [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  externs);	  NodeTraversal[]    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	157	None	replace
741	[BUG]  [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);	  NodeTraversal[]    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	157	None	replace
742	[BUG]  [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations));  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations));  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations));  compiler.traverseRoots(externs,  root);	  NodeTraversal[]    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	157	None	replace
743	[BUG]  [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);  compiler.traverseRoots(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);  compiler.traverseRoots(externs,  root);	  NodeTraversal[]    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	157	None	replace
744	[BUG]  [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  parent);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal[]  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  parent);	  NodeTraversal[]    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	157	None	replace
745	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals)).traverseRoots(externs,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals)).traverseRoots(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals)).traverseRoots(externs,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externals)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
746	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals)).traverseRoots(externs,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals)).traverseRoots(externs,  externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  externals)).traverseRoots(externs,  externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    externals)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
747	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  INVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  INVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  INVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    CONVERT_WHILE_TO_FOR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	72	None	replace
748	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  INVERT_WHILE_TO_FOR);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  INVERT_WHILE_TO_FOR);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  INVERT_WHILE_TO_FOR);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    CONVERT_WHILE_TO_FOR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	72	None	replace
749	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  root,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  root,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externals,  root,  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    externals,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	183	None	replace
750	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);	  NodeTraversal.traverse(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	74	None	replace
751	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	74	None	replace
752	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);	  NodeTraversal.traverse(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	74	None	replace
753	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	74	None	replace
754	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  NodeTraversal.traverse(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	74	None	replace
755	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);	  NodeTraversal.traverse(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	74	None	replace
756	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  NodeTraversal.traverse(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	74	None	replace
757	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseExterns(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseExterns(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseExterns(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
758	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
759	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseDependency(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseDependency(externs,  root);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseDependency(externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
760	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
761	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  parent,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  parent,  assertOnChange);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  parent,  assertOnChange);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    parent);    	non-compiled	[CE]  reached  end  of  file  while  parsing	126	None	replace
762	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  parent,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  parent,  hasOkDuplicateDeclaration);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  parent,  hasOkDuplicateDeclaration);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    parent);    	non-compiled	[CE]  reached  end  of  file  while  parsing	126	None	replace
763	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange));  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange));  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange));	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange));    	non-compiled	[CE]  reached  end  of  file  while  parsing	236	None	replace
764	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE));  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE));  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE));	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange));    	non-compiled	[CE]  reached  end  of  file  while  parsing	236	None	replace
765	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE));  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE));  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE));	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange));    	non-compiled	[CE]  reached  end  of  file  while  parsing	236	None	replace
766	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange));    	non-compiled	[CE]  reached  end  of  file  while  parsing	236	None	replace
767	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange),  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange),  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange),  renamer);	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange));    	non-compiled	[CE]  reached  end  of  file  while  parsing	236	None	replace
768	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange));  [CE]  reached  end  of  file  while  parsing  [FE]                                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange));  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange));	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange));    	non-compiled	[CE]  reached  end  of  file  while  parsing	236	None	replace
769	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange));  [CE]  reached  end  of  file  while  parsing  [FE]                                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange));  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange));	  NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange));    	non-compiled	[CE]  reached  end  of  file  while  parsing	236	None	replace
770	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  new  NormalizeStatements(),  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  new  NormalizeStatements(),  assertOnChange);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  new  NormalizeStatements(),  assertOnChange);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	199	None	replace
771	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  assertOnChange,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  assertOnChange,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  assertOnChange,  new  NormalizeStatements());	  NodeTraversal.traverseNodes(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	199	None	replace
772	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  root,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  root,  new  NormalizeStatements());	  NodeTraversal.traverseNodes(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	199	None	replace
773	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  new  NormalizeStatements(),  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  new  NormalizeStatements(),  hasOkDuplicateDeclaration);  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  new  NormalizeStatements(),  hasOkDuplicateDeclaration);	  NodeTraversal.traverseNodes(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	199	None	replace
774	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  internal,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  internal,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  internal,  new  NormalizeStatements());	  NodeTraversal.traverseNodes(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	199	None	replace
775	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  true,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  true,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  true,  new  NormalizeStatements());	  NodeTraversal.traverseNodes(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	199	None	replace
776	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  new  NormalizeStatements(),  hasOkDuplicateDeclaration());  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  root,  new  NormalizeStatements(),  hasOkDuplicateDeclaration());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  root,  new  NormalizeStatements(),  hasOkDuplicateDeclaration());	  NodeTraversal.traverseNodes(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	199	None	replace
777	[BUG]  [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  false,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {      [BUGGY]  NodeTraversal.traverseNodes(compiler,  externs,  false,  new  NormalizeStatements());  [BUGGY]      new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	NodeTraversal.traverseNodes(compiler,  externs,  false,  new  NormalizeStatements());	  NodeTraversal.traverseNodes(compiler,    externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	199	None	replace
778	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(parent,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {      [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(parent,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(parent,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique(parent,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
