bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler);  [CE]  reached  end  of  file  while  parsing  [FE]    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler);	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	replace
2	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(MAKE_LOCAL_NAMES_UNIQUE);	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	replace
3	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(mAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(mAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(mAKE_LOCAL_NAMES_UNIQUE);	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	replace
4	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE();  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE();  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MAKE_LOCAL_NAMES_UNIQUE();	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	replace
5	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(compiler,  MAKE_LOCAL_NAMES_UNIQUE);	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	replace
6	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(converter);	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	replace
7	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs);	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	replace
8	[BUG]  [BUGGY]    [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	  	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	replace
9	[BUG]  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	    NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	add
10	[BUG]  [BUGGY]    NodeTraversal.traverseRoots(compiler,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]    NodeTraversal.traverseRoots(compiler,  externs,  root);  [BUGGY]  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	    NodeTraversal.traverseRoots(compiler,  externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	add
11	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  root);  [BUGGY]  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	    NodeTraversal.traverse(compiler,  externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	add
12	[BUG]  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [BUGGY]  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	    NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);		non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	add
13	[BUG]  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);  [BUGGY]  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	    NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  compiler.traverseRoots(externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	add
14	[BUG]  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  root);  [BUGGY]  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	    NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverseRoots(externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	add
15	[BUG]  [BUGGY]    NodeTraversal.traverseRoots(compiler,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]    NodeTraversal.traverseRoots(compiler,  root);  [BUGGY]  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	    NodeTraversal.traverseRoots(compiler,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	add
16	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs.cloneTree());  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs.cloneTree());	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	replace
17	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null);  [CE]  reached  end  of  file  while  parsing  [FE]      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(null);	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	replace
18	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(conVERT_WHILE_TO_FOR);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(conVERT_WHILE_TO_FOR);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(conVERT_WHILE_TO_FOR);	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	replace
19	[BUG]  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs.getLastChild());  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs.getLastChild());  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique(externs.getLastChild());	MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	replace
20	[BUG]  [BUGGY]    NodeTraversal.traverseNode(compiler,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]    NodeTraversal.traverseNode(compiler,  externs,  root);  [BUGGY]  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	    NodeTraversal.traverseNode(compiler,  externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	add
21	[BUG]  [BUGGY]    NodeTraversal.traverseNodes(compiler,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]    NodeTraversal.traverseNodes(compiler,  externs,  root);  [BUGGY]  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	    NodeTraversal.traverseNodes(compiler,  externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	add
22	[BUG]  [BUGGY]    NodeTraversal.traverseConstants(compiler,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]    NodeTraversal.traverseConstants(compiler,  externs,  root);  [BUGGY]  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	    NodeTraversal.traverseConstants(compiler,  externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	add
23	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	add
24	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [BUGGY]  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);		non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	add
25	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]    NodeTraversal.traverse(compiler,  root);  [BUGGY]  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))    .traverse(root);  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	120	122	5	replace	    NodeTraversal.traverse(compiler,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	add
