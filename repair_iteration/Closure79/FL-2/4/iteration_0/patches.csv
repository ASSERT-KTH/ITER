bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [CE]  no  suitable  method  found  for  traverse(Node,Node)  [FE]    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  no  suitable  method  found  for  traverse(Node,Node)	8	None	replace
2	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(root);  [CE]  cannot  find  symbol  checkUserDeclarations  [FE]        RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol  checkUserDeclarations	8	None	replace
3	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root);  [CE]  cannot  find  symbol  checkUserDeclarations  [FE]          RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol  checkUserDeclarations	8	None	replace
4	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs.traverse(root);  [CE]  ')'  expected  [FE]            RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs.traverse(root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externs.traverse(root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  ')'  expected	8	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	add	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	compilable	  [FE]  AssertionFailedError  	8	15	replace
6	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [FE]  AssertionFailedError  [FE]              RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	compilable	  [FE]  AssertionFailedError  	8	15	replace
7	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertFalse)).traverse(root);  [CE]  cannot  find  symbol  assertFalse  [FE]                RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertFalse)).traverse(root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertFalse)).traverse(root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol  assertFalse	8	None	replace
8	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEqualsOnChange)).traverse(root);  [CE]  cannot  find  symbol  assertEqualsOnChange  [FE]                  RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEqualsOnChange)).traverse(root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEqualsOnChange)).traverse(root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol  assertEqualsOnChange	8	None	replace
9	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverse(root);  [CE]  ')'  expected  [FE]                    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverse(root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  externals.traverse(root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  ')'  expected	8	None	replace
10	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  externs.traverse(root);  [CE]  ';'  expected  [FE]                      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  externs.traverse(root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  externs.traverse(root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  ';'  expected	8	None	replace
11	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverse(externs,  root);  [CE]  cannot  find  symbol  verifyOnChange  [FE]                        RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverse(externs,  root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverse(externs,  root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol  verifyOnChange	8	None	replace
12	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertFalseOnChange)).traverse(root);  [CE]  cannot  find  symbol  assertFalseOnChange  [FE]                          RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertFalseOnChange)).traverse(root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertFalseOnChange)).traverse(root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol  assertFalseOnChange	8	None	replace
13	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  root);  [CE]  cannot  find  symbol  [FE]                            RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol	8	None	replace
14	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertTrue)).traverse(root);  [CE]  cannot  find  symbol  assertTrue  [FE]                              RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertTrue)).traverse(root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertTrue)).traverse(root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol  assertTrue	8	None	replace
15	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(externs,  assertOnChange)).traverse(root);  [CE]  constructor  NormalizeStatements  in  class  NormalizeStatements  cannot  be  applied  to  given  types;  [FE]                                RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(externs,  assertOnChange)).traverse(root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(externs,  assertOnChange)).traverse(root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  constructor  NormalizeStatements  in  class  NormalizeStatements  cannot  be  applied  to  given  types;	8	None	replace
16	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNotNull)).traverse(root);  [CE]  cannot  find  symbol  assertNotNull  [FE]                                  RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNotNull)).traverse(root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNotNull)).traverse(root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol  assertNotNull	8	None	replace
17	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).traverse(root);  [CE]  cannot  find  symbol  verifyOnChange  [FE]                                    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).traverse(root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange)).traverse(root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol  verifyOnChange	8	None	replace
18	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                                      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverse(root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	add	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverse(root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	compilable	  [FE]  RuntimeException  	8	1	replace
19	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverse(root);  [FE]  RuntimeException  [FE]                                      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverse(root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  false)).traverse(root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	compilable	  [FE]  RuntimeException  	8	1	replace
20	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverse(root);  [CE]  cannot  find  symbol  verifyOnChange  [FE]                                        RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverse(root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverse(root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol  verifyOnChange	8	None	replace
21	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root.traverse(externs);  [CE]  ')'  expected  [FE]                                          RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root.traverse(externs);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root.traverse(externs);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  ')'  expected	8	None	replace
22	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(root);  [CE]  cannot  find  symbol  [FE]                                            RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol	8	None	replace
23	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNull)).traverse(root);  [CE]  cannot  find  symbol  assertNull  [FE]                                              RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNull)).traverse(root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNull)).traverse(root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol  assertNull	8	None	replace
24	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  root);  [CE]  cannot  find  symbol  [FE]                                                RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseValues(externs,  root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol	8	None	replace
25	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertCaseOnChange)).traverse(root);  [CE]  cannot  find  symbol  assertCaseOnChange  [FE]                                                  RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertCaseOnChange)).traverse(root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertCaseOnChange)).traverse(root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol  assertCaseOnChange	8	None	replace
26	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertAsOnChange)).traverse(root);  [CE]  cannot  find  symbol  assertAsOnChange  [FE]                                                    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertAsOnChange)).traverse(root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertAsOnChange)).traverse(root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol  assertAsOnChange	8	None	replace
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                                                      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	add	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	compilable	  [FE]  AssertionFailedError  	8	15	replace
28	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs);  [FE]  AssertionFailedError  [FE]                                                      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	compilable	  [FE]  AssertionFailedError  	8	15	replace
29	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);  [CE]  cannot  find  symbol  verifyOnChange  [FE]                                                        RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  verifyOnChange)).traverseRoots(externs,  root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol  verifyOnChange	8	None	replace
30	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertValidationOnChange)).traverse(root);  [CE]  cannot  find  symbol  assertValidationOnChange  [FE]                                                          RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertValidationOnChange)).traverse(root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertValidationOnChange)).traverse(root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol  assertValidationOnChange	8	None	replace
31	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVars)).traverse(root);  [CE]  cannot  find  symbol  assertVars  [FE]                                                            RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVars)).traverse(root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVars)).traverse(root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol  assertVars	8	None	replace
32	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root);  [CE]  cannot  find  symbol  [FE]                                                              RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol	8	None	replace
33	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVarsOnChange)).traverse(root);  [CE]  cannot  find  symbol  assertVarsOnChange  [FE]                                                                RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVarsOnChange)).traverse(root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertVarsOnChange)).traverse(root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol  assertVarsOnChange	8	None	replace
34	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertValues)).traverse(root);  [CE]  cannot  find  symbol  assertValues  [FE]                                                                  RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertValues)).traverse(root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertValues)).traverse(root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol  assertValues	8	None	replace
35	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertReturnOnChange)).traverse(root);  [CE]  cannot  find  symbol  assertReturnOnChange  [FE]                                                                    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertReturnOnChange)).traverse(root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertReturnOnChange)).traverse(root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol  assertReturnOnChange	8	None	replace
36	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverse(root);  [CE]  constructor  NormalizeStatements  in  class  NormalizeStatements  cannot  be  applied  to  given  types;  [FE]                                                                      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverse(root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false)).traverse(root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  constructor  NormalizeStatements  in  class  NormalizeStatements  cannot  be  applied  to  given  types;	8	None	replace
37	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                                                                        RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	add	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	compilable	  [FE]  RuntimeException  	8	1	replace
38	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root);  [FE]  RuntimeException  [FE]                                                                        RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	compilable	  [FE]  RuntimeException  	8	1	replace
39	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChange)).traverse(root);  [CE]  cannot  find  symbol  assertNoChange  [FE]                                                                          RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChange)).traverse(root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChange)).traverse(root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol  assertNoChange	8	None	replace
40	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertUniqueChange)).traverse(root);  [CE]  cannot  find  symbol  assertUniqueChange  [FE]                                                                            RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertUniqueChange)).traverse(root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertUniqueChange)).traverse(root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol  assertUniqueChange	8	None	replace
41	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  0)).traverse(root);  [CE]  constructor  NormalizeStatements  in  class  NormalizeStatements  cannot  be  applied  to  given  types;  [FE]                                                                              RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  0)).traverse(root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  0)).traverse(root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  constructor  NormalizeStatements  in  class  NormalizeStatements  cannot  be  applied  to  given  types;	8	None	replace
42	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  root.traverse(externs);  [CE]  ';'  expected  [FE]                                                                                RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  root.traverse(externs);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  root.traverse(externs);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  ';'  expected	8	None	replace
43	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse();  [CE]  no  suitable  method  found  for  traverse()  [FE]                                                                                  RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse();  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse();	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  no  suitable  method  found  for  traverse()	8	None	replace
44	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverse(externs);  [CE]  constructor  NormalizeStatements  in  class  NormalizeStatements  cannot  be  applied  to  given  types;  [FE]                                                                                    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverse(externs);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  root)).traverse(externs);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  constructor  NormalizeStatements  in  class  NormalizeStatements  cannot  be  applied  to  given  types;	8	None	replace
45	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs);  [CE]  cannot  find  symbol  [FE]                                                                                      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol	8	None	replace
46	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChanges)).traverse(root);  [CE]  cannot  find  symbol  assertNoChanges  [FE]                                                                                        RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChanges)).traverse(root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChanges)).traverse(root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol  assertNoChanges	8	None	replace
47	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertMode)).traverse(root);  [CE]  cannot  find  symbol  assertMode  [FE]                                                                                          RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertMode)).traverse(root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertMode)).traverse(root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol  assertMode	8	None	replace
48	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs,  root);  [CE]  cannot  find  symbol  [FE]                                                                                            RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs,  root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs,  root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol	8	None	replace
49	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root);  [CE]  cannot  find  symbol  [FE]                                                                                              RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs,  root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol	8	None	replace
50	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                                                                                                RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]    [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	add	  	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	compilable	  [FE]  AssertionFailedError  	8	16	replace
51	[BUG]  [BUGGY]    [FE]  AssertionFailedError  [FE]                                                                                                RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]    [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	  	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	compilable	  [FE]  AssertionFailedError  	8	16	replace
52	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  constructor  NormalizeStatements  in  class  NormalizeStatements  cannot  be  applied  to  given  types;  [FE]    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  constructor  NormalizeStatements  in  class  NormalizeStatements  cannot  be  applied  to  given  types;	8	None	replace
53	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(root);  [CE]  cannot  find  symbol  checkUserDeclarations  [FE]      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol  checkUserDeclarations	8	None	replace
54	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChange)).traverseRoots(externs,  root);  [CE]  cannot  find  symbol  assertNoChange  [FE]        RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChange)).traverseRoots(externs,  root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertNoChange)).traverseRoots(externs,  root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol  assertNoChange	8	None	replace
55	[BUG]  [BUGGY]  new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  cannot  find  symbol  [FE]          RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NormalizeStatement(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol	8	None	replace
56	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs);  [CE]  cannot  find  symbol  checkUserDeclarations  [FE]            RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol  checkUserDeclarations	8	None	replace
57	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  cannot  find  symbol  [FE]              RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol	8	None	replace
58	[BUG]  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange))).traverseRoots(externs,  root);  [CE]  ';'  expected  [FE]                RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange))).traverseRoots(externs,  root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NormalizeStatements(compiler,  new  NormalizeStatements(compiler,  assertOnChange))).traverseRoots(externs,  root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  ';'  expected	8	None	replace
59	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertCatchBLOCK_VAR_ERROR)).traverse(root);  [CE]  cannot  find  symbol  assertCatchBLOCK_VAR_ERROR  [FE]                  RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertCatchBLOCK_VAR_ERROR)).traverse(root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertCatchBLOCK_VAR_ERROR)).traverse(root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol  assertCatchBLOCK_VAR_ERROR	8	None	replace
60	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  root);  [CE]  cannot  find  symbol  [FE]                    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  cannot  find  symbol	8	None	replace
61	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange))).traverseRoots(externs,  root);  [CE]  ';'  expected  [FE]                      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange))).traverseRoots(externs,  root);  [BUGGY]  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }    [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange))).traverseRoots(externs,  root);	new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  	non-compiled	[CE]  ';'  expected	8	None	replace
