bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Normalize(compiler,  assertOnChange)  {  [CE]  <identifier>  expected  [FE]    RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  assertOnChange)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  assertOnChange)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
2	[BUG]  [BUGGY]  Normalize(compiler,  assertOnChange,  this.checkUserDeclarations)  {  [CE]  <identifier>  expected  [FE]      RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  assertOnChange,  this.checkUserDeclarations)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  assertOnChange,  this.checkUserDeclarations)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
3	[BUG]  [BUGGY]  Normalize(compiler,  assertOnChange,  false)  {  [CE]  <identifier>  expected  [FE]        RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  assertOnChange,  false)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  assertOnChange,  false)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
4	[BUG]  [BUGGY]  Normalize(compiler,  assertOnChange,  true)  {  [CE]  <identifier>  expected  [FE]          RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  assertOnChange,  true)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  assertOnChange,  true)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
5	[BUG]  [BUGGY]  Normalize(compiler,  assertOnChange,  hasOkDuplicateDeclaration)  {  [CE]  <identifier>  expected  [FE]            RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  assertOnChange,  hasOkDuplicateDeclaration)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  assertOnChange,  hasOkDuplicateDeclaration)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
6	[BUG]  [BUGGY]  Normalize(compiler,  assertOnChange,  checkUserDeclarations)  {  [CE]  <identifier>  expected  [FE]              RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  assertOnChange,  checkUserDeclarations)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  assertOnChange,  checkUserDeclarations)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
7	[BUG]  [BUGGY]  super(compiler,  assertOnChange);  [CE]  illegal  start  of  type  [FE]                RuntimeException  [CONTEXT]    [BUGGY]  super(compiler,  assertOnChange);  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	super(compiler,  assertOnChange);	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  illegal  start  of  type	1	None	replace
8	[BUG]  [BUGGY]  Normalize(compiler,  assertOnChange,  this.hasOkDuplicateDeclaration)  {  [CE]  <identifier>  expected  [FE]                  RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  assertOnChange,  this.hasOkDuplicateDeclaration)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  assertOnChange,  this.hasOkDuplicateDeclaration)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
9	[BUG]  [BUGGY]  Normalize(compiler,  assertOnChange,  this.checkUserDeclarations);  [CE]  <identifier>  expected  [FE]                    RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  assertOnChange,  this.checkUserDeclarations);  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  assertOnChange,  this.checkUserDeclarations);	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
10	[BUG]  [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next()  [CE]  <identifier>  expected  [FE]                      RuntimeException  [CONTEXT]    [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next()  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next()	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
11	[BUG]  [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator()  [CE]  <identifier>  expected  [FE]                        RuntimeException  [CONTEXT]    [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator()  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator()	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
12	[BUG]  [BUGGY]  Normalize(compiler,  assertOnChange,  this.assertOnChange)  {  [CE]  <identifier>  expected  [FE]                          RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  assertOnChange,  this.assertOnChange)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  assertOnChange,  this.assertOnChange)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
13	[BUG]  [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().  [CE]  <identifier>  expected  [FE]                            RuntimeException  [CONTEXT]    [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
14	[BUG]  [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  this.checkUserDeclarations)  {  [CE]  <identifier>  expected  [FE]                              RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  this.checkUserDeclarations)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  boolean  assertOnChange,  this.checkUserDeclarations)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
15	[BUG]  [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().  [CE]  <identifier>  expected  [FE]                                RuntimeException  [CONTEXT]    [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
16	[BUG]  [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator()  [CE]  <identifier>  expected  [FE]                                  RuntimeException  [CONTEXT]    [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator()  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator()	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
17	[BUG]  [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  checkUserDeclarations)  {  [CE]  <identifier>  expected  [FE]                                    RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  checkUserDeclarations)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  boolean  assertOnChange,  checkUserDeclarations)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
18	[BUG]  [BUGGY]  Normalize(compiler,  this.assertOnChange)  {  [CE]  <identifier>  expected  [FE]                                      RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  this.assertOnChange)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  this.assertOnChange)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
19	[BUG]  [BUGGY]  normalize(compiler,  assertOnChange)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                                        RuntimeException  [CONTEXT]    [BUGGY]  normalize(compiler,  assertOnChange)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	normalize(compiler,  assertOnChange)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
20	[BUG]  [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next().  [CE]  <identifier>  expected  [FE]                                          RuntimeException  [CONTEXT]    [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next().  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next().	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
21	[BUG]  [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().  [CE]  <identifier>  expected  [FE]                                            RuntimeException  [CONTEXT]    [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
22	[BUG]  [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().hasNext();  [CE]  <identifier>  expected  [FE]                                              RuntimeException  [CONTEXT]    [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().hasNext();  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().hasNext();	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
23	[BUG]  [BUGGY]  Normalize(compiler,  false,  assertOnChange)  {  [CE]  <identifier>  expected  [FE]                                                RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  false,  assertOnChange)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  false,  assertOnChange)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
24	[BUG]  [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator()  [CE]  <identifier>  expected  [FE]                                                  RuntimeException  [CONTEXT]    [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator()  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator()	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
25	[BUG]  [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator  [CE]  <identifier>  expected  [FE]                                                    RuntimeException  [CONTEXT]    [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
26	[BUG]  [BUGGY]  Normalize(compiler,  true,  assertOnChange)  {  [CE]  <identifier>  expected  [FE]                                                      RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  true,  assertOnChange)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  true,  assertOnChange)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
27	[BUG]  [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next()  [CE]  <identifier>  expected  [FE]                                                        RuntimeException  [CONTEXT]    [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next()  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next()	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
28	[BUG]  [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next().getDeclarations  [CE]  <identifier>  expected  [FE]                                                          RuntimeException  [CONTEXT]    [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next().getDeclarations  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next().getDeclarations	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
29	[BUG]  [BUGGY]  Normalize(compiler,  assertOnChange,  this.hasOkDuplicateDeclarations)  {  [CE]  <identifier>  expected  [FE]                                                            RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  assertOnChange,  this.hasOkDuplicateDeclarations)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  assertOnChange,  this.hasOkDuplicateDeclarations)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
30	[BUG]  [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator().  [CE]  <identifier>  expected  [FE]                                                              RuntimeException  [CONTEXT]    [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator().  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator().	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
31	[BUG]  [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().get  [CE]  <identifier>  expected  [FE]                                                                RuntimeException  [CONTEXT]    [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().get  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().get	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
32	[BUG]  [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().hasNext();  [CE]  <identifier>  expected  [FE]                                                                  RuntimeException  [CONTEXT]    [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().hasNext();  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().hasNext();	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
33	[BUG]  [BUGGY]  Normalize(compiler,  boolean  assertOnChange)  {  [CE]  <identifier>  expected  [FE]                                                                    RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  boolean  assertOnChange)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  boolean  assertOnChange)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
34	[BUG]  [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().hasNext();  [CE]  <identifier>  expected  [FE]                                                                      RuntimeException  [CONTEXT]    [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().hasNext();  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().hasNext();	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
35	[BUG]  [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next().getDeclarations().  [CE]  <identifier>  expected  [FE]                                                                        RuntimeException  [CONTEXT]    [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next().getDeclarations().  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next().getDeclarations().	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
36	[BUG]  [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next().to  [CE]  <identifier>  expected  [FE]                                                                          RuntimeException  [CONTEXT]    [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next().to  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next().to	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
37	[BUG]  [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator().  [CE]  <identifier>  expected  [FE]                                                                            RuntimeException  [CONTEXT]    [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator().  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator().	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
38	[BUG]  [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next()  [CE]  <identifier>  expected  [FE]                                                                              RuntimeException  [CONTEXT]    [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next()  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next()	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
39	[BUG]  [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().get  [CE]  <identifier>  expected  [FE]                                                                                RuntimeException  [CONTEXT]    [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().get  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().get	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkState(compiler!=  null);  this.assertOnChange  =  assertOnChange;  [CE]  <identifier>  expected  [FE]                                                                                  RuntimeException  [CONTEXT]    [BUGGY]  Preconditions.checkState(compiler!=  null);  this.assertOnChange  =  assertOnChange;  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Preconditions.checkState(compiler!=  null);  this.assertOnChange  =  assertOnChange;	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
41	[BUG]  [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next());  [CE]  <identifier>  expected  [FE]                                                                                    RuntimeException  [CONTEXT]    [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next());  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next());	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
42	[BUG]  [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().re  [CE]  <identifier>  expected  [FE]                                                                                      RuntimeException  [CONTEXT]    [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().re  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().next().getDeclarations().iterator().re	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
43	[BUG]  [BUGGY]  Normalize(compiler,  assertOnChange,  this)  {  [CE]  <identifier>  expected  [FE]                                                                                        RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  assertOnChange,  this)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  assertOnChange,  this)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
44	[BUG]  [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator().hasNext();  [CE]  <identifier>  expected  [FE]                                                                                          RuntimeException  [CONTEXT]    [BUGGY]  Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator().hasNext();  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Set  <  AbstractCompiler>  constantMap  =  Sets.newHashSet();  assertOnChange  =  constantMap.keySet().iterator().next().iterator().next().iterator().next().iterator().next().iterator().next().iterator().hasNext();	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
45	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]                                                                                            RuntimeException  [CONTEXT]    [BUGGY]    [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	  	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  illegal  start  of  type	1	None	replace
46	[BUG]  [BUGGY]  Normalize(compiler,  false)  {  [CE]  <identifier>  expected  [FE]    RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  false)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  false)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
47	[BUG]  [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  false)  {  [CE]  <identifier>  expected  [FE]      RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  false)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  boolean  assertOnChange,  false)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
48	[BUG]  [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  hasOkDuplicateDeclaration)  {  [CE]  <identifier>  expected  [FE]        RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  hasOkDuplicateDeclaration)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  boolean  assertOnChange,  hasOkDuplicateDeclaration)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
49	[BUG]  [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  this)  {  [CE]  <identifier>  expected  [FE]          RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  this)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  boolean  assertOnChange,  this)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
50	[BUG]  [BUGGY]  Normalize(compiler,  assertOnChange,  CONVERT_WHILE_TO_FOR)  {  [CE]  <identifier>  expected  [FE]            RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  assertOnChange,  CONVERT_WHILE_TO_FOR)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  assertOnChange,  CONVERT_WHILE_TO_FOR)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
51	[BUG]  [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  true)  {  [CE]  <identifier>  expected  [FE]              RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  true)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  boolean  assertOnChange,  true)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
52	[BUG]  [BUGGY]  Normalize(compiler,  this.checkUserDeclarations,  assertOnChange)  {  [CE]  <identifier>  expected  [FE]                RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  this.checkUserDeclarations,  assertOnChange)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  this.checkUserDeclarations,  assertOnChange)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
53	[BUG]  [BUGGY]  Normalize(compiler,  String.valueOf(assertOnChange))  {  [CE]  <identifier>  expected  [FE]                  RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  String.valueOf(assertOnChange))  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  String.valueOf(assertOnChange))  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
54	[BUG]  [BUGGY]  Normalize(Compiler  compiler,  boolean  assertOnChange,  this.checkUserDeclarations)  {  [CE]  illegal  start  of  type  [FE]                    RuntimeException  [CONTEXT]    [BUGGY]  Normalize(Compiler  compiler,  boolean  assertOnChange,  this.checkUserDeclarations)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(Compiler  compiler,  boolean  assertOnChange,  this.checkUserDeclarations)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  illegal  start  of  type	1	None	replace
55	[BUG]  [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  Integer.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                      RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  Integer.MAX_VALUE)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  boolean  assertOnChange,  Integer.MAX_VALUE)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
56	[BUG]  [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  this.checkUsersOverVars)  {  [CE]  <identifier>  expected  [FE]                        RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  this.checkUsersOverVars)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  boolean  assertOnChange,  this.checkUsersOverVars)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
57	[BUG]  [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  ConVERT_WHILE_TO_FOR)  {  [CE]  <identifier>  expected  [FE]                          RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  ConVERT_WHILE_TO_FOR)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  boolean  assertOnChange,  ConVERT_WHILE_TO_FOR)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
58	[BUG]  [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  BooleanConstants.DEFAULT_CONVERT_WHILE_TO_FOR)  {  [CE]  <identifier>  expected  [FE]                            RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  BooleanConstants.DEFAULT_CONVERT_WHILE_TO_FOR)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  boolean  assertOnChange,  BooleanConstants.DEFAULT_CONVERT_WHILE_TO_FOR)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
59	[BUG]  [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  UnsupportedOperation.DEFAULT_CONVERT_WHILE_TO_FOR)  {  [CE]  <identifier>  expected  [FE]                              RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  UnsupportedOperation.DEFAULT_CONVERT_WHILE_TO_FOR)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  boolean  assertOnChange,  UnsupportedOperation.DEFAULT_CONVERT_WHILE_TO_FOR)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
60	[BUG]  [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  this.hasOkDuplicateDeclaration)  {  [CE]  <identifier>  expected  [FE]                                RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  this.hasOkDuplicateDeclaration)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  boolean  assertOnChange,  this.hasOkDuplicateDeclaration)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
61	[BUG]  [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  this.checkUserDeclarations);  [CE]  <identifier>  expected  [FE]                                  RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  this.checkUserDeclarations);  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  boolean  assertOnChange,  this.checkUserDeclarations);	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
62	[BUG]  [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  verifyOnChange)  {  [CE]  <identifier>  expected  [FE]                                    RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  verifyOnChange)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  boolean  assertOnChange,  verifyOnChange)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
63	[BUG]  [BUGGY]  Normalize(compiler,  AbstractCompiler  compiler,  boolean  assertOnChange)  {  [CE]  <identifier>  expected  [FE]                                      RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  AbstractCompiler  compiler,  boolean  assertOnChange)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  AbstractCompiler  compiler,  boolean  assertOnChange)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
64	[BUG]  [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  isVerifyConstants)  {  [CE]  <identifier>  expected  [FE]                                        RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  isVerifyConstants)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  boolean  assertOnChange,  isVerifyConstants)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
65	[BUG]  [BUGGY]  Normalize(compiler,!assertOnChange)  {  [CE]  <identifier>  expected  [FE]                                          RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,!assertOnChange)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,!assertOnChange)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
66	[BUG]  [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  LAST_LOCAL_NAMES_UNIQUE)  {  [CE]  <identifier>  expected  [FE]                                            RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  LAST_LOCAL_NAMES_UNIQUE)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  boolean  assertOnChange,  LAST_LOCAL_NAMES_UNIQUE)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
67	[BUG]  [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  BooleanConstants.DEFAULT_LOCAL_NAMES_UNIQUE)  {  [CE]  <identifier>  expected  [FE]                                              RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  BooleanConstants.DEFAULT_LOCAL_NAMES_UNIQUE)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  boolean  assertOnChange,  BooleanConstants.DEFAULT_LOCAL_NAMES_UNIQUE)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
68	[BUG]  [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  checkUserDeclarations);  [CE]  <identifier>  expected  [FE]                                                RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  checkUserDeclarations);  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  boolean  assertOnChange,  checkUserDeclarations);	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
69	[BUG]  [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  super.checkUserDeclarations)  {  [CE]  <identifier>  expected  [FE]                                                  RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  super.checkUserDeclarations)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  boolean  assertOnChange,  super.checkUserDeclarations)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
70	[BUG]  [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  CheckUserDeclaration  <  CONVERT_WHILE_TO_FOR)  {  [CE]  <identifier>  expected  [FE]                                                    RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  CheckUserDeclaration  <  CONVERT_WHILE_TO_FOR)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  boolean  assertOnChange,  CheckUserDeclaration  <  CONVERT_WHILE_TO_FOR)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
71	[BUG]  [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  HashMap  <  String,Object>  constantMap)  {  [CE]  <identifier>  expected  [FE]                                                      RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  HashMap  <  String,Object>  constantMap)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  boolean  assertOnChange,  HashMap  <  String,Object>  constantMap)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
72	[BUG]  [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  UnsupportedOperation.DEFAULT_LOCAL_NAMES_UNIQUE)  {  [CE]  <identifier>  expected  [FE]                                                        RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  UnsupportedOperation.DEFAULT_LOCAL_NAMES_UNIQUE)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  boolean  assertOnChange,  UnsupportedOperation.DEFAULT_LOCAL_NAMES_UNIQUE)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
73	[BUG]  [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  Preconditions.checkNotNull(compiler))  {  [CE]  <identifier>  expected  [FE]                                                          RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  Preconditions.checkNotNull(compiler))  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  boolean  assertOnChange,  Preconditions.checkNotNull(compiler))  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
74	[BUG]  [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  this.checkUserDeclaration)  {  [CE]  <identifier>  expected  [FE]                                                            RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  this.checkUserDeclaration)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  boolean  assertOnChange,  this.checkUserDeclaration)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
75	[BUG]  [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  BooleanConstants.DEFAULT_TO_FOR)  {  [CE]  <identifier>  expected  [FE]                                                              RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  BooleanConstants.DEFAULT_TO_FOR)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  boolean  assertOnChange,  BooleanConstants.DEFAULT_TO_FOR)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
76	[BUG]  [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  checkUsersOverVars)  {  [CE]  <identifier>  expected  [FE]                                                                RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  checkUsersOverVars)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  boolean  assertOnChange,  checkUsersOverVars)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
77	[BUG]  [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  hasOkDuplicateDeclarations)  {  [CE]  <identifier>  expected  [FE]                                                                  RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  hasOkDuplicateDeclarations)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  boolean  assertOnChange,  hasOkDuplicateDeclarations)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
78	[BUG]  [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  LAST_VALID_NAMES_UNIQUE)  {  [CE]  <identifier>  expected  [FE]                                                                    RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  LAST_VALID_NAMES_UNIQUE)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  boolean  assertOnChange,  LAST_VALID_NAMES_UNIQUE)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
79	[BUG]  [BUGGY]  Normalize(Compiler  compiler,  boolean  assertOnChange,  checkUserDeclarations)  {  [CE]  <identifier>  expected  [FE]                                                                      RuntimeException  [CONTEXT]    [BUGGY]  Normalize(Compiler  compiler,  boolean  assertOnChange,  checkUserDeclarations)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(Compiler  compiler,  boolean  assertOnChange,  checkUserDeclarations)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
80	[BUG]  [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  this.hasOkDuplicateDeclarations)  {  [CE]  <identifier>  expected  [FE]                                                                        RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  this.hasOkDuplicateDeclarations)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  boolean  assertOnChange,  this.hasOkDuplicateDeclarations)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
81	[BUG]  [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  this.assertOnChange)  {  [CE]  <identifier>  expected  [FE]                                                                          RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  this.assertOnChange)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  boolean  assertOnChange,  this.assertOnChange)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
82	[BUG]  [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  Boolean.TRUE)  {  [CE]  <identifier>  expected  [FE]                                                                            RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  Boolean.TRUE)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  boolean  assertOnChange,  Boolean.TRUE)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
83	[BUG]  [BUGGY]  Normalize(compiler,  assertOnChange,  checkUserDeclarations);  [CE]  <identifier>  expected  [FE]    RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  assertOnChange,  checkUserDeclarations);  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  assertOnChange,  checkUserDeclarations);	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
84	[BUG]  [BUGGY]  Normalize(compiler,  this.assertOnChange,  assertOnChange)  {  [CE]  <identifier>  expected  [FE]      RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  this.assertOnChange,  assertOnChange)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  this.assertOnChange,  assertOnChange)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
85	[BUG]  [BUGGY]  Normalize(compiler,  assertOnChange);  [CE]  <identifier>  expected  [FE]        RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  assertOnChange);  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  assertOnChange);	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
86	[BUG]  [BUGGY]  Normalize(compiler,  assertOnChange,  hasOkDuplicateDeclarations)  {  [CE]  <identifier>  expected  [FE]          RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  assertOnChange,  hasOkDuplicateDeclarations)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  assertOnChange,  hasOkDuplicateDeclarations)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
87	[BUG]  [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  checkUserDeclarations())  {  [CE]  <identifier>  expected  [FE]            RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  checkUserDeclarations())  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  boolean  assertOnChange,  checkUserDeclarations())  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
88	[BUG]  [BUGGY]  Normalize(compiler,  assertOnChange,  STRICT_LOCAL_NAMES_UNIQUE)  {  [CE]  <identifier>  expected  [FE]              RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  assertOnChange,  STRICT_LOCAL_NAMES_UNIQUE)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  assertOnChange,  STRICT_LOCAL_NAMES_UNIQUE)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
89	[BUG]  [BUGGY]  Normalize(compiler,  assertOnChange,  this.checkUsersOverVars)  {  [CE]  <identifier>  expected  [FE]                RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  assertOnChange,  this.checkUsersOverVars)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  assertOnChange,  this.checkUsersOverVars)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
90	[BUG]  [BUGGY]  Normalize(compiler,  assertOnChange),  this.checkUserDeclarations);  [CE]  <identifier>  expected  [FE]                  RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  assertOnChange),  this.checkUserDeclarations);  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  assertOnChange),  this.checkUserDeclarations);	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
91	[BUG]  [BUGGY]  Normalize(compiler,  assertOnChange,  this);  [CE]  <identifier>  expected  [FE]                    RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  assertOnChange,  this);  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  assertOnChange,  this);	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
92	[BUG]  [BUGGY]  Normalize(compiler,  assertOnChange,  DEFAULT_LOCAL_NAMES_UNIQUE)  {  [CE]  <identifier>  expected  [FE]                      RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  assertOnChange,  DEFAULT_LOCAL_NAMES_UNIQUE)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  assertOnChange,  DEFAULT_LOCAL_NAMES_UNIQUE)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
93	[BUG]  [BUGGY]  Normalize(compiler,  assertOnChange),  this.checkUserDeclarations)  {  [CE]  <identifier>  expected  [FE]                        RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  assertOnChange),  this.checkUserDeclarations)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  assertOnChange),  this.checkUserDeclarations)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
94	[BUG]  [BUGGY]  Normalize(compiler,  assertOnChange,  UnsupportedOperation.DEFAULT_LOCAL_NAMES_UNIQUE)  {  [CE]  <identifier>  expected  [FE]                          RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  assertOnChange,  UnsupportedOperation.DEFAULT_LOCAL_NAMES_UNIQUE)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  assertOnChange,  UnsupportedOperation.DEFAULT_LOCAL_NAMES_UNIQUE)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
95	[BUG]  [BUGGY]  Normalize(compiler,  assertOnChange,  verifyOnChange)  {  [CE]  <identifier>  expected  [FE]                            RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  assertOnChange,  verifyOnChange)  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  assertOnChange,  verifyOnChange)  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
96	[BUG]  [BUGGY]  Normalize(compiler,  assertOnChange,  this.checkUserDeclarations),  [CE]  <identifier>  expected  [FE]                              RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  assertOnChange,  this.checkUserDeclarations),  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  assertOnChange,  this.checkUserDeclarations),	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
97	[BUG]  [BUGGY]  Normalize(compiler,  assertOnChange,  this.assertOnChange);  [CE]  <identifier>  expected  [FE]                                RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  assertOnChange,  this.assertOnChange);  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  assertOnChange,  this.assertOnChange);	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
98	[BUG]  [BUGGY]  Normalize(compiler,  assertOnChange,  Preconditions.checkNotNull(compiler));  [CE]  <identifier>  expected  [FE]                                  RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  assertOnChange,  Preconditions.checkNotNull(compiler));  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  assertOnChange,  Preconditions.checkNotNull(compiler));	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
99	[BUG]  [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  this.checkUserDeclarations())  {  [CE]  <identifier>  expected  [FE]                                    RuntimeException  [CONTEXT]    [BUGGY]  Normalize(compiler,  boolean  assertOnChange,  this.checkUserDeclarations())  {  [BUGGY]  this.compiler  =  compiler;  this.assertOnChange  =  assertOnChange;    }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  <init>  [RETURN_TYPE]  AbstractCompiler,boolean)  AbstractCompiler  compiler  boolean  assertOnChange  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  Set  hasOkDuplicateDeclaration  Map  constantMap  DiagnosticType  CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	Normalize(compiler,  boolean  assertOnChange,  this.checkUserDeclarations())  {	Normalize(AbstractCompiler  compiler,  boolean  assertOnChange)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
