bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  PropagateDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  PropagateDeclarationHandler());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externs,  new  PropagateDeclarationHandler());	      NodeTraversal.traverse(compiler,    root,    new    PropagateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
2	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  PropagateDeclarationHandler(),  externs);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  PropagateDeclarationHandler(),  externs);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  PropagateDeclarationHandler(),  externs);	      NodeTraversal.traverse(compiler,    root,    new    PropagateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
3	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  PropagateDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  PropagateDeclarationHandler());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externals,  new  PropagateDeclarationHandler());	      NodeTraversal.traverse(compiler,    root,    new    PropagateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
4	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  PropagateDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  PropagateDeclarationHandler());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externes,  new  PropagateDeclarationHandler());	      NodeTraversal.traverse(compiler,    root,    new    PropagateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
5	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  PropagateDeclarationHandler(),  scopeCreator);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  PropagateDeclarationHandler(),  scopeCreator);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  PropagateDeclarationHandler(),  scopeCreator);	      NodeTraversal.traverse(compiler,    root,    new    PropagateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
6	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DeprecatedDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DeprecatedDeclarationHandler());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  DeprecatedDeclarationHandler());	      NodeTraversal.traverse(compiler,    root,    new    PropagateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
7	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  externs);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(compiler,  externs);	  Callback    tickler    =    new    ScopeTicklingCallback(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
8	[BUG]  [BUGGY]  NodeTraversal  warning  =  new  NodeTraversal(compiler,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  warning  =  new  NodeTraversal(compiler,  externs);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal  warning  =  new  NodeTraversal(compiler,  externs);	  Callback    tickler    =    new    ScopeTicklingCallback(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
9	[BUG]  [BUGGY]  NodeTraversal  tickler  =  new  ScopeTicklingCallback(compiler);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  tickler  =  new  ScopeTicklingCallback(compiler);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal  tickler  =  new  ScopeTicklingCallback(compiler);	  Callback    tickler    =    new    ScopeTicklingCallback(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
10	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(root,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(root,  externs);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(root,  externs);	  Callback    tickler    =    new    ScopeTicklingCallback(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
11	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  externals);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(compiler,  externals);	  Callback    tickler    =    new    ScopeTicklingCallback(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
12	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  new  DuplicateDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  new  DuplicateDeclarationHandler());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  new  DuplicateDeclarationHandler());	      NodeTraversal.traverseRoots(compiler,    root,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	33	None	replace
13	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  new  DuplicateDeclarationHandler(),  externs);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  new  DuplicateDeclarationHandler(),  externs);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverseRoots(compiler,  root,  new  DuplicateDeclarationHandler(),  externs);	      NodeTraversal.traverseRoots(compiler,    root,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	33	None	replace
14	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  new  DuplicateDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  new  DuplicateDeclarationHandler());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverseRoots(compiler,  externals,  new  DuplicateDeclarationHandler());	      NodeTraversal.traverseRoots(compiler,    root,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	33	None	replace
15	[BUG]  [BUGGY]  NodeTraversal.traverseDeclarations(compiler,  externs,  new  DuplicateDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseDeclarations(compiler,  externs,  new  DuplicateDeclarationHandler());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverseDeclarations(compiler,  externs,  new  DuplicateDeclarationHandler());	      NodeTraversal.traverseRoots(compiler,    root,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	33	None	replace
16	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  new  DuplicateDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  new  DuplicateDeclarationHandler());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverseRoots(compiler,  externes,  new  DuplicateDeclarationHandler());	      NodeTraversal.traverseRoots(compiler,    root,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	33	None	replace
17	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  new  DuplicateDeclarationHandler(),  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  new  DuplicateDeclarationHandler(),  externals);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverseRoots(compiler,  root,  new  DuplicateDeclarationHandler(),  externals);	      NodeTraversal.traverseRoots(compiler,    root,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	33	None	replace
18	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  new  DuplicateDeclarationHandler(),  scopeCreator);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  new  DuplicateDeclarationHandler(),  scopeCreator);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverseRoots(compiler,  root,  new  DuplicateDeclarationHandler(),  scopeCreator);	      NodeTraversal.traverseRoots(compiler,    root,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	33	None	replace
19	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  SerializeDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  SerializeDeclarationHandler());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externs,  new  SerializeDeclarationHandler());	      NodeTraversal.traverse(compiler,    root,    new    SerializeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
20	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  SerializeDeclarationHandler(),  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  SerializeDeclarationHandler(),  externs);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  SerializeDeclarationHandler(),  externs);	      NodeTraversal.traverse(compiler,    root,    new    SerializeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
21	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  SerializeDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  SerializeDeclarationHandler());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externals,  new  SerializeDeclarationHandler());	      NodeTraversal.traverse(compiler,    root,    new    SerializeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
22	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  SerializeDeclarationHandler(),  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  SerializeDeclarationHandler(),  externals);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  SerializeDeclarationHandler(),  externals);	      NodeTraversal.traverse(compiler,    root,    new    SerializeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
23	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  SerializeDeclarationHandler(),  scopeCreator);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  SerializeDeclarationHandler(),  scopeCreator);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  SerializeDeclarationHandler(),  scopeCreator);	      NodeTraversal.traverse(compiler,    root,    new    SerializeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
24	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  SerializeDeclarationHandler(),  expr);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  SerializeDeclarationHandler(),  expr);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  SerializeDeclarationHandler(),  expr);	      NodeTraversal.traverse(compiler,    root,    new    SerializeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
25	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationCallback());  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationCallback());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationCallback());	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
26	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  DuplicateDeclarationCallback());  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  DuplicateDeclarationCallback());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externals,  new  DuplicateDeclarationCallback());	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
27	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  DuplicateDeclarationCallback());  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  DuplicateDeclarationCallback());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externes,  new  DuplicateDeclarationCallback());	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
28	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationCallback());  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]                [BUGGY]  nodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationCallback());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	nodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationCallback());	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
29	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  interns,  new  DuplicateDeclarationCallback());  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  interns,  new  DuplicateDeclarationCallback());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  interns,  new  DuplicateDeclarationCallback());	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
30	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatementHandler());  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatementHandler());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatementHandler());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatementHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
31	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatementHandler());  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatementHandler());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatementHandler());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatementHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
32	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatementHandler());  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatementHandler());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatementHandler());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatementHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
33	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(),  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(),  hasOkDuplicateDeclaration);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(),  hasOkDuplicateDeclaration);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatementHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
34	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  interns,  new  NormalizeStatementHandler());  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  interns,  new  NormalizeStatementHandler());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  interns,  new  NormalizeStatementHandler());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatementHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
35	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  externs,  new  NormalizeStatementHandler());  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]                [BUGGY]  nodeTraversal.traverse(compiler,  externs,  new  NormalizeStatementHandler());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	nodeTraversal.traverse(compiler,  externs,  new  NormalizeStatementHandler());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatementHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
36	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(),  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(),  assertOnChange);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(),  assertOnChange);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatementHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
37	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  t);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externs,  t);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  t);	      NodeTraversal.traverse(compiler,    root,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
38	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  t);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externes,  t);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externes,  t);	      NodeTraversal.traverse(compiler,    root,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
39	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  t);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externals,  t);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externals,  t);	      NodeTraversal.traverse(compiler,    root,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
40	[BUG]  [BUGGY]  Traversal.traverse(compiler,  externs,  t);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException    [CONTEXT]                [BUGGY]  Traversal.traverse(compiler,  externs,  t);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	Traversal.traverse(compiler,  externs,  t);	      NodeTraversal.traverse(compiler,    root,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
41	[BUG]  [BUGGY]  Context.traverse(compiler,  root,  t);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException    [CONTEXT]                [BUGGY]  Context.traverse(compiler,  root,  t);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	Context.traverse(compiler,  root,  t);	      NodeTraversal.traverse(compiler,    root,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
42	[BUG]  [BUGGY]  Compiler.traverse(compiler,  externs,  t);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException    [CONTEXT]                [BUGGY]  Compiler.traverse(compiler,  externs,  t);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	Compiler.traverse(compiler,  externs,  t);	      NodeTraversal.traverse(compiler,    root,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
43	[BUG]  [BUGGY]  Context.traverse(compiler,  externs,  t);  [CE]  reached  end  of  file  while  parsing  [FE]                                      RuntimeException    [CONTEXT]                [BUGGY]  Context.traverse(compiler,  externs,  t);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	Context.traverse(compiler,  externs,  t);	      NodeTraversal.traverse(compiler,    root,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
44	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  root,  scopeCreator);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  root,  scopeCreator);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(compiler,  root,  scopeCreator);	  Callback    tickler    =    new    ScopeTicklingCallback(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
45	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  root,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  root,  true);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(compiler,  root,  true);	  Callback    tickler    =    new    ScopeTicklingCallback(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
46	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  externs,  root);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(compiler,  externs,  root);	  Callback    tickler    =    new    ScopeTicklingCallback(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
47	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  root,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  root,  false);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(compiler,  root,  false);	  Callback    tickler    =    new    ScopeTicklingCallback(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
48	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  root,  null);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  root,  null);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(compiler,  root,  null);	  Callback    tickler    =    new    ScopeTicklingCallback(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
49	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  root,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  root,  parent);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(compiler,  root,  parent);	  Callback    tickler    =    new    ScopeTicklingCallback(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
50	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  root,  this);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  root,  this);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(compiler,  root,  this);	  Callback    tickler    =    new    ScopeTicklingCallback(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
51	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  root,  t);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  root,  t);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(compiler,  root,  t);	  Callback    tickler    =    new    ScopeTicklingCallback(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
52	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeDeclarations());  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeDeclarations());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeDeclarations());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDeclarations());    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
53	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarations(),  externs);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarations(),  externs);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarations(),  externs);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDeclarations());    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
54	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeDeclarations());  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeDeclarations());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externals,  new  NormalizeDeclarations());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDeclarations());    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
55	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarations(),  externals);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarations(),  externals);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarations(),  externals);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDeclarations());    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
56	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarations(),  scopeCreator);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarations(),  scopeCreator);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarations(),  scopeCreator);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDeclarations());    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
57	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeDeclarations());  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeDeclarations());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externes,  new  NormalizeDeclarations());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDeclarations());    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
58	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarations(),  expr);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarations(),  expr);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarations(),  expr);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDeclarations());    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
59	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(false);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(false);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(false);	  Callback    tickler    =    new    ScopeTicklingCallback(true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
60	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(false,  true);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(false,  true);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(false,  true);	  Callback    tickler    =    new    ScopeTicklingCallback(true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
61	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(false,  root);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(false,  root);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(false,  root);	  Callback    tickler    =    new    ScopeTicklingCallback(true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
62	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(false,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(false,  false);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(false,  false);	  Callback    tickler    =    new    ScopeTicklingCallback(true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
63	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(false,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(false,  externs);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(false,  externs);	  Callback    tickler    =    new    ScopeTicklingCallback(true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
64	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(false,  null);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(false,  null);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(false,  null);	  Callback    tickler    =    new    ScopeTicklingCallback(true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
65	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(true,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(true,  externs);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(true,  externs);	  Callback    tickler    =    new    ScopeTicklingCallback(true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
66	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(false,  scopeCreator);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(false,  scopeCreator);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(false,  scopeCreator);	  Callback    tickler    =    new    ScopeTicklingCallback(true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
67	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(true,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(true,  true);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(true,  true);	  Callback    tickler    =    new    ScopeTicklingCallback(true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
68	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externs,  true);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  true);	      NodeTraversal.traverse(compiler,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
69	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externals,  true);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externals,  true);	      NodeTraversal.traverse(compiler,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
70	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externes,  true);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externes,  true);	      NodeTraversal.traverse(compiler,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
71	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externs,  false);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  false);	      NodeTraversal.traverse(compiler,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
72	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  interns,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  interns,  true);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  interns,  true);	      NodeTraversal.traverse(compiler,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
73	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  root,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]                [BUGGY]  nodeTraversal.traverse(compiler,  root,  true);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	nodeTraversal.traverse(compiler,  root,  true);	      NodeTraversal.traverse(compiler,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
74	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  roots,  false);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  roots,  false);	      NodeTraversal.traverse(compiler,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
75	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
76	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
77	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
78	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  hasOkDuplicateDeclaration);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  hasOkDuplicateDeclaration);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
79	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  assertOnChange);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  assertOnChange);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
80	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  interns,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  interns,  new  NormalizeStatements());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  interns,  new  NormalizeStatements());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
81	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  constantMap);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  constantMap);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  constantMap);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
82	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  new  ScopeTicklingCallback());  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  roots,  new  ScopeTicklingCallback());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  roots,  new  ScopeTicklingCallback());	      NodeTraversal.traverse(compiler,    externs,    new    ScopeTicklingCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
83	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  ScopeTicklingCallback());  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  ScopeTicklingCallback());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  new  ScopeTicklingCallback());	      NodeTraversal.traverse(compiler,    externs,    new    ScopeTicklingCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
84	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  root,  new  ScopeTicklingCallback());  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]                [BUGGY]  nodeTraversal.traverse(compiler,  root,  new  ScopeTicklingCallback());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	nodeTraversal.traverse(compiler,  root,  new  ScopeTicklingCallback());	      NodeTraversal.traverse(compiler,    externs,    new    ScopeTicklingCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
85	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  ScopeTicklingCallback(),  true);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  ScopeTicklingCallback(),  true);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  new  ScopeTicklingCallback(),  true);	      NodeTraversal.traverse(compiler,    externs,    new    ScopeTicklingCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
86	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  ScopeTicklingCallback(),  this);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  ScopeTicklingCallback(),  this);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  new  ScopeTicklingCallback(),  this);	      NodeTraversal.traverse(compiler,    externs,    new    ScopeTicklingCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
87	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  hasOkDuplicateDeclaration);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  this,  hasOkDuplicateDeclaration);	      NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
88	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  this);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externals,  this);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externals,  this);	      NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
89	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  assertOnChange);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  this,  assertOnChange);	      NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
90	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  t);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  t);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  this,  t);	      NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
91	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  this);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externes,  this);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externes,  this);	      NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
92	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  null);	      NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
93	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  null);	      NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
94	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externs);	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
95	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  scopeCreator);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  scopeCreator);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  scopeCreator);	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
96	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  t);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  t);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  t);	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
97	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  true);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  true);	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
98	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  false);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  false);	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
99	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  null);	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
100	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement());  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatement());    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
101	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  externs);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  externs);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatement());    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
102	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclaration());  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclaration());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclaration());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatement());    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
103	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatement());  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatement());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatement());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatement());    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
104	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  externals);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  externals);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatement());    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
105	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDuplicateDeclaration());  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDuplicateDeclaration());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeDuplicateDeclaration());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatement());    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
106	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  scopeCreator);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  scopeCreator);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  scopeCreator);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatement());    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
107	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatement());  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatement());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatement());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatement());    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
108	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  scopeCreator);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  scopeCreator);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  scopeCreator);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
109	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  externs);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  externs);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
110	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  scopeCreator);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  scopeCreator);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externs,  scopeCreator);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
111	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  scope);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  scope);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  scope);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
112	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  externals);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  externals);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
113	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  root,  scopeCreator);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externals,  root,  scopeCreator);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externals,  root,  scopeCreator);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
114	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  t);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  t);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  t);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
115	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  true);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  true);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
116	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  this);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  this);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  this);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
117	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeDuplicateDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeDuplicateDeclarationHandler());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeDuplicateDeclarationHandler());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	replace
118	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDuplicateDeclarationHandler(),  externs);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDuplicateDeclarationHandler(),  externs);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeDuplicateDeclarationHandler(),  externs);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	replace
119	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeDuplicateDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeDuplicateDeclarationHandler());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externals,  new  NormalizeDuplicateDeclarationHandler());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	replace
120	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeDuplicateDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeDuplicateDeclarationHandler());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externes,  new  NormalizeDuplicateDeclarationHandler());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	replace
121	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDuplicateDeclarationHandler(),  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDuplicateDeclarationHandler(),  externals);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeDuplicateDeclarationHandler(),  externals);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	replace
122	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDuplicateDeclarationHandler(),  scopeCreator);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDuplicateDeclarationHandler(),  scopeCreator);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeDuplicateDeclarationHandler(),  scopeCreator);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	replace
123	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeuplicateDeclarationHandler(),  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeuplicateDeclarationHandler(),  externs);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeDeuplicateDeclarationHandler(),  externs);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	replace
124	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeuplicateDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeuplicateDeclarationHandler());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeDeuplicateDeclarationHandler());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	replace
125	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  new  SyntacticScopeCreator());  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  new  SyntacticScopeCreator());  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverseRoots(compiler,  root,  new  SyntacticScopeCreator());	      	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
126	[BUG]  [BUGGY]  NodeUtil.removeChild(compiler,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeUtil.removeChild(compiler,  root);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeUtil.removeChild(compiler,  root);	      	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
127	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatementHandler());  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatementHandler());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatementHandler());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatementHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
128	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(),  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(),  externs);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(),  externs);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatementHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
129	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatementHandler());  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatementHandler());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatementHandler());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatementHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
130	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(externs));  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(externs));  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(externs));	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatementHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
131	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(),  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(),  externals);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(),  externals);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatementHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
132	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatementHandler());  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatementHandler());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatementHandler());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatementHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
133	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclaration());  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclaration());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclaration());	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclaration());    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
134	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  DuplicateDeclaration());  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  DuplicateDeclaration());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externals,  new  DuplicateDeclaration());	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclaration());    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
135	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  DuplicateDeclaration());  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  DuplicateDeclaration());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externes,  new  DuplicateDeclaration());	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclaration());    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
136	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  hasOkDuplicateDeclaration);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  hasOkDuplicateDeclaration);	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclaration());    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
137	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  assertOnChange);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  assertOnChange);	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclaration());    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
138	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  hasOkDuplicateDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  hasOkDuplicateDeclarations);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  hasOkDuplicateDeclarations);	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclaration());    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
139	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclaration());  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException    [CONTEXT]                [BUGGY]  nodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclaration());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	nodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclaration());	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclaration());    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
140	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  interns,  new  DuplicateDeclaration());  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  interns,  new  DuplicateDeclaration());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  interns,  new  DuplicateDeclaration());	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclaration());    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
141	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(externs,  root,  scopeCreator);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(externs,  root,  scopeCreator);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(externs,  root,  scopeCreator);	  Callback    tickler    =    new    ScopeTicklingCallback(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
142	[BUG]  [BUGGY]  NodeTraversal  tickler  =  new  ScopeTicklingCallback(compiler,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  tickler  =  new  ScopeTicklingCallback(compiler,  externs,  root);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal  tickler  =  new  ScopeTicklingCallback(compiler,  externs,  root);	  Callback    tickler    =    new    ScopeTicklingCallback(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
143	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(converter,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(converter,  externs,  root);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(converter,  externs,  root);	  Callback    tickler    =    new    ScopeTicklingCallback(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
144	[BUG]  [BUGGY]  Checkback  tickler  =  new  ScopeTicklingCallback(compiler,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Checkback  tickler  =  new  ScopeTicklingCallback(compiler,  externs,  root);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Checkback  tickler  =  new  ScopeTicklingCallback(compiler,  externs,  root);	  Callback    tickler    =    new    ScopeTicklingCallback(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
145	[BUG]  [BUGGY]  NodeTraversal  warning  =  new  NodeTraversal(compiler,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  warning  =  new  NodeTraversal(compiler,  externs,  root);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal  warning  =  new  NodeTraversal(compiler,  externs,  root);	  Callback    tickler    =    new    ScopeTicklingCallback(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
146	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  scopeCreator);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  scopeCreator);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  scopeCreator);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
147	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externs);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverseRoots(compiler,  root,  externs);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
148	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  scopeCreator);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  scopeCreator);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  scopeCreator);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
149	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  scope);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  scope);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  scope);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
150	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  true);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  true);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
151	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  root,  scopeCreator);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  root,  scopeCreator);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverseRoots(compiler,  externals,  root,  scopeCreator);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
152	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  false);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  false);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
153	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  null);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  null);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  null);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
154	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externals);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverseRoots(compiler,  root,  externals);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
155	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  hasOkDuplicateDeclaration);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  this,  hasOkDuplicateDeclaration);	      NodeTraversal.traverse(compiler,    externs,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	replace
156	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  this);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  roots,  this);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  roots,  this);	      NodeTraversal.traverse(compiler,    externs,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	replace
157	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  root,  this);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]                [BUGGY]  nodeTraversal.traverse(compiler,  root,  this);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	nodeTraversal.traverse(compiler,  root,  this);	      NodeTraversal.traverse(compiler,    externs,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	replace
158	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  checkUserDeclarations);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  this,  checkUserDeclarations);	      NodeTraversal.traverse(compiler,    externs,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	replace
159	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externs,  checkUserDeclarations);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  checkUserDeclarations);	      NodeTraversal.traverse(compiler,    externs,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	replace
160	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  t);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  t);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  this,  t);	      NodeTraversal.traverse(compiler,    externs,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	replace
161	[BUG]  [BUGGY]  NodeUtil.removeChild(compiler,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeUtil.removeChild(compiler,  externs);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeUtil.removeChild(compiler,  externs);	      NodeUtil.removeChild(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	replace
162	[BUG]  [BUGGY]  NodeUtil.removeChild(externs,  root,  scopeCreator);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeUtil.removeChild(externs,  root,  scopeCreator);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeUtil.removeChild(externs,  root,  scopeCreator);	      NodeUtil.removeChild(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	replace
163	[BUG]  [BUGGY]  NodeUtil.removeChild(root,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeUtil.removeChild(root,  externs);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeUtil.removeChild(root,  externs);	      NodeUtil.removeChild(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	replace
164	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeUtil.removeChild(parent,  externs,  root);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeUtil.removeChild(parent,  externs,  root);	      NodeUtil.removeChild(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	replace
165	[BUG]  [BUGGY]  NodeUtil.removeChild(compiler,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeUtil.removeChild(compiler,  externs,  root);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeUtil.removeChild(compiler,  externs,  root);	      NodeUtil.removeChild(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	replace
166	[BUG]  [BUGGY]  NodeUtil.removeChild(externs,  root,  t);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeUtil.removeChild(externs,  root,  t);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeUtil.removeChild(externs,  root,  t);	      NodeUtil.removeChild(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	replace
167	[BUG]  [BUGGY]  NodeUtil.removeChild(converter,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeUtil.removeChild(converter,  externs,  root);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeUtil.removeChild(converter,  externs,  root);	      NodeUtil.removeChild(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	replace
168	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  new  NormalizeStatements());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  new  NormalizeStatements());	      NodeTraversal.traverseRoots(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
169	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  new  NormalizeStatements(),  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  new  NormalizeStatements(),  externs);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverseRoots(compiler,  root,  new  NormalizeStatements(),  externs);	      NodeTraversal.traverseRoots(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
170	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  new  NormalizeDeclarations());  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  new  NormalizeDeclarations());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverseRoots(compiler,  root,  new  NormalizeDeclarations());	      NodeTraversal.traverseRoots(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
171	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  new  NormalizeStatements());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverseRoots(compiler,  externals,  new  NormalizeStatements());	      NodeTraversal.traverseRoots(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
172	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  new  NormalizeStatements());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverseRoots(compiler,  externes,  new  NormalizeStatements());	      NodeTraversal.traverseRoots(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
173	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  new  NormalizeDuplicateDeclarations());  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  new  NormalizeDuplicateDeclarations());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverseRoots(compiler,  root,  new  NormalizeDuplicateDeclarations());	      NodeTraversal.traverseRoots(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
174	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  new  NormalizeStatements(),  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  new  NormalizeStatements(),  externals);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverseRoots(compiler,  root,  new  NormalizeStatements(),  externals);	      NodeTraversal.traverseRoots(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
175	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  new  NormalizeStatements(),  scopeCreator);  [CE]  reached  end  of  file  while  parsing  [FE]                                      RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  new  NormalizeStatements(),  scopeCreator);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverseRoots(compiler,  root,  new  NormalizeStatements(),  scopeCreator);	      NodeTraversal.traverseRoots(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
176	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externs,  this);	      NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
177	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  externs);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  this,  externs);	      NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
178	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  scopeCreator);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  scopeCreator);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  this,  scopeCreator);	      NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
179	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  externals);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  this,  externals);	      NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
180	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  expr);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  expr);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  this,  expr);	      NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
181	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  RuntimeException( " "));  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  RuntimeException( " "));  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  new  RuntimeException( " "));	      NodeTraversal.traverse(compiler,    root,    new    RuntimeException(   "   "));    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
182	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  RuntimeException( " "));  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  RuntimeException( " "));  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externals,  new  RuntimeException( " "));	      NodeTraversal.traverse(compiler,    root,    new    RuntimeException(   "   "));    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
183	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  RuntimeException( "));  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  RuntimeException( "));  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  new  RuntimeException( "));	      NodeTraversal.traverse(compiler,    root,    new    RuntimeException(   "   "));    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
184	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  RuntimeException( " "));  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  RuntimeException( " "));  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externes,  new  RuntimeException( " "));	      NodeTraversal.traverse(compiler,    root,    new    RuntimeException(   "   "));    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
185	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  RuntimeException( "* "));  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  RuntimeException( "* "));  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  new  RuntimeException( "* "));	      NodeTraversal.traverse(compiler,    root,    new    RuntimeException(   "   "));    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
186	[BUG]  [BUGGY]  Context.traverse(compiler,  root,  new  RuntimeException( " "));  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException    [CONTEXT]                [BUGGY]  Context.traverse(compiler,  root,  new  RuntimeException( " "));  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	Context.traverse(compiler,  root,  new  RuntimeException( " "));	      NodeTraversal.traverse(compiler,    root,    new    RuntimeException(   "   "));    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
187	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement());  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatement());    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
188	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatement());  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatement());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatement());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatement());    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
189	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  hasOkDuplicateDeclaration);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  hasOkDuplicateDeclaration);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatement());    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
190	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatement());  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatement());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatement());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatement());    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
191	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  assertOnChange);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  assertOnChange);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatement());    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
192	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  interns,  new  NormalizeStatement());  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  interns,  new  NormalizeStatement());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  interns,  new  NormalizeStatement());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatement());    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
193	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  false);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  false);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  false);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatement());    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
194	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeDeclarationHandler());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeDeclarationHandler());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
195	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeDeclarationHandler());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externals,  new  NormalizeDeclarationHandler());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
196	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeDeclarationHandler());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externes,  new  NormalizeDeclarationHandler());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
197	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  hasOkDuplicateDeclaration);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  hasOkDuplicateDeclaration);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
198	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  interns,  new  NormalizeDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  interns,  new  NormalizeDeclarationHandler());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  interns,  new  NormalizeDeclarationHandler());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
199	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  externs,  new  NormalizeDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]                [BUGGY]  nodeTraversal.traverse(compiler,  externs,  new  NormalizeDeclarationHandler());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	nodeTraversal.traverse(compiler,  externs,  new  NormalizeDeclarationHandler());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
200	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  false);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  false);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  false);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
201	[BUG]  [BUGGY]  NodeTraversal  tickler  =  new  ScopeTicklingCallback(compiler,  root);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  tickler  =  new  ScopeTicklingCallback(compiler,  root);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal  tickler  =  new  ScopeTicklingCallback(compiler,  root);	  Callback    tickler    =    new    ScopeTicklingCallback(compiler);    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
202	[BUG]  [BUGGY]  NodeTraversal  warning  =  new  NodeTraversal(compiler);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  warning  =  new  NodeTraversal(compiler);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal  warning  =  new  NodeTraversal(compiler);	  Callback    tickler    =    new    ScopeTicklingCallback(compiler);    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
203	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  true);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  true);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(compiler,  true);	  Callback    tickler    =    new    ScopeTicklingCallback(compiler);    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
204	[BUG]  [BUGGY]  NodeTraversal  warning  =  new  NodeTraversal(compiler,  root);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  warning  =  new  NodeTraversal(compiler,  root);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal  warning  =  new  NodeTraversal(compiler,  root);	  Callback    tickler    =    new    ScopeTicklingCallback(compiler);    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
205	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
206	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  externs);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  externs);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  externs);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
207	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
208	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDuplicateDeclarations());  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDuplicateDeclarations());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeDuplicateDeclarations());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
209	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  externals);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  externals);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
210	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
211	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  scopeCreator);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  scopeCreator);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  scopeCreator);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
212	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(converter,  root,  scopeCreator);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(converter,  root,  scopeCreator);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(converter,  root,  scopeCreator);	  Callback    tickler    =    new    ScopeTicklingCallback(converter,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	30	None	replace
213	[BUG]  [BUGGY]  CATCH_BLOCK_VAR_ERROR  =  new  ScopeTicklingCallback(compiler,  root);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  CATCH_BLOCK_VAR_ERROR  =  new  ScopeTicklingCallback(compiler,  root);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	CATCH_BLOCK_VAR_ERROR  =  new  ScopeTicklingCallback(compiler,  root);	  Callback    tickler    =    new    ScopeTicklingCallback(converter,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	30	None	replace
214	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(converter,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(converter,  externs);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(converter,  externs);	  Callback    tickler    =    new    ScopeTicklingCallback(converter,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	30	None	replace
215	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(converter,  root,  true);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(converter,  root,  true);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(converter,  root,  true);	  Callback    tickler    =    new    ScopeTicklingCallback(converter,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	30	None	replace
216	[BUG]  [BUGGY]  Checkback  tickler  =  new  ScopeTicklingCallback(compiler,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Checkback  tickler  =  new  ScopeTicklingCallback(compiler,  root);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Checkback  tickler  =  new  ScopeTicklingCallback(compiler,  root);	  Callback    tickler    =    new    ScopeTicklingCallback(converter,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	30	None	replace
217	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(1);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(1);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(1);	  Callback    tickler    =    new    ScopeTicklingCallback(0);    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
218	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(converter,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(converter,  externals);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(converter,  externals);	  Callback    tickler    =    new    ScopeTicklingCallback(converter);    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
219	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeDeclarationHandler());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeDeclarationHandler());	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
220	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeDeclarationHandler(),  root);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeDeclarationHandler(),  root);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeDeclarationHandler(),  root);	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
221	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeDeclarationHandler(),  scopeCreator);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeDeclarationHandler(),  scopeCreator);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeDeclarationHandler(),  scopeCreator);	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
222	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  new  NormalizeDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  roots,  new  NormalizeDeclarationHandler());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  roots,  new  NormalizeDeclarationHandler());	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
223	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  new  NormalizeDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  new  NormalizeDeclarationHandler());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  new  NormalizeDeclarationHandler());	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
224	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeDeclarationHandler(),  true);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeDeclarationHandler(),  true);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeDeclarationHandler(),  true);	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
225	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  externs);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  externs);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  externs);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	32	None	replace
226	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeDeclarationHandler());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externals,  new  NormalizeDeclarationHandler());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	32	None	replace
227	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  scopeCreator);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  scopeCreator);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  scopeCreator);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	32	None	replace
228	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  externals);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  externals);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	32	None	replace
229	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeDeclarationHandler());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externes,  new  NormalizeDeclarationHandler());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	32	None	replace
230	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  false);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  false);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  false);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	32	None	replace
231	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  expr);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  expr);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  expr);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	32	None	replace
232	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  Normalize());  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  Normalize());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  new  Normalize());	      NodeTraversal.traverse(compiler,    root,    new    Normalize());    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
233	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  Normalize());  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  Normalize());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externals,  new  Normalize());	      NodeTraversal.traverse(compiler,    root,    new    Normalize());    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
234	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  Normalize(),  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  Normalize(),  hasOkDuplicateDeclaration);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  Normalize(),  hasOkDuplicateDeclaration);	      NodeTraversal.traverse(compiler,    root,    new    Normalize());    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
235	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  Normalize());  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  Normalize());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externes,  new  Normalize());	      NodeTraversal.traverse(compiler,    root,    new    Normalize());    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
236	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  Normalize(),  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  Normalize(),  assertOnChange);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  Normalize(),  assertOnChange);	      NodeTraversal.traverse(compiler,    root,    new    Normalize());    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
237	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  Normalize(),  false);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  Normalize(),  false);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  Normalize(),  false);	      NodeTraversal.traverse(compiler,    root,    new    Normalize());    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
238	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  interns,  new  Normalize());  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  interns,  new  Normalize());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  interns,  new  Normalize());	      NodeTraversal.traverse(compiler,    root,    new    Normalize());    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
239	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeConstantAnnotations());  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeConstantAnnotations());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeConstantAnnotations());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeConstantAnnotations());    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
240	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeConstantAnnotations());  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeConstantAnnotations());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externals,  new  NormalizeConstantAnnotations());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeConstantAnnotations());    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
241	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeConstantAnnotations());  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeConstantAnnotations());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externes,  new  NormalizeConstantAnnotations());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeConstantAnnotations());    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
242	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeConstantAnnotations(),  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeConstantAnnotations(),  assertOnChange);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeConstantAnnotations(),  assertOnChange);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeConstantAnnotations());    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
243	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeConstantAnnotations(),  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeConstantAnnotations(),  hasOkDuplicateDeclaration);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeConstantAnnotations(),  hasOkDuplicateDeclaration);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeConstantAnnotations());    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
244	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  interns,  new  NormalizeConstantAnnotations());  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  interns,  new  NormalizeConstantAnnotations());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  interns,  new  NormalizeConstantAnnotations());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeConstantAnnotations());    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
245	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeConstantAnnotations(),  false);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeConstantAnnotations(),  false);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeConstantAnnotations(),  false);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeConstantAnnotations());    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
246	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externals,  false);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externals,  false);	      NodeTraversal.traverse(compiler,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
247	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externes,  false);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externes,  false);	      NodeTraversal.traverse(compiler,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
248	[BUG]  [BUGGY]  Traversal.traverse(compiler,  externs,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]                [BUGGY]  Traversal.traverse(compiler,  externs,  false);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	Traversal.traverse(compiler,  externs,  false);	      NodeTraversal.traverse(compiler,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
249	[BUG]  [BUGGY]  Context.traverse(compiler,  root,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]                [BUGGY]  Context.traverse(compiler,  root,  false);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	Context.traverse(compiler,  root,  false);	      NodeTraversal.traverse(compiler,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
250	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  root,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]                [BUGGY]  nodeTraversal.traverse(compiler,  root,  false);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	nodeTraversal.traverse(compiler,  root,  false);	      NodeTraversal.traverse(compiler,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
251	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  PropagateConstants());  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  PropagateConstants());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externs,  new  PropagateConstants());	      NodeTraversal.traverse(compiler,    root,    new    PropagateConstants());    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
252	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  PropagateConstants(),  externs);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  PropagateConstants(),  externs);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  PropagateConstants(),  externs);	      NodeTraversal.traverse(compiler,    root,    new    PropagateConstants());    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
253	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  PropagateDeclarations());  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  PropagateDeclarations());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  PropagateDeclarations());	      NodeTraversal.traverse(compiler,    root,    new    PropagateConstants());    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
254	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  PropagateConstants());  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  PropagateConstants());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externals,  new  PropagateConstants());	      NodeTraversal.traverse(compiler,    root,    new    PropagateConstants());    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
255	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  PropagateConstants());  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  PropagateConstants());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externes,  new  PropagateConstants());	      NodeTraversal.traverse(compiler,    root,    new    PropagateConstants());    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
256	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeConstants());  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeConstants());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeConstants());	      NodeTraversal.traverse(compiler,    root,    new    PropagateConstants());    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
257	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externs,  hasOkDuplicateDeclaration);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  hasOkDuplicateDeclaration);	      NodeTraversal.traverse(compiler,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
258	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externals,  hasOkDuplicateDeclaration);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externals,  hasOkDuplicateDeclaration);	      NodeTraversal.traverse(compiler,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
259	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  externs,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]                [BUGGY]  nodeTraversal.traverse(compiler,  externs,  hasOkDuplicateDeclaration);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	nodeTraversal.traverse(compiler,  externs,  hasOkDuplicateDeclaration);	      NodeTraversal.traverse(compiler,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
260	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externes,  hasOkDuplicateDeclaration);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externes,  hasOkDuplicateDeclaration);	      NodeTraversal.traverse(compiler,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
261	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  haveOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externs,  haveOkDuplicateDeclaration);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  haveOkDuplicateDeclaration);	      NodeTraversal.traverse(compiler,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
262	[BUG]  [BUGGY]  Traversal.traverse(compiler,  externs,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]                [BUGGY]  Traversal.traverse(compiler,  externs,  hasOkDuplicateDeclaration);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	Traversal.traverse(compiler,  externs,  hasOkDuplicateDeclaration);	      NodeTraversal.traverse(compiler,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
263	[BUG]  [BUGGY]  Context.traverse(compiler,  externs,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]                [BUGGY]  Context.traverse(compiler,  externs,  hasOkDuplicateDeclaration);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	Context.traverse(compiler,  externs,  hasOkDuplicateDeclaration);	      NodeTraversal.traverse(compiler,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
264	[BUG]  [BUGGY]  Compiler.traverse(compiler,  externs,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]                [BUGGY]  Compiler.traverse(compiler,  externs,  hasOkDuplicateDeclaration);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	Compiler.traverse(compiler,  externs,  hasOkDuplicateDeclaration);	      NodeTraversal.traverse(compiler,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
265	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externs);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs);	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
266	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  root);	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
267	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externals);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externals);	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
268	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externes);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externes);	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
269	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler());	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
270	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  externs);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  externs);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  externs);	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
271	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  DuplicateDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  DuplicateDeclarationHandler());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externals,  new  DuplicateDeclarationHandler());	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
272	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  externals);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  externals);	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
273	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  scopeCreator);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  scopeCreator);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  scopeCreator);	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
274	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  false);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  false);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  false);	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
275	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  expr);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  expr);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  expr);	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
276	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler());	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
277	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  DuplicateDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  DuplicateDeclarationHandler());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externals,  new  DuplicateDeclarationHandler());	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
278	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  DuplicateDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  DuplicateDeclarationHandler());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externes,  new  DuplicateDeclarationHandler());	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
279	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  hasOkDuplicateDeclaration);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  hasOkDuplicateDeclaration);	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
280	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]                [BUGGY]  nodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	nodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler());	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
281	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  interns,  new  DuplicateDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  interns,  new  DuplicateDeclarationHandler());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  interns,  new  DuplicateDeclarationHandler());	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
282	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  assertOnChange);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  assertOnChange);	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
283	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());	      NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
284	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  MakeDeclaredNamesUnique());  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  MakeDeclaredNamesUnique());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externals,  new  MakeDeclaredNamesUnique());	      NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
285	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  MakeDeclaredNamesUnique());  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  MakeDeclaredNamesUnique());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externes,  new  MakeDeclaredNamesUnique());	      NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
286	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  hasOkDuplicateDeclaration);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  hasOkDuplicateDeclaration);	      NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
287	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]                [BUGGY]  nodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	nodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());	      NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
288	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  interns,  new  MakeDeclaredNamesUnique());  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  interns,  new  MakeDeclaredNamesUnique());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  interns,  new  MakeDeclaredNamesUnique());	      NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
289	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  new  MakeDeclaredNamesUnique());  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  new  MakeDeclaredNamesUnique());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  renamer,  new  MakeDeclaredNamesUnique());	      NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
290	[BUG]  [BUGGY]  Traversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]                [BUGGY]  Traversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	Traversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());	      NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
291	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  ScopeTicklingCallback());  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  ScopeTicklingCallback());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externals,  new  ScopeTicklingCallback());	      NodeTraversal.traverse(compiler,    root,    new    ScopeTicklingCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
292	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  ScopeTicklingCallback());  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  ScopeTicklingCallback());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externes,  new  ScopeTicklingCallback());	      NodeTraversal.traverse(compiler,    root,    new    ScopeTicklingCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
293	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ScopeTicklingCallback(),  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ScopeTicklingCallback(),  hasOkDuplicateDeclaration);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  ScopeTicklingCallback(),  hasOkDuplicateDeclaration);	      NodeTraversal.traverse(compiler,    root,    new    ScopeTicklingCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
294	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  interns,  new  ScopeTicklingCallback());  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  interns,  new  ScopeTicklingCallback());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  interns,  new  ScopeTicklingCallback());	      NodeTraversal.traverse(compiler,    root,    new    ScopeTicklingCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
295	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ScopeTicklingCallback(),  false);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ScopeTicklingCallback(),  false);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  ScopeTicklingCallback(),  false);	      NodeTraversal.traverse(compiler,    root,    new    ScopeTicklingCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
296	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  externs,  new  ScopeTicklingCallback());  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]                [BUGGY]  nodeTraversal.traverse(compiler,  externs,  new  ScopeTicklingCallback());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	nodeTraversal.traverse(compiler,  externs,  new  ScopeTicklingCallback());	      NodeTraversal.traverse(compiler,    root,    new    ScopeTicklingCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
297	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(converter,  root,  false);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(converter,  root,  false);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(converter,  root,  false);	  Callback    tickler    =    new    ScopeTicklingCallback(converter,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	30	None	replace
298	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(converter,  root,  null);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(converter,  root,  null);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(converter,  root,  null);	  Callback    tickler    =    new    ScopeTicklingCallback(converter,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	30	None	replace
299	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(converter,  root,  t);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(converter,  root,  t);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(converter,  root,  t);	  Callback    tickler    =    new    ScopeTicklingCallback(converter,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	30	None	replace
300	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarations(),  false);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarations(),  false);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarations(),  false);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDeclarations());    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
301	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarations(),  isMarkedConstant);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarations(),  isMarkedConstant);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarations(),  isMarkedConstant);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDeclarations());    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
302	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(false,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(false,  externals);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(false,  externals);	  Callback    tickler    =    new    ScopeTicklingCallback(true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
303	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(root,  scopeCreator);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(root,  scopeCreator);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(root,  scopeCreator);	  Callback    tickler    =    new    ScopeTicklingCallback(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
304	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(docs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(docs,  root);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(docs,  root);	  Callback    tickler    =    new    ScopeTicklingCallback(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
305	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  renamer);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  this,  renamer);	      NodeTraversal.traverse(compiler,    externs,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	replace
306	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  forbidChanges);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  forbidChanges);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  this,  forbidChanges);	      NodeTraversal.traverse(compiler,    externs,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	replace
307	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  renamer);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  renamer);	      NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
308	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  false);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  false);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  false);	      NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
309	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarations());  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarations());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarations());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeConstantAnnotations());    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
310	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  new  normalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  new  normalizeStatements());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  new  normalizeStatements());	      NodeTraversal.traverseRoots(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
311	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(2);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(2);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(2);	  Callback    tickler    =    new    ScopeTicklingCallback(0);    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
312	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  renamer);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  this,  renamer);	      NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
313	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  checkUserDeclarations);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  this,  checkUserDeclarations);	      NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
314	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  normalizeDuplicateDeclarations());  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  normalizeDuplicateDeclarations());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  normalizeDuplicateDeclarations());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
315	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  normalizeDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  normalizeDeclarationHandler());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  normalizeDeclarationHandler());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatementHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
316	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(),  scopeCreator);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(),  scopeCreator);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(),  scopeCreator);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatementHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
317	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ScopeTicklingCallback(),  this);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ScopeTicklingCallback(),  this);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  ScopeTicklingCallback(),  this);	      NodeTraversal.traverse(compiler,    root,    new    ScopeTicklingCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
318	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  this);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  this);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  this);	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
319	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  false);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  false);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  false);	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
320	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  true);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  true);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  true);	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
321	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  isNormalized);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  isNormalized);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  isNormalized);	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
322	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  this);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  this);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  this);	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclaration());    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
323	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  false);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  false);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  false);	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclaration());    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
324	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  isNormalized);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  isNormalized);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  isNormalized);	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclaration());    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
325	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  ScopeTicklingCallback());  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  ScopeTicklingCallback());  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externs,  new  ScopeTicklingCallback());	      	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
326	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationCallback());  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationCallback());  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationCallback());	      	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
327	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  isNormalized);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  isNormalized);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  isNormalized);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
328	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  false);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  false);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  false);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
329	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  this);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  this);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  this);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
330	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  hasOkDuplicateDeclaration);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
331	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredAnnotationsOverVars());  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredAnnotationsOverVars());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredAnnotationsOverVars());	      NodeTraversal.traverse(compiler,    root,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
332	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredAnnotations());  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredAnnotations());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredAnnotations());	      NodeTraversal.traverse(compiler,    root,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
333	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  renamer);	      NodeTraversal.traverse(compiler,    root,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
334	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUniqueImpl(t));  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUniqueImpl(t));  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUniqueImpl(t));	      NodeTraversal.traverse(compiler,    root,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
335	[BUG]  [BUGGY]  NodeUtil.removeChild(externs,  root,  new  DuplicateDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeUtil.removeChild(externs,  root,  new  DuplicateDeclarationHandler());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeUtil.removeChild(externs,  root,  new  DuplicateDeclarationHandler());	      NodeUtil.removeChild(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	replace
336	[BUG]  [BUGGY]  NodeUtil.removeChild(externs,  root,  null);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeUtil.removeChild(externs,  root,  null);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeUtil.removeChild(externs,  root,  null);	      NodeUtil.removeChild(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	replace
337	[BUG]  [BUGGY]  NodeUtil.removeChild(externs,  root,  this);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeUtil.removeChild(externs,  root,  this);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeUtil.removeChild(externs,  root,  this);	      NodeUtil.removeChild(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	replace
338	[BUG]  [BUGGY]  NodeUtil.removeChild(externs,  root,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeUtil.removeChild(externs,  root,  false);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeUtil.removeChild(externs,  root,  false);	      NodeUtil.removeChild(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	replace
339	[BUG]  [BUGGY]  NodeUtil.removeChild(externs,  root,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeUtil.removeChild(externs,  root,  true);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeUtil.removeChild(externs,  root,  true);	      NodeUtil.removeChild(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	replace
340	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDuplicateDeclarationHandler(),  false);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDuplicateDeclarationHandler(),  false);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeDuplicateDeclarationHandler(),  false);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	replace
341	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  normalizeDuplicateDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  normalizeDuplicateDeclarationHandler());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  normalizeDuplicateDeclarationHandler());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	replace
342	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this.checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  this.checkUserDeclarations);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  this.checkUserDeclarations);	      NodeTraversal.traverse(compiler,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
343	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this.checkUserDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  this.checkUserDeclaration);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  this.checkUserDeclaration);	      NodeTraversal.traverse(compiler,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
344	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  null);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  null);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  null);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
345	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  false);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  false);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  false);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
346	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  root);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externals,  root);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externals,  root);	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
347	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  null);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  null);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  this,  null);	      NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
348	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  new  DuplicateDeclarationHandler(),  false);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  new  DuplicateDeclarationHandler(),  false);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverseRoots(compiler,  root,  new  DuplicateDeclarationHandler(),  false);	      NodeTraversal.traverseRoots(compiler,    root,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	33	None	replace
349	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  new  DuplicateDeclarationHandler(),  expr);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  new  DuplicateDeclarationHandler(),  expr);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverseRoots(compiler,  root,  new  DuplicateDeclarationHandler(),  expr);	      NodeTraversal.traverseRoots(compiler,    root,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	33	None	replace
350	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  Normalize(),  true);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  Normalize(),  true);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  Normalize(),  true);	      NodeTraversal.traverse(compiler,    root,    new    Normalize());    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
351	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  Normalize(),  isNormalized);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  Normalize(),  isNormalized);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  Normalize(),  isNormalized);	      NodeTraversal.traverse(compiler,    root,    new    Normalize());    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
352	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  Root,  new  ScopeTicklingCallback());  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  Root,  new  ScopeTicklingCallback());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  Root,  new  ScopeTicklingCallback());	      NodeTraversal.traverse(compiler,    externs,    new    ScopeTicklingCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
353	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  ScopeTicklingCallback(),  root);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  ScopeTicklingCallback(),  root);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  new  ScopeTicklingCallback(),  root);	      NodeTraversal.traverse(compiler,    externs,    new    ScopeTicklingCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
354	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  Root,  new  NormalizeDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  Root,  new  NormalizeDeclarationHandler());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  Root,  new  NormalizeDeclarationHandler());	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
355	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(null,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(null,  externs);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(null,  externs);	  Callback    tickler    =    new    ScopeTicklingCallback(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
356	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  isNormalized);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  isNormalized);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  isNormalized);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
357	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  true);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  true);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  true);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
358	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  this);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  this);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  this);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
359	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  RuntimeException( "));  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  RuntimeException( "));  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  RuntimeException( "));	      NodeTraversal.traverse(compiler,    root,    new    RuntimeException(   "   "));    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
360	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  RuntimeException( ". "));  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  RuntimeException( ". "));  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  new  RuntimeException( ". "));	      NodeTraversal.traverse(compiler,    root,    new    RuntimeException(   "   "));    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
361	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(t));  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(t));  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(t));	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatementHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
362	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(),  false);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(),  false);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(),  false);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatementHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
363	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(),  isNormalized);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(),  isNormalized);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(),  isNormalized);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatementHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
364	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  true);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  true);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  true);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	32	None	replace
365	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  null);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  null);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  null);	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
366	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  true);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  true);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  true);	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
367	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  interns,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  interns,  false);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  interns,  false);	      NodeTraversal.traverse(compiler,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
368	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  roots,  true);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  roots,  true);	      NodeTraversal.traverse(compiler,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
369	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  isNormalized);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  isNormalized);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  isNormalized);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatement());    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
370	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  this);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  this);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  this);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatement());    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
371	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationCallback(),  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationCallback(),  hasOkDuplicateDeclaration);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationCallback(),  hasOkDuplicateDeclaration);	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
372	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationCallback(),  this);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationCallback(),  this);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationCallback(),  this);	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
373	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationCallback(),  false);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationCallback(),  false);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationCallback(),  false);	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
374	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationCallback(),  true);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationCallback(),  true);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationCallback(),  true);	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
375	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  internal);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  internal);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(compiler,  internal);	  Callback    tickler    =    new    ScopeTicklingCallback(compiler);    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
376	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  roots);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  roots);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(compiler,  roots);	  Callback    tickler    =    new    ScopeTicklingCallback(compiler);    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
377	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  root.getParent());  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  root.getParent());  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(compiler,  root.getParent());	  Callback    tickler    =    new    ScopeTicklingCallback(compiler);    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
378	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(externs,  root,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(externs,  root,  true);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(externs,  root,  true);	  Callback    tickler    =    new    ScopeTicklingCallback(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
379	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(externs,  root,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(externs,  root,  false);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(externs,  root,  false);	  Callback    tickler    =    new    ScopeTicklingCallback(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
380	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  checkUserDeclarations);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  checkUserDeclarations);	      NodeTraversal.traverse(compiler,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
381	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this.hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  this.hasOkDuplicateDeclaration);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  this.hasOkDuplicateDeclaration);	      NodeTraversal.traverse(compiler,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
382	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ScopeTickingCallback());  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ScopeTickingCallback());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  ScopeTickingCallback());	      NodeTraversal.traverse(compiler,    externs,    new    ScopeTicklingCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
383	[BUG]  [BUGGY]  Traversal.traverse(compiler,  root,  new  ScopeTicklingCallback());  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]                [BUGGY]  Traversal.traverse(compiler,  root,  new  ScopeTicklingCallback());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	Traversal.traverse(compiler,  root,  new  ScopeTicklingCallback());	      NodeTraversal.traverse(compiler,    externs,    new    ScopeTicklingCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
384	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  hasOkDuplicateDeclaration);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  t,  hasOkDuplicateDeclaration);	      NodeTraversal.traverse(compiler,    root,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
385	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  t,  root);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  t,  root);	      NodeTraversal.traverse(compiler,    root,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
386	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  assertOnChange);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  assertOnChange);	      NodeTraversal.traverse(compiler,    root,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
387	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  constantMap);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  constantMap);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  constantMap);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
388	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  expr,  new  NormalizeDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  expr,  new  NormalizeDeclarationHandler());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  expr,  new  NormalizeDeclarationHandler());	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
389	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(converter,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(converter,  true);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(converter,  true);	  Callback    tickler    =    new    ScopeTicklingCallback(converter);    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
390	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  root.cloneTicklingDeclaration());  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  root.cloneTicklingDeclaration());  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(compiler,  root.cloneTicklingDeclaration());	  Callback    tickler    =    new    ScopeTicklingCallback(compiler);    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
391	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  root.cloneTicklingMode());  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  root.cloneTicklingMode());  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(compiler,  root.cloneTicklingMode());	  Callback    tickler    =    new    ScopeTicklingCallback(compiler);    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
392	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(true,  false);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(true,  false);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(true,  false);	  Callback    tickler    =    new    ScopeTicklingCallback(true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
393	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(true,  root);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(true,  root);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(true,  root);	  Callback    tickler    =    new    ScopeTicklingCallback(true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
394	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(tickler);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(tickler);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(tickler);	  Callback    tickler    =    new    ScopeTicklingCallback(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
395	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  RuntimeException( "Unable  to  parse "));  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  RuntimeException( "Unable  to  parse "));  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  RuntimeException( "Unable  to  parse "));	      NodeTraversal.traverse(compiler,    root,    new    RuntimeException(   "   "));    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
396	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  RuntimeException( "Failed  to  parse "));  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  RuntimeException( "Failed  to  parse "));  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  RuntimeException( "Failed  to  parse "));	      NodeTraversal.traverse(compiler,    root,    new    RuntimeException(   "   "));    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
397	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  RuntimeException( "Unable  to  parse "));  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  RuntimeException( "Unable  to  parse "));  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  new  RuntimeException( "Unable  to  parse "));	      NodeTraversal.traverse(compiler,    root,    new    RuntimeException(   "   "));    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
398	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  RuntimeException( "Unexpected  exception "));  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  RuntimeException( "Unexpected  exception "));  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  RuntimeException( "Unexpected  exception "));	      NodeTraversal.traverse(compiler,    root,    new    RuntimeException(   "   "));    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
399	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  RuntimeException( "Unexpected  exception: "));  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  RuntimeException( "Unexpected  exception: "));  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  RuntimeException( "Unexpected  exception: "));	      NodeTraversal.traverse(compiler,    root,    new    RuntimeException(   "   "));    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
400	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarations(),  exprs);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarations(),  exprs);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarations(),  exprs);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDeclarations());    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
401	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  false);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  false);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  false);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
402	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(converter,  root,  compiler);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(converter,  root,  compiler);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(converter,  root,  compiler);	  Callback    tickler    =    new    ScopeTicklingCallback(converter,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	30	None	replace
403	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(converter,  root,  this);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(converter,  root,  this);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(converter,  root,  this);	  Callback    tickler    =    new    ScopeTicklingCallback(converter,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	30	None	replace
404	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  constantMap);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  constantMap);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  constantMap);	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclaration());    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
405	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  SerializeDeclarationHandler(),  false);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  SerializeDeclarationHandler(),  false);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  SerializeDeclarationHandler(),  false);	      NodeTraversal.traverse(compiler,    root,    new    SerializeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
406	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  SerializeDeclarationHandler(),  true);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  SerializeDeclarationHandler(),  true);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  SerializeDeclarationHandler(),  true);	      NodeTraversal.traverse(compiler,    root,    new    SerializeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
407	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  SerializeDeclarationHandler(),  null);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  SerializeDeclarationHandler(),  null);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  SerializeDeclarationHandler(),  null);	      NodeTraversal.traverse(compiler,    root,    new    SerializeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
408	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  SyntacticScopeCreator());  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  SyntacticScopeCreator());  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  SyntacticScopeCreator());	      	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
409	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  PropagateDeclarationHandler(),  false);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  PropagateDeclarationHandler(),  false);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  PropagateDeclarationHandler(),  false);	      NodeTraversal.traverse(compiler,    root,    new    PropagateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
410	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  PropagateDeclarationHandler(),  expr);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  PropagateDeclarationHandler(),  expr);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  PropagateDeclarationHandler(),  expr);	      NodeTraversal.traverse(compiler,    root,    new    PropagateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
411	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  PropagateDeclarationHandler(),  true);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  PropagateDeclarationHandler(),  true);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  PropagateDeclarationHandler(),  true);	      NodeTraversal.traverse(compiler,    root,    new    PropagateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
412	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  exprs,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  exprs,  false);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  exprs,  false);	      NodeTraversal.traverse(compiler,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
413	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  t);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  t);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  false,  t);	      NodeTraversal.traverse(compiler,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
414	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  t,  false);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  t,  false);	      NodeTraversal.traverse(compiler,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
415	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  CATCH_BLOCK_VAR_ERROR);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  CATCH_BLOCK_VAR_ERROR);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  CATCH_BLOCK_VAR_ERROR);	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
416	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  externes,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  externes,  root);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(compiler,  externes,  root);	  Callback    tickler    =    new    ScopeTicklingCallback(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
417	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  externals,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  externals,  root);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(compiler,  externals,  root);	  Callback    tickler    =    new    ScopeTicklingCallback(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
418	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDuplicateDeclarationHandler(),  expr);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDuplicateDeclarationHandler(),  expr);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeDuplicateDeclarationHandler(),  expr);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	replace
419	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDuplicateDeclarationHandler(),  true);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDuplicateDeclarationHandler(),  true);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeDuplicateDeclarationHandler(),  true);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	replace
420	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeConstantAnnotations(),  true);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeConstantAnnotations(),  true);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeConstantAnnotations(),  true);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeConstantAnnotations());    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
421	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeConstantAnnotations(),  constantMap);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeConstantAnnotations(),  constantMap);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeConstantAnnotations(),  constantMap);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeConstantAnnotations());    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
422	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  constantMap);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  constantMap);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  constantMap);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatement());    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
423	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  true);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  true);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  true);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatement());    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
424	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  constantMap);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  constantMap);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  this,  constantMap);	      NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
425	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  expr,  new  MakeDeclaredNamesUnique());  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  expr,  new  MakeDeclaredNamesUnique());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  expr,  new  MakeDeclaredNamesUnique());	      NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
426	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  assertOnChange);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  assertOnChange);	      NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
427	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(externs));  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(externs));  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(externs));	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatementHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
428	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(),  this);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(),  this);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(),  this);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatementHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
429	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(),  false);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(),  false);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler(),  false);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatementHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
430	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  true);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  true);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  this,  true);	      NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
431	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationCallbacks());  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationCallbacks());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationCallbacks());	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
432	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  expr,  new  DuplicateDeclarationCallback());  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  expr,  new  DuplicateDeclarationCallback());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  expr,  new  DuplicateDeclarationCallback());	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
433	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(0));  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(0));  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(0));	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
434	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  expr,  new  DuplicateDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  expr,  new  DuplicateDeclarationHandler());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  expr,  new  DuplicateDeclarationHandler());	      NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
435	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  this);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  this);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  this);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
436	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  true);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  true);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(),  true);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
437	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  PropagateDeclarationsOverVars());  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  PropagateDeclarationsOverVars());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  PropagateDeclarationsOverVars());	      NodeTraversal.traverse(compiler,    root,    new    PropagateConstants());    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
438	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  PropagateConstants(),  scopeCreator);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  PropagateConstants(),  scopeCreator);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  PropagateConstants(),  scopeCreator);	      NodeTraversal.traverse(compiler,    root,    new    PropagateConstants());    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
439	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  PropagateConstants(),  expr);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  PropagateConstants(),  expr);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  PropagateConstants(),  expr);	      NodeTraversal.traverse(compiler,    root,    new    PropagateConstants());    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
440	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  false);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  false);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement(),  false);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatement());    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
441	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  Normalize(),  constantMap);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  Normalize(),  constantMap);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  Normalize(),  constantMap);	      NodeTraversal.traverse(compiler,    root,    new    Normalize());    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
442	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeDuplicateDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeDuplicateDeclarationHandler());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeDuplicateDeclarationHandler());	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
443	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  DuplicateDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  DuplicateDeclarationHandler());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  new  DuplicateDeclarationHandler());	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
444	[BUG]  [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  root,  compiler);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  Callback  tickler  =  new  ScopeTicklingCallback(compiler,  root,  compiler);  [BUGGY]    ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	Callback  tickler  =  new  ScopeTicklingCallback(compiler,  root,  compiler);	  Callback    tickler    =    new    ScopeTicklingCallback(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
445	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  new  NormalizeStatements(),  expr);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  new  NormalizeStatements(),  expr);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverseRoots(compiler,  root,  new  NormalizeStatements(),  expr);	      NodeTraversal.traverseRoots(compiler,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
446	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ScopeTicklingCallback(),  true);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ScopeTicklingCallback(),  true);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  ScopeTicklingCallback(),  true);	      NodeTraversal.traverse(compiler,    root,    new    ScopeTicklingCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
447	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeTicklingCallback());  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeTicklingCallback());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeTicklingCallback());	      NodeTraversal.traverse(compiler,    root,    new    ScopeTicklingCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
448	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ScopeTicklingCallbacks());  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ScopeTicklingCallbacks());  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  ScopeTicklingCallbacks());	      NodeTraversal.traverse(compiler,    root,    new    ScopeTicklingCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
449	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  exprs,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  exprs,  true);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  exprs,  true);	      NodeTraversal.traverse(compiler,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
450	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]                [BUGGY]  NodeTraversal.traverse(compiler,  t,  true);  [BUGGY]    removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  t,  true);	      NodeTraversal.traverse(compiler,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
451	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  null);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  null);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler(),  null);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeDeclarationHandler());    	non-compiled	[CE]  reached  end  of  file  while  parsing	32	None	replace
452	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  new  NormalizeDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  new  NormalizeDeclarationHandler());  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  new  NormalizeDeclarationHandler());	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
453	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  t);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    private  void  removeDuplicateDeclarations(Node  externs,  Node  root)  {    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  t);  [BUGGY]    Callback  tickler  =  new  ScopeTicklingCallback();  ScopeCreator  scopeCreator  =new  SyntacticScopeCreator(  compiler,  new  DuplicateDeclarationHandler());  NodeTraversal  t  =  new  NodeTraversal(compiler,  tickler,  scopeCreator);  t.traverseRoots(externs,  root);  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  removeDuplicateDeclarations  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  isMarkedConstant  isObjLitKey  isProperty  shouldBeConstant  Set  hasOkDuplicateDeclaration  Callback  tickler  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  ScopeCreator  scopeCreator  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	629	629	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  t);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
