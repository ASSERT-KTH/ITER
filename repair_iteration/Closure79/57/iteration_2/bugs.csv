bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  t.traverseRoots(root,  externs,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(root,  externs,  true);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(root,  externs,  true);	  t.traverseRoots(externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
2	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(compiler,  externs,  true);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(compiler,  externs,  true);	  t.traverseRoots(externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
3	[BUG]  [BUGGY]  t.traverseRoots(converter,  root,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(converter,  root,  true);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(converter,  root,  true);	  t.traverseRoots(externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
4	[BUG]  [BUGGY]  t.traverseRoots(converter,  externs,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(converter,  externs,  true);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(converter,  externs,  true);	  t.traverseRoots(externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
5	[BUG]  [BUGGY]  t.traverseRoots(null,  externs,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(null,  externs,  true);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(null,  externs,  true);	  t.traverseRoots(externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
6	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  true,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  true,  false);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  true,  false);	  t.traverseRoots(externs,    root,    true);    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
7	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
8	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  renamer);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
9	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
10	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
11	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
12	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  renamer);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
13	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
14	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  renamer);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
15	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs);  renamer.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs);  renamer.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs);  renamer.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    renamer.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
16	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    renamer.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
17	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  parent);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  parent);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    renamer.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
18	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  externs.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  externs.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  externs.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    renamer.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
19	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  r.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  r.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  r.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    renamer.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
20	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  externs);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  externs);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    renamer.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
21	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(compiler,  externs,  hasOkDuplicateDeclaration);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(compiler,  externs,  hasOkDuplicateDeclaration);	  t.traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
22	[BUG]  [BUGGY]  t.traverseRoots(converter,  externs,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(converter,  externs,  hasOkDuplicateDeclaration);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(converter,  externs,  hasOkDuplicateDeclaration);	  t.traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
23	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  checkUserDeclarations);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  checkUserDeclarations);	  t.traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
24	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  hasOkDuplicateDeclaration,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  hasOkDuplicateDeclaration,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  hasOkDuplicateDeclaration,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
25	[BUG]  [BUGGY]  t.traverseRoots(root,  externs,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(root,  externs,  hasOkDuplicateDeclaration);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(root,  externs,  hasOkDuplicateDeclaration);	  t.traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
26	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  hasOkDuplicateDeclaration,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  hasOkDuplicateDeclaration,  assertOnChange);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  hasOkDuplicateDeclaration,  assertOnChange);	  t.traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
27	[BUG]  [BUGGY]  t.traverseRoots(converter,  externs,  root,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(converter,  externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(converter,  externs,  root,  hasOkDuplicateDeclaration);	  t.traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
28	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  this,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  this,  assertOnChange);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  this,  assertOnChange);	  t.traverseRoots(externs,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	33	None	replace
29	[BUG]  [BUGGY]  t.traverseRoots(root,  externs,  this);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(root,  externs,  this);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(root,  externs,  this);	  t.traverseRoots(externs,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	33	None	replace
30	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  this,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  this,  hasOkDuplicateDeclaration);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  this,  hasOkDuplicateDeclaration);	  t.traverseRoots(externs,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	33	None	replace
31	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  this);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(compiler,  externs,  this);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(compiler,  externs,  this);	  t.traverseRoots(externs,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	33	None	replace
32	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  root);	      NodeTraversal.traverse(compiler,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
33	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externs);	      NodeTraversal.traverse(compiler,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
34	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  externs);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  renamer,  externs);	      NodeTraversal.traverse(compiler,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
35	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externals,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externals,  renamer);	      NodeTraversal.traverse(compiler,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
36	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  renamer,  root);	      NodeTraversal.traverse(compiler,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
37	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  externals);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  renamer,  externals);	      NodeTraversal.traverse(compiler,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
38	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  roots);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  roots);	      NodeTraversal.traverse(compiler,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
39	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  externs);	      NodeTraversal.traverseRoots(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
40	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  assertOnChange);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  root,  assertOnChange);	      NodeTraversal.traverseRoots(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
41	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  externals);	      NodeTraversal.traverseRoots(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
42	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  t);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  t);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  root,  t);	      NodeTraversal.traverseRoots(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
43	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  externes);	      NodeTraversal.traverseRoots(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
44	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  renamer);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  root,  renamer);	      NodeTraversal.traverseRoots(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
45	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  externals,  root);	      NodeTraversal.traverseRoots(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
46	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(externs,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(externs,  root);	      NodeTraversal.traverseRoots(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
47	[BUG]  [BUGGY]  t.traverseRoots(root,  externs,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(root,  externs,  renamer);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(root,  externs,  renamer);	  t.traverseRoots(externs,    root,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
48	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  renamer,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  renamer,  hasOkDuplicateDeclaration);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  renamer,  hasOkDuplicateDeclaration);	  t.traverseRoots(externs,    root,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
49	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
50	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(compiler,  externs,  renamer);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(compiler,  externs,  renamer);	  t.traverseRoots(externs,    root,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
51	[BUG]  [BUGGY]  t.traverseRoots(converter,  root,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(converter,  root,  renamer);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(converter,  root,  renamer);	  t.traverseRoots(externs,    root,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
52	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  renamer,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  renamer,  assertOnChange);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  renamer,  assertOnChange);	  t.traverseRoots(externs,    root,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
53	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  assertOnChange);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  assertOnChange);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	replace
54	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  assertOnChange);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  assertOnChange);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	replace
55	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  root,  externs);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	replace
56	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	replace
57	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  hasOkDuplicateDeclaration);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	replace
58	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  renamer);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	replace
59	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	replace
60	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	replace
61	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  false);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  false);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	replace
62	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  t);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  t);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  root,  t);	      	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
63	[BUG]  [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);	      	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
64	[BUG]  [BUGGY]  t.process(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.process(externs,  root);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.process(externs,  root);	      	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
65	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);	      	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
66	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange));  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange));  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange));	      	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
67	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements());  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements());	      	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
68	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange));  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange));  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange));	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange));    	non-compiled	[CE]  reached  end  of  file  while  parsing	32	None	replace
69	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange));    	non-compiled	[CE]  reached  end  of  file  while  parsing	32	None	replace
70	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange));  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange));  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange));	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange));    	non-compiled	[CE]  reached  end  of  file  while  parsing	32	None	replace
71	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  new  NormalizeStatements(compiler,  assertOnChange));  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  new  NormalizeStatements(compiler,  assertOnChange));  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  renamer,  new  NormalizeStatements(compiler,  assertOnChange));	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange));    	non-compiled	[CE]  reached  end  of  file  while  parsing	32	None	replace
72	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange));  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange));  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange));	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange));    	non-compiled	[CE]  reached  end  of  file  while  parsing	32	None	replace
73	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE));  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE));  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE));	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange));    	non-compiled	[CE]  reached  end  of  file  while  parsing	32	None	replace
74	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  checkUserDeclarations));  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  checkUserDeclarations));  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  checkUserDeclarations));	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange));    	non-compiled	[CE]  reached  end  of  file  while  parsing	32	None	replace
75	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange),  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange),  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange),  renamer);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange));    	non-compiled	[CE]  reached  end  of  file  while  parsing	32	None	replace
76	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
77	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(externs);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
78	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
79	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
80	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverse(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverse(externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverse(externs);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
81	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
82	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).traverse(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).traverse(externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).traverse(externs);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
83	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(compiler,  root);	      NodeTraversal.traverseRoots(compiler,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
84	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  assertOnChange);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  assertOnChange);	      NodeTraversal.traverseRoots(compiler,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
85	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverseRoots(compiler,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
86	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(compiler,  externals,  root);	      NodeTraversal.traverseRoots(compiler,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
87	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  true);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  true);	      NodeTraversal.traverseRoots(compiler,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
88	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  parent);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  parent);	      NodeTraversal.traverseRoots(compiler,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
89	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  false);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  false);	      NodeTraversal.traverseRoots(compiler,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
90	[BUG]  [BUGGY]  t.traverseRoots(root,  externs,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(root,  externs,  new  NormalizeStatements());  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(root,  externs,  new  NormalizeStatements());	  t.traverseRoots(externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
91	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(compiler,  externs,  new  NormalizeStatements());  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(compiler,  externs,  new  NormalizeStatements());	  t.traverseRoots(externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
92	[BUG]  [BUGGY]  t.traverseRoots(converter,  root,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(converter,  root,  new  NormalizeStatements());  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(converter,  root,  new  NormalizeStatements());	  t.traverseRoots(externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
93	[BUG]  [BUGGY]  t.traverseRoots(compiler,  root,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(compiler,  root,  new  NormalizeStatements());  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(compiler,  root,  new  NormalizeStatements());	  t.traverseRoots(externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
94	[BUG]  [BUGGY]  t.traverseRoots(converter,  externs,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(converter,  externs,  new  NormalizeStatements());  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(converter,  externs,  new  NormalizeStatements());	  t.traverseRoots(externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
95	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  new  NormalizeStatements(),  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  new  NormalizeStatements(),  assertOnChange);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  new  NormalizeStatements(),  assertOnChange);	  t.traverseRoots(externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
96	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  new  NormalizeStatements()));  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  new  NormalizeStatements()));  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  new  NormalizeStatements()));	  t.traverseRoots(externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
97	[BUG]  [BUGGY]  t.traverseRoots(null,  externs,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(null,  externs,  new  NormalizeStatements());  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(null,  externs,  new  NormalizeStatements());	  t.traverseRoots(externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
98	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    DEFAULT_LOCAL_NAMES_UNIQUE);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
99	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs);  t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs);  t.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs);  t.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    DEFAULT_LOCAL_NAMES_UNIQUE);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
100	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    DEFAULT_LOCAL_NAMES_UNIQUE);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
101	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    DEFAULT_LOCAL_NAMES_UNIQUE);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
102	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  parent);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  parent);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    DEFAULT_LOCAL_NAMES_UNIQUE);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
103	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    DEFAULT_LOCAL_NAMES_UNIQUE);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
104	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  renamer);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    DEFAULT_LOCAL_NAMES_UNIQUE);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
105	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  assertOnChange);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  assertOnChange);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    DEFAULT_LOCAL_NAMES_UNIQUE);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
106	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseConstants(compiler,  externs);	      NodeTraversal.traverseConstants(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
107	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  assertOnChange);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseConstants(compiler,  root,  assertOnChange);	      NodeTraversal.traverseConstants(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
108	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  t);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  t);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseConstants(compiler,  root,  t);	      NodeTraversal.traverseConstants(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
109	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseConstants(compiler,  externs,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseConstants(compiler,  externs,  root);	      NodeTraversal.traverseConstants(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
110	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  hasOkDuplicateDeclaration);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseConstants(compiler,  root,  hasOkDuplicateDeclaration);	      NodeTraversal.traverseConstants(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
111	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseConstants(compiler,  externals);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseConstants(compiler,  externals);	      NodeTraversal.traverseConstants(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
112	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  false);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseConstants(compiler,  root,  false);	      NodeTraversal.traverseConstants(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
113	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  renamer);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseConstants(compiler,  root,  renamer);	      NodeTraversal.traverseConstants(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
114	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  assertOnChange);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  assertOnChange);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
115	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
116	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
117	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externs);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(compiler,  root,  externs);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
118	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  hasOkDuplicateDeclaration);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
119	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  false);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  false);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
120	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  true);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  true);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
121	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
122	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
123	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
124	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
125	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
126	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
127	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(last);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(last);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(last);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
128	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(returnValue);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(returnValue);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(returnValue);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
129	[BUG]  [BUGGY]  t.traverseRoots(converter,  root,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(converter,  root,  assertOnChange);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(converter,  root,  assertOnChange);	  t.traverseRoots(converter,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
130	[BUG]  [BUGGY]  t.traverseRoots(converter,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(converter,  externs);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(converter,  externs);	  t.traverseRoots(converter,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
131	[BUG]  [BUGGY]  t.traverseRoots(compiler,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(compiler,  root);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(compiler,  root);	  t.traverseRoots(converter,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
132	[BUG]  [BUGGY]  t.traverseRoots(converter,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(converter,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(converter,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(converter,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
133	[BUG]  [BUGGY]  t.traverseRoots(converter,  root,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(converter,  root,  hasOkDuplicateDeclaration);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(converter,  root,  hasOkDuplicateDeclaration);	  t.traverseRoots(converter,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
134	[BUG]  [BUGGY]  t.traverseRoots(converter,  root,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(converter,  root,  false);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(converter,  root,  false);	  t.traverseRoots(converter,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
135	[BUG]  [BUGGY]  t.traverseRoots(converter,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(converter,  externs,  root);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(converter,  externs,  root);	  t.traverseRoots(converter,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
136	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
137	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
138	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
139	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange),  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange),  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange),  renamer);	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
140	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE)).traverse(root);	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
141	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  root);	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
142	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
143	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null);	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
144	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    DEFAULT_WHILE_TO_FOR);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
145	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    DEFAULT_WHILE_TO_FOR);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
146	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    DEFAULT_WHILE_TO_FOR);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
147	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  parent);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  parent);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    DEFAULT_WHILE_TO_FOR);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
148	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  externals,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  externals,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  externals,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    DEFAULT_WHILE_TO_FOR);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
149	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    DEFAULT_WHILE_TO_FOR);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
150	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  root,  externs);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	replace
151	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  assertOnChange);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  assertOnChange);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	replace
152	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  t);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  t);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  t);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	replace
153	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	replace
154	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  hasOkDuplicateDeclaration);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	replace
155	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	replace
156	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  assertOnChange);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externs,  assertOnChange);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	replace
157	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  externals);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  root,  externals);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	replace
158	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  false);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  false);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	replace
159	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(compiler,  root,  renamer);	      NodeTraversal.traverseRoots(compiler,    externs,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	replace
160	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverseRoots(compiler,    externs,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	replace
161	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  hasOkDuplicateDeclaration);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  renamer,  hasOkDuplicateDeclaration);	      NodeTraversal.traverseRoots(compiler,    externs,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	replace
162	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  renamer,  root);	      NodeTraversal.traverseRoots(compiler,    externs,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	replace
163	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  assertOnChange);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  renamer,  assertOnChange);	      NodeTraversal.traverseRoots(compiler,    externs,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	replace
164	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  checkUserDeclarations);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  renamer,  checkUserDeclarations);	      NodeTraversal.traverseRoots(compiler,    externs,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	replace
165	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  renamer,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  renamer,  externs);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(compiler,  renamer,  externs);	      NodeTraversal.traverseRoots(compiler,    externs,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	replace
166	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  roots,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  roots,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(compiler,  roots,  renamer);	      NodeTraversal.traverseRoots(compiler,    externs,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	replace
167	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
168	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  assertOnChange);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  assertOnChange);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
169	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
170	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  assertOnChange);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  assertOnChange);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
171	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  checkUserDeclarations);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  checkUserDeclarations);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
172	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  true);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  true);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
173	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  assertOnChange);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  assertOnChange);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
174	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
175	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);	      NodeTraversal.traverseRoots(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	52	None	replace
176	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);	      NodeTraversal.traverseRoots(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	52	None	replace
177	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(root);	      NodeTraversal.traverseRoots(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	52	None	replace
178	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root);	      NodeTraversal.traverseRoots(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	52	None	replace
179	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(null);	      NodeTraversal.traverseRoots(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	52	None	replace
180	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root,  externs);	      NodeTraversal.traverseRoots(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	52	None	replace
181	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t).traverse(root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t).traverse(root);	      NodeTraversal.traverseRoots(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	52	None	replace
182	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs);	      NodeTraversal.traverseRoots(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	52	None	replace
183	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler));  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler));  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler));	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler));    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
184	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(externs));  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(externs));  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(externs));	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler));    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
185	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler));  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler));  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler));	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler));    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
186	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler));  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler));  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler));	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler));    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
187	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler),  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler),  assertOnChange);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler),  assertOnChange);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler));    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
188	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  exprs,  new  NormalizeStatements(compiler));  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  exprs,  new  NormalizeStatements(compiler));  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  exprs,  new  NormalizeStatements(compiler));	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler));    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
189	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(externs,  root));  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(externs,  root));  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(externs,  root));	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler));    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
190	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	replace
191	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t).traverse(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t).traverse(externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t).traverse(externs);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	replace
192	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	replace
193	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(externs);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	replace
194	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(externs);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	replace
195	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverse(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverse(externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root).traverse(externs);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	replace
196	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	replace
197	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
198	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange),  t);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange),  t);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange),  t);	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
199	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange),  t).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange),  t).traverse(root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange),  t).traverse(root);	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
200	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
201	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root);	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
202	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(root);	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
203	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
204	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
205	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
206	[BUG]  [BUGGY]  t.traverseRoots(converter,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(converter,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(converter,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
207	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
208	[BUG]  [BUGGY]  t.traverseRoots(root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
209	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  false);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  false);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
210	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations));	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
211	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations));  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations));  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations));	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
212	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false));  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false));  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  false));	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
213	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  root);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
214	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertFalse));  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertFalse));  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertFalse));	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
215	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange));  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange));  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  verifyOnChange));	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
216	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  t));  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  t));  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  t));	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
217	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externs);	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
218	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  assertOnChange);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  root,  assertOnChange);	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
219	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  false);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  root,  false);	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
220	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externals);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externals);	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
221	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  true);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  root,  true);	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
222	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  root,  this);	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
223	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	replace
224	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  renamer);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  renamer);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	replace
225	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	replace
226	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	replace
227	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	replace
228	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	replace
229	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	replace
230	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t).traverseRoots(externs,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t).traverseRoots(externs,  root);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	replace
231	[BUG]  [BUGGY]  t.traverseRoots(root,  externs,  null);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(root,  externs,  null);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(root,  externs,  null);	  t.traverseRoots(externs,    root,    null);    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
232	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  null,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  null,  assertOnChange);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  null,  assertOnChange);	  t.traverseRoots(externs,    root,    null);    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
233	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  null);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(compiler,  externs,  null);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(compiler,  externs,  null);	  t.traverseRoots(externs,    root,    null);    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
234	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  new  HashSet  <  Node>());  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  new  HashSet  <  Node>());  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  new  HashSet  <  Node>());	  t.traverseRoots(externs,    root,    null);    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
235	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  parent);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  parent);	  t.traverseRoots(externs,    root,    null);    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
236	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  null,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  null,  hasOkDuplicateDeclaration);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  null,  hasOkDuplicateDeclaration);	  t.traverseRoots(externs,    root,    null);    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
237	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  renamer);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
238	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externals);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externals);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
239	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs.cloneTree());  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs.cloneTree());	      NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
240	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externes);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externes);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externes);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
241	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  roots);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  roots);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  roots);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
242	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  renamer);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
243	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  assertOnChange,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  assertOnChange,  checkUserDeclarations);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  assertOnChange,  checkUserDeclarations);	  t.traverseRoots(externs,    root,    assertOnChange);    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
244	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  assertOnChange,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  assertOnChange,  hasOkDuplicateDeclaration);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  assertOnChange,  hasOkDuplicateDeclaration);	  t.traverseRoots(externs,    root,    assertOnChange);    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
245	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(compiler,  externs,  assertOnChange);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(compiler,  externs,  assertOnChange);	  t.traverseRoots(externs,    root,    assertOnChange);    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
246	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  root,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(compiler,  externs,  root,  assertOnChange);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(compiler,  externs,  root,  assertOnChange);	  t.traverseRoots(externs,    root,    assertOnChange);    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
247	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  assertOnChange,  forbidChanges);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  assertOnChange,  forbidChanges);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  assertOnChange,  forbidChanges);	  t.traverseRoots(externs,    root,    assertOnChange);    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
248	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  verifyOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  verifyOnChange);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  verifyOnChange);	  t.traverseRoots(externs,    root,    assertOnChange);    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
249	[BUG]  [BUGGY]  t.traverseRoots(converter,  externs,  root,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(converter,  externs,  root,  assertOnChange);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(converter,  externs,  root,  assertOnChange);	  t.traverseRoots(externs,    root,    assertOnChange);    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
250	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  assertOnChange,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  assertOnChange,  false);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  assertOnChange,  false);	  t.traverseRoots(externs,    root,    assertOnChange);    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
251	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
252	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
253	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  hasOkDuplicateDeclaration);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
254	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
255	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
256	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
257	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter,  externs,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(converter,  externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
258	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
259	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  root,  renamer);	      NodeTraversal.traverse(compiler,    externs,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
260	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverse(compiler,    externs,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
261	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  roots,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  roots,  renamer);	      NodeTraversal.traverse(compiler,    externs,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
262	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  hasOkDuplicateDeclaration);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externs,  renamer,  hasOkDuplicateDeclaration);	      NodeTraversal.traverse(compiler,    externs,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
263	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  renamer);	      NodeTraversal.traverse(compiler,    externs,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
264	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externs,  renamer,  root);	      NodeTraversal.traverse(compiler,    externs,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
265	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  assertOnChange);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externs,  renamer,  assertOnChange);	      NodeTraversal.traverse(compiler,    externs,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
266	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs);  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs);  compiler.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs);  compiler.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
267	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs.cloneTree());  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs.cloneTree());  compiler.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs.cloneTree());  compiler.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
268	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externals);  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externals);  compiler.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externals);  compiler.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
269	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externes);  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externes);  compiler.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externes);  compiler.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
270	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root);  compiler.traverseRoots(externs,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root);  compiler.traverseRoots(externs,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  root);  compiler.traverseRoots(externs,  renamer);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
271	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root);  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root);  compiler.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  root);  compiler.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
272	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs.cloneTree());  t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs.cloneTree());  t.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs.cloneTree());  t.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    root);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
273	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externals);  t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externals);  t.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externals);  t.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    root);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
274	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externes);  t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externes);  t.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externes);  t.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    root);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
275	[BUG]  [BUGGY]  Traversal  t  =  new  Traversal(compiler,  externs);  t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  Traversal  t  =  new  Traversal(compiler,  externs);  t.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	Traversal  t  =  new  Traversal(compiler,  externs);  t.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    root);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
276	[BUG]  [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  externs);  t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  externs);  t.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  <  Node>  t  =  new  NodeTraversal(compiler,  externs);  t.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    root);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
277	[BUG]  [BUGGY]  t  =  new  NodeTraversal(compiler,  externs);  t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  t  =  new  NodeTraversal(compiler,  externs);  t.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	t  =  new  NodeTraversal(compiler,  externs);  t.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    root);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
278	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root);  t.traverseRoots(externs,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root);  t.traverseRoots(externs,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  root);  t.traverseRoots(externs,  renamer);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
279	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  root);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  t,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  t,  root);	      NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
280	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  t,  assertOnChange);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  t,  assertOnChange);	      NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
281	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  t,  externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  t,  externs);	      NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
282	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  t,  externals);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  t,  externals);	      NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
283	[BUG]  [BUGGY]  NodeTraversal  t  =  compiler.traverse(compiler,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  compiler.traverse(compiler,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  compiler.traverse(compiler,  root);	      NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
284	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  t,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  t,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externs,  t,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverse(compiler,    externs,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
285	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  t,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  t,  hasOkDuplicateDeclaration);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externs,  t,  hasOkDuplicateDeclaration);	      NodeTraversal.traverse(compiler,    externs,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
286	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  t,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  t,  assertOnChange);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externs,  t,  assertOnChange);	      NodeTraversal.traverse(compiler,    externs,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
287	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  t,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  t,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externs,  t,  root);	      NodeTraversal.traverse(compiler,    externs,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
288	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
289	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
290	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  hasOkDuplicateDeclaration);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
291	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
292	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  true);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  true);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
293	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  parent);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  parent);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
294	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
295	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  false);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  false);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
296	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
297	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t).traverse(root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t).traverse(root);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
298	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  checkUserDeclarations)).traverse(root);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
299	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(root);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
300	[BUG]  [BUGGY]  t.traverseRoots(root,  externs,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(root,  externs,  false);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(root,  externs,  false);	  t.traverseRoots(externs,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
301	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(compiler,  externs,  false);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(compiler,  externs,  false);	  t.traverseRoots(externs,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
302	[BUG]  [BUGGY]  t.traverseRoots(converter,  externs,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(converter,  externs,  false);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(converter,  externs,  false);	  t.traverseRoots(externs,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
303	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  false,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  false,  true);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  false,  true);	  t.traverseRoots(externs,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
304	[BUG]  [BUGGY]  t.traverseRoots(null,  externs,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(null,  externs,  false);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(null,  externs,  false);	  t.traverseRoots(externs,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
305	[BUG]  [BUGGY]  t.traverseRoots(constantMap,  externs,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(constantMap,  externs,  false);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(constantMap,  externs,  false);	  t.traverseRoots(externs,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
306	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  checkUserDeclarations)).traverse(root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
307	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).traverse(root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  checkUserDeclarations).traverse(root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
308	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
309	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEqualsOnChange)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEqualsOnChange)).traverse(root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertEqualsOnChange)).traverse(root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
310	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
311	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(compiler,  externals,  renamer);	      NodeTraversal.traverseRoots(compiler,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	30	None	replace
312	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  renamer,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  renamer,  externals);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(compiler,  renamer,  externals);	      NodeTraversal.traverseRoots(compiler,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	30	None	replace
313	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(compiler,  externes,  renamer);	      NodeTraversal.traverseRoots(compiler,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	30	None	replace
314	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  renamer,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  renamer,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(compiler,  renamer,  root);	      NodeTraversal.traverseRoots(compiler,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	30	None	replace
315	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  roots);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  roots);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(compiler,  roots);	      NodeTraversal.traverseRoots(compiler,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	30	None	replace
316	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  externs);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  root,  externs);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
317	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  assertOnChange);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  assertOnChange);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
318	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
319	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  renamer);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
320	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  hasOkDuplicateDeclaration);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
321	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  assertOnChange);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externs,  assertOnChange);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
322	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  false);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  false);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
323	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  true);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  true);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
324	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(converter,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(converter,  externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(converter,  externs,  root);	      NodeTraversal.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
325	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(externs,  root,  renamer);	      NodeTraversal.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
326	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  root);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(compiler,  externes,  root);	      NodeTraversal.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
327	[BUG]  [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseNode(compiler,  externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseNode(compiler,  externs,  root);	      NodeTraversal.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
328	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(constantMap,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(constantMap,  externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(constantMap,  externs,  root);	      NodeTraversal.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
329	[BUG]  [BUGGY]  t.traverseDeclaredRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseDeclaredRoots(externs,  root);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseDeclaredRoots(externs,  root);	  t.traverseRoots(root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
330	[BUG]  [BUGGY]  t.traverseRoot(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoot(externs,  root);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoot(externs,  root);	  t.traverseRoots(root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
331	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(compiler,  externs);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(compiler,  externs);	  t.traverseRoots(root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
332	[BUG]  [BUGGY]  t.traverseRoots(root,  externs,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(root,  externs,  assertOnChange);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(root,  externs,  assertOnChange);	  t.traverseRoots(root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
333	[BUG]  [BUGGY]  t.traverse(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverse(externs,  root);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverse(externs,  root);	  t.traverseRoots(root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
334	[BUG]  [BUGGY]  t.traverseExterns(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseExterns(externs,  root);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseExterns(externs,  root);	  t.traverseRoots(root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
335	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
336	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  parent);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  parent);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
337	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  renamer);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
338	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  externals,  root);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  externals,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  externals,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
339	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  externs);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  externs);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
340	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  internal);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  internal);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  internal);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
341	[BUG]  [BUGGY]  t.traverseRoots(root,  externs,  raf);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(root,  externs,  raf);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(root,  externs,  raf);	  t.traverseRoots(externs,    root,    raf);    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
342	[BUG]  [BUGGY]  t.traverseRoots(raf,  root,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(raf,  root,  externs);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(raf,  root,  externs);	  t.traverseRoots(externs,    root,    raf);    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
343	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  raf);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(compiler,  externs,  raf);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(compiler,  externs,  raf);	  t.traverseRoots(externs,    root,    raf);    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
344	[BUG]  [BUGGY]  t.traverseRoots(converter,  externs,  raf);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(converter,  externs,  raf);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(converter,  externs,  raf);	  t.traverseRoots(externs,    root,    raf);    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
345	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  raf,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  raf,  assertOnChange);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  raf,  assertOnChange);	  t.traverseRoots(externs,    root,    raf);    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
346	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
347	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externes,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
348	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
349	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement(compiler,  assertOnChange)).traverseRoots(externs,  root);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
350	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  renamer);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
351	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  Root);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  Root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  Root);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
352	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  parent);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
353	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
354	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
355	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler());  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler());	      	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
356	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler),  t);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler),  t);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler),  t);	      	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
357	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
358	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
359	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(new  NormalizeStatements(compiler,  assertOnChange));  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(new  NormalizeStatements(compiler,  assertOnChange));  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(new  NormalizeStatements(compiler,  assertOnChange));	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
360	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  checkUserDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  checkUserDeclaration);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  checkUserDeclaration);	  t.traverseRoots(externs,    root,    assertOnChange);    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
361	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  assertOnChange);  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  assertOnChange);  compiler.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  assertOnChange);  compiler.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
362	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  false);  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  false);  compiler.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  false);  compiler.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
363	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  t);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  t);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  t);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	replace
364	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
365	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs.cloneTree());  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs.cloneTree());	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
366	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
367	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
368	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots();  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots();  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots();	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
369	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  hasOkDuplicateDeclaration);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  hasOkDuplicateDeclaration);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
370	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  parent);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  parent);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
371	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_BLOCK_VAR_ERROR);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_BLOCK_VAR_ERROR);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_BLOCK_VAR_ERROR);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
372	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).transverseRoots(externs);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).transverseRoots(externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).transverseRoots(externs);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	replace
373	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(root);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(root);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	replace
374	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(externs);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	replace
375	[BUG]  [BUGGY]  NodeTraversal.traverseNodeDeclarations(compiler,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseNodeDeclarations(compiler,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseNodeDeclarations(compiler,  root);	      NodeTraversal.traverseRoots(compiler,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
376	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseConstants(compiler,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseConstants(compiler,  root);	      NodeTraversal.traverseRoots(compiler,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
377	[BUG]  [BUGGY]  NodeTraversal.traverseAlternates(compiler,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseAlternates(compiler,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseAlternates(compiler,  root);	      NodeTraversal.traverseRoots(compiler,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
378	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  t);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externals,  t);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externals,  t);	      NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
379	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  roots);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  roots);	      NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
380	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
381	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root,  externs);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
382	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externes);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externes);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externes);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
383	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  interns);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  interns);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  interns);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
384	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
385	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(converter,  root);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(converter,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(converter,  root);	      NodeTraversal.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
386	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(externs,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(externs,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(externs,  renamer);	      NodeTraversal.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
387	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(compiler,  externals);	      NodeTraversal.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
388	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
389	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(root);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).trace(root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
390	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseFromRoots(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseFromRoots(externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseFromRoots(externs);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
391	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
392	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  renamer,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
393	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange),  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange),  hasOkDuplicateDeclaration);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange),  hasOkDuplicateDeclaration);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange));    	non-compiled	[CE]  reached  end  of  file  while  parsing	32	None	replace
394	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_TO_FOR);  t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_TO_FOR);  t.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_TO_FOR);  t.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
395	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_BLOCK_VAR_ERROR);  t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_BLOCK_VAR_ERROR);  t.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_BLOCK_VAR_ERROR);  t.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
396	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  null);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  null);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  null);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
397	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  externals);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  externals);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
398	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertVars));  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertVars));  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertVars));	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
399	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  new  normalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  new  normalizeStatements());  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  new  normalizeStatements());	  t.traverseRoots(externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
400	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  new  NormalizeDeclarations());  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  new  NormalizeDeclarations());  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  new  NormalizeDeclarations());	  t.traverseRoots(externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
401	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
402	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  true);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  true);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
403	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  new  NodeTicklingCallback());  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  new  NodeTicklingCallback());  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  new  NodeTicklingCallback());	  t.traverseRoots(externs,    root,    null);    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
404	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  new  NodeTraversal());  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  new  NodeTraversal());  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  new  NodeTraversal());	  t.traverseRoots(externs,    root,    null);    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
405	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  new  MakeDeclaredNamesUnique());  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  new  MakeDeclaredNamesUnique());  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  new  MakeDeclaredNamesUnique());	  t.traverseRoots(externs,    root,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
406	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  renamer,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  renamer,  checkUserDeclarations);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  renamer,  checkUserDeclarations);	  t.traverseRoots(externs,    root,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
407	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs);	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
408	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root);	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
409	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null);	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
410	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoot(externs);	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
411	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).path(root);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).path(root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).path(root);	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
412	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs);	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
413	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  raf,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  raf,  hasOkDuplicateDeclaration);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  raf,  hasOkDuplicateDeclaration);	  t.traverseRoots(externs,    root,    raf);    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
414	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  factory);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  factory);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  factory);	  t.traverseRoots(externs,    root,    raf);    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
415	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  assertOnChange);  t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  assertOnChange);  t.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  assertOnChange);  t.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
416	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  false);  t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  false);  t.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  false);  t.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
417	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  new  NormalizeStatements());  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  root,  new  NormalizeStatements());	      NodeTraversal.traverseRoots(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
418	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  false);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  false);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  root,  false);	      NodeTraversal.traverseRoots(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
419	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  externs);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  externs);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    DEFAULT_WHILE_TO_FOR);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
420	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  renamer);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    DEFAULT_WHILE_TO_FOR);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
421	[BUG]  [BUGGY]  Converter  <  Node>  t  =  new  ConverterTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  Converter  <  Node>  t  =  new  ConverterTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	Converter  <  Node>  t  =  new  ConverterTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    DEFAULT_WHILE_TO_FOR);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
422	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externs,  renamer);	      NodeTraversal.traverse(compiler,    externs,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
423	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  t);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  roots,  t);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  roots,  t);	      NodeTraversal.traverse(compiler,    externs,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
424	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  externs);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  externs);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    DEFAULT_LOCAL_NAMES_UNIQUE);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
425	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_OKDuplicateDeclaration);  t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_OKDuplicateDeclaration);  t.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_OKDuplicateDeclaration);  t.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    DEFAULT_LOCAL_NAMES_UNIQUE);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
426	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_TO_FOR);  t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_TO_FOR);  t.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_TO_FOR);  t.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    DEFAULT_LOCAL_NAMES_UNIQUE);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
427	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_ANNOTATIONS);  t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_ANNOTATIONS);  t.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_ANNOTATIONS);  t.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    DEFAULT_LOCAL_NAMES_UNIQUE);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
428	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).transverse(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).transverse(externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).transverse(externs);	      NodeTraversal.traverseRoots(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	52	None	replace
429	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs);	      NodeTraversal.traverseRoots(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	52	None	replace
430	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).path(root);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).path(root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).path(root);	      NodeTraversal.traverseRoots(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	52	None	replace
431	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).reset();  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).reset();  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).reset();	      NodeTraversal.traverseRoots(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	52	None	replace
432	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs);	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
433	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(root);	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
434	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null);	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
435	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).trace(externs);	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
436	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).plot(externs);	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
437	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_TO_FOR);  renamer.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_TO_FOR);  renamer.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_TO_FOR);  renamer.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    renamer.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
438	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_BLOCK_VAR_ERROR);  renamer.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_BLOCK_VAR_ERROR);  renamer.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_BLOCK_VAR_ERROR);  renamer.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    renamer.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
439	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  externals);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  externals);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    renamer.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
440	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_GLOBAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_GLOBAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_GLOBAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    renamer.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
441	[BUG]  [BUGGY]  if(!hasOkDuplicateDeclaration)  {  NodeTraversal  t  =  new  NodeTraversal(compiler,  root);  t.traverseRoots(externs,  root);  }  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  if(!hasOkDuplicateDeclaration)  {  NodeTraversal  t  =  new  NodeTraversal(compiler,  root);  t.traverseRoots(externs,  root);  }  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	if(!hasOkDuplicateDeclaration)  {  NodeTraversal  t  =  new  NodeTraversal(compiler,  root);  t.traverseRoots(externs,  root);  }	      NodeTraversal    t    =    new    NodeTraversal(compiler,    root);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
442	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  this.checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  this.checkUserDeclarations);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  this.checkUserDeclarations);	  t.traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
443	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement());  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement());  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement());	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
444	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externals,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externals,  root);	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
445	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externals);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	replace
446	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(null,  externs);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	replace
447	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traceRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traceRoots(externs,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traceRoots(externs,  root);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	replace
448	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externes);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externes);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externes);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	replace
449	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseConstants(compiler,  root,  new  NormalizeStatements());  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseConstants(compiler,  root,  new  NormalizeStatements());	      NodeTraversal.traverseConstants(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
450	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseConstants(compiler,  renamer);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseConstants(compiler,  renamer);	      NodeTraversal.traverseConstants(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
451	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(parent));  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(parent));  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(parent));	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler));    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
452	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(null));  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(null));  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(null));	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler));    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
453	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(reportOnChange));  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(reportOnChange));  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(reportOnChange));	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler));    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
454	[BUG]  [BUGGY]  t.traverseNodeDeclarations(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseNodeDeclarations(externs,  root);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseNodeDeclarations(externs,  root);	  t.traverseRoots(root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
455	[BUG]  [BUGGY]  t.traverseNodes(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseNodes(externs,  root);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseNodes(externs,  root);	  t.traverseRoots(root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
456	[BUG]  [BUGGY]  t.traverseNodeDeclaration(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseNodeDeclaration(externs,  root);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseNodeDeclaration(externs,  root);	  t.traverseRoots(root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
457	[BUG]  [BUGGY]  t.traverseReferences(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseReferences(externs,  root);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseReferences(externs,  root);	  t.traverseRoots(root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
458	[BUG]  [BUGGY]  t.traverseDeclarations(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseDeclarations(externs,  root);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseDeclarations(externs,  root);	  t.traverseRoots(root,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
459	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs.cloneTree());  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs.cloneTree());	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
460	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externes);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externes);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externes);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
461	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  checkUserDeclarations);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externs,  renamer,  checkUserDeclarations);	      NodeTraversal.traverse(compiler,    externs,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
462	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  renamer);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  renamer);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	replace
463	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  this);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  this);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  this);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	replace
464	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeStatements());  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externs,  root,  new  NormalizeStatements());	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
465	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
466	[BUG]  [BUGGY]  renamer.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  renamer.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	renamer.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    renamer.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
467	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  internal);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  internal);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  internal);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    renamer.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
468	[BUG]  [BUGGY]  MutableDeclaration  t  =  new  MutableDeclaration(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  MutableDeclaration  t  =  new  MutableDeclaration(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	MutableDeclaration  t  =  new  MutableDeclaration(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    renamer.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
469	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  this,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  this,  renamer);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  this,  renamer);	  t.traverseRoots(externs,    root,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	33	None	replace
470	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
471	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
472	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  checkUserDeclarations);  t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  checkUserDeclarations);  t.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  checkUserDeclarations);  t.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
473	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  externals,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  externals,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  externals,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
474	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  factory);  t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  factory);  t.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  factory);  t.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
475	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  t);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseConstants(compiler,  t);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseConstants(compiler,  t);	      NodeTraversal.traverseConstants(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
476	[BUG]  [BUGGY]  NodeTraversal.traverseConstants(compiler,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseConstants(compiler,  assertOnChange);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseConstants(compiler,  assertOnChange);	      NodeTraversal.traverseConstants(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
477	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  RENamer);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  RENamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  RENamer);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
478	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_TO_FOR);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_TO_FOR);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_TO_FOR);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
479	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_BOOLEAN_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_BOOLEAN_NAMES_UNIQUE);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_BOOLEAN_NAMES_UNIQUE);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
480	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  hasOkDuplicateDeclaration));  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  hasOkDuplicateDeclaration));  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange,  hasOkDuplicateDeclaration));	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
481	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertUniqueChange));  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertUniqueChange));  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertUniqueChange));	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange));    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
482	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  renamer);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
483	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
484	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
485	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externes,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externes,  renamer);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
486	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),.traverseRoots(externs,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
487	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  renamer);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  renamer);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
488	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),.traverseRoots(externs,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
489	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange).traverseRoots(externs,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange).traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
490	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).straverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
491	[BUG]  [BUGGY]  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
492	[BUG]  [BUGGY]  TraverseStatement  t  =  new  TraverseStatement(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  TraverseStatement  t  =  new  TraverseStatement(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	TraverseStatement  t  =  new  TraverseStatement(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
493	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
494	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  renamer);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  renamer);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
495	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  internal);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
496	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  t.traverseRoots(externs);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  t.traverseRoots(externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  t.traverseRoots(externs);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	replace
497	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  renamer);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  renamer);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	replace
498	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	replace
499	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	replace
500	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  t,  renamer);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  t,  renamer);	      NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
501	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  t,  hasOkDuplicateDeclaration);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  t,  hasOkDuplicateDeclaration);	      NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
502	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  t,  this);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  t,  this);	      NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
503	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  rehashCode);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  t,  rehashCode);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  t,  rehashCode);	      NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
504	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  refactory);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  t,  refactory);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  t,  refactory);	      NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
505	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  t.traverseRoots(externs,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)),  t.traverseRoots(externs,  root);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
506	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(externs,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t.traverseRoots(externs,  root);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
507	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots();  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots();  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots();	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
508	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE));  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE));  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE));	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange));    	non-compiled	[CE]  reached  end  of  file  while  parsing	32	None	replace
509	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange,  renamer));  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange,  renamer));  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange,  renamer));	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange));    	non-compiled	[CE]  reached  end  of  file  while  parsing	32	None	replace
510	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  this);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  this);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  this);	      NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	replace
511	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  hasOkDuplicateDeclaration,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  hasOkDuplicateDeclaration,  renamer);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  hasOkDuplicateDeclaration,  renamer);	  t.traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
512	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  rehashCodeDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  rehashCodeDeclaration);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  rehashCodeDeclaration);	  t.traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
513	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  hasOkDuplicateDeclaration,  raf);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  hasOkDuplicateDeclaration,  raf);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  hasOkDuplicateDeclaration,  raf);	  t.traverseRoots(externs,    root,    hasOkDuplicateDeclaration);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
514	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  renamer,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  renamer,  true);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  renamer,  true);	  t.traverseRoots(externs,    root,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
515	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  renamer,  factory);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  renamer,  factory);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  renamer,  factory);	  t.traverseRoots(externs,    root,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
516	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  renamer,  null);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  renamer,  null);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  renamer,  null);	  t.traverseRoots(externs,    root,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
517	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  this);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  this);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  renamer,  this);	      NodeTraversal.traverse(compiler,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
518	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  renamer);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  renamer);	      NodeTraversal.traverseRoots(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
519	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  false,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  false,  renamer);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  false,  renamer);	  t.traverseRoots(externs,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
520	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  false,  raf);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  false,  raf);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  false,  raf);	  t.traverseRoots(externs,    root,    false);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
521	[BUG]  [BUGGY]  t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    DEFAULT_WHILE_TO_FOR);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
522	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  internal);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  internal);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  internal);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    DEFAULT_WHILE_TO_FOR);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
523	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  renamer,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  renamer,  assertOnChange);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(compiler,  renamer,  assertOnChange);	      NodeTraversal.traverseRoots(compiler,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	30	None	replace
524	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  renamer,  expr);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  renamer,  expr);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(compiler,  renamer,  expr);	      NodeTraversal.traverseRoots(compiler,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	30	None	replace
525	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  renamer,  externes);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  renamer,  externes);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(compiler,  renamer,  externes);	      NodeTraversal.traverseRoots(compiler,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	30	None	replace
526	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  renamer,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
527	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange),  t).traverse(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange),  t).traverse(externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange),  t).traverse(externs);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
528	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange),  t);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange),  t);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange),  t);	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
529	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
530	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverse(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
531	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  new  NormalizeStatements(compiler));  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  new  NormalizeStatements(compiler));  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  renamer,  new  NormalizeStatements(compiler));	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler));    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
532	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  NormalizeStatements(compiler));  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  NormalizeStatements(compiler));  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  t,  new  NormalizeStatements(compiler));	      NodeTraversal.traverse(compiler,    root,    new    NormalizeStatements(compiler));    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
533	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
534	[BUG]  [BUGGY]  if(compiler!=  null)  {  NodeTraversal  t  =  new  NodeTraversal(compiler,  root);  t.traverseRoots(externs,  root);  }  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  if(compiler!=  null)  {  NodeTraversal  t  =  new  NodeTraversal(compiler,  root);  t.traverseRoots(externs,  root);  }  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	if(compiler!=  null)  {  NodeTraversal  t  =  new  NodeTraversal(compiler,  root);  t.traverseRoots(externs,  root);  }	      NodeTraversal    t    =    new    NodeTraversal(compiler,    root);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
535	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  new  NormalizeStatements(compiler));  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  new  NormalizeStatements(compiler));  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  new  NormalizeStatements(compiler));	  t.traverseRoots(externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
536	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  new  NormalizeStatements(externs));  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  new  NormalizeStatements(externs));  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  new  NormalizeStatements(externs));	  t.traverseRoots(externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
537	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  new  NormalizeStatements(testOnChange));  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  new  NormalizeStatements(testOnChange));  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  new  NormalizeStatements(testOnChange));	  t.traverseRoots(externs,    root,    new    NormalizeStatements());    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
538	[BUG]  [BUGGY]  t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    DEFAULT_LOCAL_NAMES_UNIQUE);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
539	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  internal);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  internal);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  internal);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    DEFAULT_LOCAL_NAMES_UNIQUE);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
540	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  null,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  null,  renamer);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  null,  renamer);	  t.traverseRoots(externs,    root,    null);    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
541	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  new  NodeTraversal(compiler,  null));  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  new  NodeTraversal(compiler,  null));  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  new  NodeTraversal(compiler,  null));	  t.traverseRoots(externs,    root,    null);    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
542	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  compiler.traverseRoots(externs,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  compiler.traverseRoots(externs,  externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  compiler.traverseRoots(externs,  externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
543	[BUG]  [BUGGY]  if(compiler!=  null)  {  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  compiler.traverseRoots(externs,  root);  }  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  if(compiler!=  null)  {  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  compiler.traverseRoots(externs,  root);  }  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	if(compiler!=  null)  {  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  compiler.traverseRoots(externs,  root);  }	      NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
544	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  compiler.traverseRoots(externs,  externals,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  compiler.traverseRoots(externs,  externals,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  compiler.traverseRoots(externs,  externals,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
545	[BUG]  [BUGGY]  Traversal  t  =  new  Traversal(compiler,  renamer);  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  Traversal  t  =  new  Traversal(compiler,  renamer);  compiler.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	Traversal  t  =  new  Traversal(compiler,  renamer);  compiler.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
546	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  ramer);  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  ramer);  compiler.traverseRoots(externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  ramer);  compiler.traverseRoots(externs,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
547	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  compiler.traverseRoots(externs,  internal);  [CE]  reached  end  of  file  while  parsing  [FE]                                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  compiler.traverseRoots(externs,  internal);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  compiler.traverseRoots(externs,  internal);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);    compiler.traverseRoots(externs,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
548	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)),  t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)),  t.traverseRoots(externs,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)),  t.traverseRoots(externs,  root);	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
549	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externals,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
550	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  t,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  t,  renamer);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  externs,  t,  renamer);	      NodeTraversal.traverse(compiler,    externs,    t);    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
551	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(compiler);	      NodeTraversal.traverseRoots(compiler,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
552	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  raf,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  raf,  checkUserDeclarations);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  raf,  checkUserDeclarations);	  t.traverseRoots(externs,    root,    raf);    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
553	[BUG]  [BUGGY]  t.traverseRoots(converter,  root,  raf);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(converter,  root,  raf);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(converter,  root,  raf);	  t.traverseRoots(externs,    root,    raf);    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
554	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  exprs);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  exprs);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  exprs);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
555	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  assertOnChange);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  assertOnChange);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
556	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  hasOkDuplicateDeclaration);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  hasOkDuplicateDeclaration);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
557	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  checkUserDeclarations);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  checkUserDeclarations);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
558	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  root);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
559	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  this.checkUserDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  this.checkUserDeclarations);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  this.checkUserDeclarations);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
560	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  renamer);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  renamer);	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
561	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  assertOnChange);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  assertOnChange);	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
562	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  true);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  true);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverseRoots(compiler,  externs,  renamer,  true);	      NodeTraversal.traverseRoots(compiler,    externs,    renamer);    	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	replace
563	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  renamer,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
564	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)),  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)),  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)),  renamer);	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
565	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);	      NodeTraversal.traverse(compiler,    externs,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
566	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  new  NormalizeStatements(compiler,  assertOnChange));  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  new  NormalizeStatements(compiler,  assertOnChange));  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  new  NormalizeStatements(compiler,  assertOnChange));	  t.traverseRoots(externs,    root,    assertOnChange);    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
567	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange),  t);	      NodeTraversal.traverseRoots(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	52	None	replace
568	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse();  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse();  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse();	      NodeTraversal.traverseRoots(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	52	None	replace
569	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).padding(root);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).padding(root);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).padding(root);	      NodeTraversal.traverseRoots(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(root);    	non-compiled	[CE]  reached  end  of  file  while  parsing	52	None	replace
570	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange));  t.traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]                        RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange));  t.traverse(root);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange));  t.traverse(root);	      	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
571	[BUG]  [BUGGY]  t.traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]                          RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverse(root);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverse(root);	      	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
572	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]                            RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [BUGGY]    }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal.traverse(compiler,  t,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);	      	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
573	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange).traverseRoots(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange).traverseRoots(externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange).traverseRoots(externs);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
574	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),.traverseRoots(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),.traverseRoots(externs);  [BUGGY]    t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange),.traverseRoots(externs);	      NodeTraversal    t    =    new    NodeTraversal(compiler,    new    NormalizeStatements(compiler,    assertOnChange)).traverse(externs);    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
