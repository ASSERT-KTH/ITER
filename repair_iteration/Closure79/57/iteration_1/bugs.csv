bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]  t.traverseRoots(externs,  root,  assertOnChange);  [BUGGY]  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  assertOnChange);	t.traverseRoots(externs,  root);  	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
2	[BUG]  [BUGGY]  t.traverseRoots(root,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]  t.traverseRoots(root,  externs);  [BUGGY]  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(root,  externs);	t.traverseRoots(externs,  root);  	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
3	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]  t.traverseRoots(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  hasOkDuplicateDeclaration);	t.traverseRoots(externs,  root);  	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
4	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	t.traverseRoots(externs,  root);  	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
5	[BUG]  [BUGGY]  t.traverseRoots(converter,  root);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]  t.traverseRoots(converter,  root);  [BUGGY]  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(converter,  root);	t.traverseRoots(externs,  root);  	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
6	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  false);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]  t.traverseRoots(externs,  root,  false);  [BUGGY]  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  false);	t.traverseRoots(externs,  root);  	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
7	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  true);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]  t.traverseRoots(externs,  root,  true);  [BUGGY]  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  true);	t.traverseRoots(externs,  root);  	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
8	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]  t.traverseRoots(externs,  root,  renamer);  [BUGGY]  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  renamer);	t.traverseRoots(externs,  root);  	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
9	[BUG]  [BUGGY]    [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    [BUGGY]  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	  	t.traverseRoots(externs,  root);  	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
10	[BUG]  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  root);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
11	[BUG]  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
12	[BUG]  [BUGGY]    NodeTraversal.traverseRoots(compiler,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal.traverseRoots(compiler,  externs,  root);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal.traverseRoots(compiler,  externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
13	[BUG]  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
14	[BUG]  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  root);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
15	[BUG]  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
16	[BUG]  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  root);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
17	[BUG]  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  externs);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal  t  =  new  NodeTraversal(compiler,  externs);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
18	[BUG]  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  compiler.traverseRoots(externs,  root);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  compiler.traverseRoots(externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
19	[BUG]  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  root);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
20	[BUG]  [BUGGY]    NodeTraversal.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal.traverseRoots(externs,  root);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal.traverseRoots(externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
21	[BUG]  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  root);  t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  root);  t.traverseRoots(externs,  root);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal  t  =  new  NodeTraversal(compiler,  root);  t.traverseRoots(externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
22	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  root);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal.traverse(compiler,  externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
23	[BUG]  [BUGGY]    NodeTraversal.traverseRoots(compiler,  externs,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal.traverseRoots(compiler,  externs,  renamer);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal.traverseRoots(compiler,  externs,  renamer);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
24	[BUG]  [BUGGY]    NodeTraversal.traverseRoots(compiler,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal.traverseRoots(compiler,  externs);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal.traverseRoots(compiler,  externs);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
25	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  null);  [CE]  reached  end  of  file  while  parsing  [FE]    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]  t.traverseRoots(externs,  root,  null);  [BUGGY]  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  null);	t.traverseRoots(externs,  root);  	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
26	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal.traverse(compiler,  renamer);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal.traverse(compiler,  renamer);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
27	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
28	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
29	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  renamer);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal.traverse(compiler,  externs,  renamer);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
30	[BUG]  [BUGGY]    NodeTraversal.traverseRoots(compiler,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal.traverseRoots(compiler,  renamer);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal.traverseRoots(compiler,  renamer);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
31	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
32	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange));  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange));  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange));		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
33	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  this);  [CE]  reached  end  of  file  while  parsing  [FE]    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]  t.traverseRoots(externs,  root,  this);  [BUGGY]  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  this);	t.traverseRoots(externs,  root);  	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
34	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]  t.traverseRoots(externs,  root,  new  NormalizeStatements());  [BUGGY]  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  new  NormalizeStatements());	t.traverseRoots(externs,  root);  	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
35	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  raf);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]  t.traverseRoots(externs,  root,  raf);  [BUGGY]  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	t.traverseRoots(externs,  root,  raf);	t.traverseRoots(externs,  root);  	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
36	[BUG]  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
37	[BUG]  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
38	[BUG]  [BUGGY]    NodeTraversal.traverseRoots(compiler,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal.traverseRoots(compiler,  externs,  root);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal.traverseRoots(compiler,  externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
39	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal.traverse(compiler,  root);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal.traverse(compiler,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
40	[BUG]  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
41	[BUG]  [BUGGY]    NodeTraversal.traverseRoots(compiler,  root);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal.traverseRoots(compiler,  root);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal.traverseRoots(compiler,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
42	[BUG]  [BUGGY]    NodeTraversal.traverseConstants(compiler,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal.traverseConstants(compiler,  root);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal.traverseConstants(compiler,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
43	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  root);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal.traverse(compiler,  externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
44	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  t);  [CE]  reached  end  of  file  while  parsing  [FE]      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  t);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal.traverse(compiler,  externs,  t);		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
45	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
46	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
47	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler));  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler));  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler));		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
48	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  t);  [CE]  reached  end  of  file  while  parsing  [FE]    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal.traverse(compiler,  t);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal.traverse(compiler,  t);		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
49	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
50	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
51	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
52	[BUG]  [BUGGY]    NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
53	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange));		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
