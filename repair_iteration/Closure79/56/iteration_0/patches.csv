bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]    NodeTraversal.traverse(compiler,  root,  hasOkDuplicateDeclaration);  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	    NodeTraversal.traverse(compiler,  root,  hasOkDuplicateDeclaration);		non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	add
2	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root);  [CE]  reached  end  of  file  while  parsing  [FE]      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]    NodeTraversal.traverse(compiler,  root);  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	    NodeTraversal.traverse(compiler,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	add
3	[BUG]  [BUGGY]    NodeTraversal.traverseConstants(compiler,  root,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]    NodeTraversal.traverseConstants(compiler,  root,  hasOkDuplicateDeclaration);  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	    NodeTraversal.traverseConstants(compiler,  root,  hasOkDuplicateDeclaration);		non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	add
4	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE));  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE));  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  MAKE_LOCAL_NAMES_UNIQUE));		non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	add
5	[BUG]  [BUGGY]    NodeTraversal.traverseNode(compiler,  root,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]    NodeTraversal.traverseNode(compiler,  root,  hasOkDuplicateDeclaration);  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	    NodeTraversal.traverseNode(compiler,  root,  hasOkDuplicateDeclaration);		non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	add
6	[BUG]  [BUGGY]    NodeTraversal.traverseConstants(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]    NodeTraversal.traverseConstants(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	    NodeTraversal.traverseConstants(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);		non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	add
7	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);		non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	add
8	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange));  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange));  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange));		non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	add
9	[BUG]  [BUGGY]    NodeTraversal.traverseConstants(compiler,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]    NodeTraversal.traverseConstants(compiler,  root);  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	    NodeTraversal.traverseConstants(compiler,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	add
10	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);		non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	add
11	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root);  [CE]  reached  end  of  file  while  parsing  [FE]    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  root);	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
12	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs);	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
13	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  renamer);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  renamer);	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
14	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  assertOnChange);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  assertOnChange);	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
15	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externals);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externals);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externals);	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
16	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  parent,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  parent,  renamer);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  parent,  renamer);	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
17	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  renamer);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  renamer);	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
18	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs.cloneTree());  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs.cloneTree());	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
19	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  roots);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  roots);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  roots);	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
20	[BUG]  [BUGGY]    [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	  	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
21	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  renamer);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  renamer);	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
22	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  assertOnChange);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  assertOnChange);	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
23	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externes,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externes,  renamer);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externes,  renamer);	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
24	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  root);  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	    NodeTraversal.traverse(compiler,  externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	add
25	[BUG]  [BUGGY]    NodeTraversal.traverseRoots(compiler,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]    NodeTraversal.traverseRoots(compiler,  externs,  root);  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	    NodeTraversal.traverseRoots(compiler,  externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	add
26	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	add
27	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler));  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler));  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler));		non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	add
28	[BUG]  [BUGGY]    NodeTraversal.traverseNode(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]    NodeTraversal.traverseNode(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	    NodeTraversal.traverseNode(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	add
29	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)));  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)));  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)));		non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	add
30	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	add
31	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse();  [CE]  reached  end  of  file  while  parsing  [FE]      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse();  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse();		non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	add
32	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  [BUGGY]    NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }        [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	124	124	5	replace	    NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);		non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	add
33	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  root);  [CE]  reached  end  of  file  while  parsing  [FE]    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  root);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  root);	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
34	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  expr);  [CE]  reached  end  of  file  while  parsing  [FE]      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  expr);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  expr);	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
35	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  parent);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  parent);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  parent);	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
36	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  true);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  true);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  true);	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
37	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  raf);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  raf);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  raf);	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
38	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer.getName());  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer.getName());  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer.getName());	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
39	[BUG]  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  root);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
40	[BUG]  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
41	[BUG]  [BUGGY]    NodeTraversal.traverseRoots(compiler,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal.traverseRoots(compiler,  externs,  root);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal.traverseRoots(compiler,  externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
42	[BUG]  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  root);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverseRoots(externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
43	[BUG]  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
44	[BUG]  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  root);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
45	[BUG]  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  compiler.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  compiler.traverseRoots(externs,  root);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  compiler.traverseRoots(externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
46	[BUG]  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  root);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal  t  =  new  NodeTraversal(compiler,  DEFAULT_WHILE_TO_FOR);  t.traverseRoots(externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
47	[BUG]  [BUGGY]    NodeTraversal.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal.traverseRoots(externs,  root);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal.traverseRoots(externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
48	[BUG]  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  root);  t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  root);  t.traverseRoots(externs,  root);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal  t  =  new  NodeTraversal(compiler,  root);  t.traverseRoots(externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
49	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  root);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal.traverse(compiler,  externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
50	[BUG]  [BUGGY]    NodeTraversal.traverseRoots(compiler,  externs,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal.traverseRoots(compiler,  externs,  renamer);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal.traverseRoots(compiler,  externs,  renamer);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
51	[BUG]  [BUGGY]    NodeTraversal.traverseRoots(compiler,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal.traverseRoots(compiler,  externs);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal.traverseRoots(compiler,  externs);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
52	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal.traverse(compiler,  renamer);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal.traverse(compiler,  renamer);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
53	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
54	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
55	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  renamer);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal.traverse(compiler,  externs,  renamer);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
56	[BUG]  [BUGGY]    NodeTraversal.traverseRoots(compiler,  renamer);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal.traverseRoots(compiler,  renamer);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal.traverseRoots(compiler,  renamer);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
57	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
58	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange));  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange));  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	125	125	5	replace	    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange));		non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
