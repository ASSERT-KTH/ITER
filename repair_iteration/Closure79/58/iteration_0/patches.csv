bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
2	[BUG]  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
3	[BUG]  [BUGGY]    t.traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    t.traverseRoots(externs,  root);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    t.traverseRoots(externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
4	[BUG]  [BUGGY]    NodeTraversal.traverseRoots(compiler,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal.traverseRoots(compiler,  externs,  root);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal.traverseRoots(compiler,  externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
5	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal.traverse(compiler,  root);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal.traverse(compiler,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
6	[BUG]  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal  t  =  new  NodeTraversal(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
7	[BUG]  [BUGGY]    NodeTraversal.traverseRoots(compiler,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal.traverseRoots(compiler,  root);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal.traverseRoots(compiler,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
8	[BUG]  [BUGGY]    NodeTraversal.traverseConstants(compiler,  root);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal.traverseConstants(compiler,  root);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal.traverseConstants(compiler,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
9	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  [CE]  reached  end  of  file  while  parsing  [FE]    RuntimeException  [CONTEXT]              [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  this);	removeDuplicateDeclarations(externs,  root);  	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
10	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  false);  [CE]  reached  end  of  file  while  parsing  [FE]      RuntimeException  [CONTEXT]              [BUGGY]  NodeTraversal.traverse(compiler,  externs,  false);  [BUGGY]  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  false);	removeDuplicateDeclarations(externs,  root);  	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
11	[BUG]  [BUGGY]  removeDuplicateDeclarations(externs,  root,  assertOnChange);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException  [CONTEXT]              [BUGGY]  removeDuplicateDeclarations(externs,  root,  assertOnChange);  [BUGGY]  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	removeDuplicateDeclarations(externs,  root,  assertOnChange);	removeDuplicateDeclarations(externs,  root);  	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
12	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  ScopeTicklingCallback());  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException  [CONTEXT]              [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  ScopeTicklingCallback());  [BUGGY]  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  new  ScopeTicklingCallback());	removeDuplicateDeclarations(externs,  root);  	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
13	[BUG]  [BUGGY]  removeDuplicateDeclarations(externs,  root,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException  [CONTEXT]              [BUGGY]  removeDuplicateDeclarations(externs,  root,  hasOkDuplicateDeclaration);  [BUGGY]  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	removeDuplicateDeclarations(externs,  root,  hasOkDuplicateDeclaration);	removeDuplicateDeclarations(externs,  root);  	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
14	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException  [CONTEXT]              [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements());  [BUGGY]  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements());	removeDuplicateDeclarations(externs,  root);  	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
15	[BUG]  [BUGGY]  removeDuplicateDeclarations(root,  externs);  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException  [CONTEXT]              [BUGGY]  removeDuplicateDeclarations(root,  externs);  [BUGGY]  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	removeDuplicateDeclarations(root,  externs);	removeDuplicateDeclarations(externs,  root);  	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
16	[BUG]  [BUGGY]  renamer.removeChild(externs);  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException  [CONTEXT]              [BUGGY]  renamer.removeChild(externs);  [BUGGY]  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	renamer.removeChild(externs);	removeDuplicateDeclarations(externs,  root);  	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
17	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException  [CONTEXT]              [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeDeclarationHandler());  [BUGGY]  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeDeclarationHandler());	removeDuplicateDeclarations(externs,  root);  	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
18	[BUG]  [BUGGY]    [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException  [CONTEXT]              [BUGGY]    [BUGGY]  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	  	removeDuplicateDeclarations(externs,  root);  	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
19	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  root);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal.traverse(compiler,  externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
20	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  t);  [CE]  reached  end  of  file  while  parsing  [FE]      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  t);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal.traverse(compiler,  externs,  t);		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
21	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
22	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
23	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler));  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler));  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements(compiler));		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
24	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]    RuntimeException  [CONTEXT]              [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler());  [BUGGY]  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler());	removeDuplicateDeclarations(externs,  root);  	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
25	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]      RuntimeException  [CONTEXT]              [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler());  [BUGGY]  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler());	removeDuplicateDeclarations(externs,  root);  	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
26	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement());  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException  [CONTEXT]              [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement());  [BUGGY]  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  new  NormalizeStatement());	removeDuplicateDeclarations(externs,  root);  	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
27	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException  [CONTEXT]              [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  [BUGGY]  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());	removeDuplicateDeclarations(externs,  root);  	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
28	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  t);  [CE]  reached  end  of  file  while  parsing  [FE]    RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal.traverse(compiler,  t);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal.traverse(compiler,  t);		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
29	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]      RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
30	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverseRoots(externs,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
31	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(externs);		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
32	[BUG]  [BUGGY]    NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal.traverseRoots(compiler,  new  NormalizeStatements(compiler,  assertOnChange)).traverse(root);		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
33	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException  [CONTEXT]  public  void  process(Node  externs,  Node  root)  {  new  NodeTraversal(  compiler,  new  NormalizeStatements(compiler,  assertOnChange))  .traverse(root);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  [BUGGY]    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange));  [BUGGY]  t.traverseRoots(externs,  root);  }          [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	126	126	5	replace	    NodeTraversal.traverse(compiler,  new  NormalizeStatements(compiler,  assertOnChange));		non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
34	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]    RuntimeException  [CONTEXT]              [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler());  [BUGGY]  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  new  NormalizeDeclarationHandler());	removeDuplicateDeclarations(externs,  root);  	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
35	[BUG]  [BUGGY]  removeDeprecatedDeclarations(externs,  root);  [CE]  reached  end  of  file  while  parsing  [FE]      RuntimeException  [CONTEXT]              [BUGGY]  removeDeprecatedDeclarations(externs,  root);  [BUGGY]  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	removeDeprecatedDeclarations(externs,  root);	removeDuplicateDeclarations(externs,  root);  	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
36	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException  [CONTEXT]              [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  root,  this);	removeDuplicateDeclarations(externs,  root);  	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
37	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  ProcessDeclarationHandler());  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException  [CONTEXT]              [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  ProcessDeclarationHandler());  [BUGGY]  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	NodeTraversal.traverse(compiler,  externs,  new  ProcessDeclarationHandler());	removeDuplicateDeclarations(externs,  root);  	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
38	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  ScopeTicklingCallback());  [CE]  reached  end  of  file  while  parsing  [FE]    RuntimeException  [CONTEXT]              [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  ScopeTicklingCallback());  [BUGGY]  removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	    NodeTraversal.traverse(compiler,  root,  new  ScopeTicklingCallback());		non-compiled	[CE]  reached  end  of  file  while  parsing	118	None	add
39	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  hasOkDuplicateDeclaration);  [CE]  reached  end  of  file  while  parsing  [FE]      RuntimeException  [CONTEXT]              [BUGGY]    NodeTraversal.traverse(compiler,  root,  hasOkDuplicateDeclaration);  [BUGGY]  removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	    NodeTraversal.traverse(compiler,  root,  hasOkDuplicateDeclaration);		non-compiled	[CE]  reached  end  of  file  while  parsing	118	None	add
40	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException  [CONTEXT]              [BUGGY]    NodeTraversal.traverse(compiler,  root);  [BUGGY]  removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	    NodeTraversal.traverse(compiler,  root);		non-compiled	[CE]  reached  end  of  file  while  parsing	118	None	add
41	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements());  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException  [CONTEXT]              [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements());  [BUGGY]  removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatements());		non-compiled	[CE]  reached  end  of  file  while  parsing	118	None	add
42	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  true);  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException  [CONTEXT]              [BUGGY]    NodeTraversal.traverse(compiler,  root,  true);  [BUGGY]  removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	    NodeTraversal.traverse(compiler,  root,  true);		non-compiled	[CE]  reached  end  of  file  while  parsing	118	None	add
43	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  false);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException  [CONTEXT]              [BUGGY]    NodeTraversal.traverse(compiler,  root,  false);  [BUGGY]  removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	    NodeTraversal.traverse(compiler,  root,  false);		non-compiled	[CE]  reached  end  of  file  while  parsing	118	None	add
44	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeConstantAnnotations());  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException  [CONTEXT]              [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeConstantAnnotations());  [BUGGY]  removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	    NodeTraversal.traverse(compiler,  root,  new  NormalizeConstantAnnotations());		non-compiled	[CE]  reached  end  of  file  while  parsing	118	None	add
45	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  RuntimeException( " "));  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException  [CONTEXT]              [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  RuntimeException( " "));  [BUGGY]  removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	    NodeTraversal.traverse(compiler,  root,  new  RuntimeException( " "));		non-compiled	[CE]  reached  end  of  file  while  parsing	118	None	add
46	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  t);  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException  [CONTEXT]              [BUGGY]    NodeTraversal.traverse(compiler,  root,  t);  [BUGGY]  removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	    NodeTraversal.traverse(compiler,  root,  t);		non-compiled	[CE]  reached  end  of  file  while  parsing	118	None	add
47	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement());  [CE]  reached  end  of  file  while  parsing  [FE]    RuntimeException  [CONTEXT]              [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement());  [BUGGY]  removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatement());		non-compiled	[CE]  reached  end  of  file  while  parsing	118	None	add
48	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationCallback());  [CE]  reached  end  of  file  while  parsing  [FE]      RuntimeException  [CONTEXT]              [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationCallback());  [BUGGY]  removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	    NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationCallback());		non-compiled	[CE]  reached  end  of  file  while  parsing	118	None	add
49	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration());  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException  [CONTEXT]              [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration());  [BUGGY]  removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	    NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration());		non-compiled	[CE]  reached  end  of  file  while  parsing	118	None	add
50	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler());  [CE]  reached  end  of  file  while  parsing  [FE]    RuntimeException  [CONTEXT]              [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler());  [BUGGY]  removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	    NodeTraversal.traverse(compiler,  root,  new  NormalizeStatementHandler());		non-compiled	[CE]  reached  end  of  file  while  parsing	118	None	add
51	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [CE]  reached  end  of  file  while  parsing  [FE]      RuntimeException  [CONTEXT]              [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [BUGGY]  removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());		non-compiled	[CE]  reached  end  of  file  while  parsing	118	None	add
52	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  Normalize());  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException  [CONTEXT]              [BUGGY]    NodeTraversal.traverse(compiler,  root,  new  Normalize());  [BUGGY]  removeDuplicateDeclarations(externs,  root);  new  PropagateConstantAnnotationsOverVars(compiler,  assertOnChange)  .process(externs,  root);  if  (!compiler.getLifeCycleStage().isNormalized())  {  compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);  }  }  [CLASS]  Normalize  PropagateConstantAnnotationsOverVars  VerifyConstants  NormalizeStatements  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Set  hasOkDuplicateDeclaration  NodeTraversal  t  DiagnosticType  CATCH_BLOCK_VAR_ERROR  Node  externs  root  MakeDeclaredNamesUnique  renamer  Map  constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.08451542547285165	142	142	5	replace	    NodeTraversal.traverse(compiler,  root,  new  Normalize());		non-compiled	[CE]  reached  end  of  file  while  parsing	118	None	add
