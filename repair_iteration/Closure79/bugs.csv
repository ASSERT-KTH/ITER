bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] Normalize(AbstractCompiler compiler, boolean assertOnChange) { [FE] RuntimeException [CONTEXT] [BUGGY] Normalize(AbstractCompiler compiler, boolean assertOnChange) { [BUGGY] this.compiler = compiler; this.assertOnChange = assertOnChange;   } [CLASS] Normalize PropagateConstantAnnotationsOverVars VerifyConstants NormalizeStatements DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)  AbstractCompiler compiler boolean assertOnChange [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations Set hasOkDuplicateDeclaration Map constantMap DiagnosticType CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	replace	
2	[BUG] [BUGGY] [FE] RuntimeException [CONTEXT] [BUGGY] [BUGGY] Normalize(AbstractCompiler compiler, boolean assertOnChange) { this.compiler = compiler; this.assertOnChange = assertOnChange;   } [CLASS] Normalize PropagateConstantAnnotationsOverVars VerifyConstants NormalizeStatements DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)  AbstractCompiler compiler boolean assertOnChange [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations Set hasOkDuplicateDeclaration Map constantMap DiagnosticType CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	77	77	1	add	
3	[BUG] [BUGGY] this.compiler = compiler; [FE] RuntimeException [CONTEXT] Normalize(AbstractCompiler compiler, boolean assertOnChange) { [BUGGY] this.compiler = compiler; [BUGGY] this.assertOnChange = assertOnChange;   } [CLASS] Normalize PropagateConstantAnnotationsOverVars VerifyConstants NormalizeStatements DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)  AbstractCompiler compiler boolean assertOnChange [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations Set hasOkDuplicateDeclaration Map constantMap DiagnosticType CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	78	78	1	replace	
4	[BUG] [BUGGY] [FE] RuntimeException [CONTEXT] Normalize(AbstractCompiler compiler, boolean assertOnChange) { [BUGGY] [BUGGY] this.compiler = compiler; this.assertOnChange = assertOnChange;   } [CLASS] Normalize PropagateConstantAnnotationsOverVars VerifyConstants NormalizeStatements DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)  AbstractCompiler compiler boolean assertOnChange [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations Set hasOkDuplicateDeclaration Map constantMap DiagnosticType CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	78	78	1	add	
5	[BUG] [BUGGY] this.assertOnChange = assertOnChange; [FE] RuntimeException [CONTEXT] Normalize(AbstractCompiler compiler, boolean assertOnChange) { this.compiler = compiler; [BUGGY] this.assertOnChange = assertOnChange; [BUGGY]    } [CLASS] Normalize PropagateConstantAnnotationsOverVars VerifyConstants NormalizeStatements DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)  AbstractCompiler compiler boolean assertOnChange [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations Set hasOkDuplicateDeclaration Map constantMap DiagnosticType CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	79	79	1	replace	
6	[BUG] [BUGGY] [FE] RuntimeException [CONTEXT] Normalize(AbstractCompiler compiler, boolean assertOnChange) { this.compiler = compiler; [BUGGY] [BUGGY] this.assertOnChange = assertOnChange;   } [CLASS] Normalize PropagateConstantAnnotationsOverVars VerifyConstants NormalizeStatements DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] <init> [RETURN_TYPE] AbstractCompiler,boolean)  AbstractCompiler compiler boolean assertOnChange [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations Set hasOkDuplicateDeclaration Map constantMap DiagnosticType CATCH_BLOCK_VAR_ERROR  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	79	79	1	add	
8	[BUG] [BUGGY] new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange)) .traverse(root); [FE] RuntimeException [CONTEXT] public void process(Node externs, Node root) { [BUGGY] new NodeTraversal(  compiler, new NormalizeStatements(compiler, assertOnChange))    .traverse(root); [BUGGY] compiler, new NormalizeStatements(compiler, assertOnChange)) .traverse(root); if (MAKE_LOCAL_NAMES_UNIQUE) { MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique(); NodeTraversal t = new NodeTraversal(compiler, renamer); t.traverseRoots(externs, root); }    [CLASS] Normalize PropagateConstantAnnotationsOverVars VerifyConstants NormalizeStatements DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations forbidChanges Set hasOkDuplicateDeclaration NodeTraversal t DiagnosticType CATCH_BLOCK_VAR_ERROR Node externs root MakeDeclaredNamesUnique renamer Map constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	replace	
9	[BUG] [BUGGY] [FE] RuntimeException [CONTEXT] public void process(Node externs, Node root) { [BUGGY] [BUGGY] new NodeTraversal(  compiler, new NormalizeStatements(compiler, assertOnChange))    .traverse(root); compiler, new NormalizeStatements(compiler, assertOnChange)) .traverse(root); if (MAKE_LOCAL_NAMES_UNIQUE) { MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique(); NodeTraversal t = new NodeTraversal(compiler, renamer); t.traverseRoots(externs, root); }    [CLASS] Normalize PropagateConstantAnnotationsOverVars VerifyConstants NormalizeStatements DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations forbidChanges Set hasOkDuplicateDeclaration NodeTraversal t DiagnosticType CATCH_BLOCK_VAR_ERROR Node externs root MakeDeclaredNamesUnique renamer Map constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	120	122	1	add	
10	[BUG] [BUGGY] MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique(); [FE] RuntimeException [CONTEXT] public void process(Node externs, Node root) { new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange)) .traverse(root); if (MAKE_LOCAL_NAMES_UNIQUE) { [BUGGY] MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique(); [BUGGY] NodeTraversal t = new NodeTraversal(compiler, renamer); t.traverseRoots(externs, root); }        [CLASS] Normalize PropagateConstantAnnotationsOverVars VerifyConstants NormalizeStatements DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations forbidChanges Set hasOkDuplicateDeclaration NodeTraversal t DiagnosticType CATCH_BLOCK_VAR_ERROR Node externs root MakeDeclaredNamesUnique renamer Map constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	124	124	1	replace	
11	[BUG] [BUGGY] [FE] RuntimeException [CONTEXT] public void process(Node externs, Node root) { new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange)) .traverse(root); if (MAKE_LOCAL_NAMES_UNIQUE) { [BUGGY] [BUGGY] MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique(); NodeTraversal t = new NodeTraversal(compiler, renamer); t.traverseRoots(externs, root); }        [CLASS] Normalize PropagateConstantAnnotationsOverVars VerifyConstants NormalizeStatements DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations forbidChanges Set hasOkDuplicateDeclaration NodeTraversal t DiagnosticType CATCH_BLOCK_VAR_ERROR Node externs root MakeDeclaredNamesUnique renamer Map constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	124	124	1	add	
12	[BUG] [BUGGY] NodeTraversal t = new NodeTraversal(compiler, renamer); [FE] RuntimeException [CONTEXT] public void process(Node externs, Node root) { new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange)) .traverse(root); if (MAKE_LOCAL_NAMES_UNIQUE) { MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique(); [BUGGY] NodeTraversal t = new NodeTraversal(compiler, renamer); [BUGGY] t.traverseRoots(externs, root); }         [CLASS] Normalize PropagateConstantAnnotationsOverVars VerifyConstants NormalizeStatements DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations forbidChanges Set hasOkDuplicateDeclaration NodeTraversal t DiagnosticType CATCH_BLOCK_VAR_ERROR Node externs root MakeDeclaredNamesUnique renamer Map constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	125	125	1	replace	
13	[BUG] [BUGGY] [FE] RuntimeException [CONTEXT] public void process(Node externs, Node root) { new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange)) .traverse(root); if (MAKE_LOCAL_NAMES_UNIQUE) { MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique(); [BUGGY] [BUGGY] NodeTraversal t = new NodeTraversal(compiler, renamer); t.traverseRoots(externs, root); }         [CLASS] Normalize PropagateConstantAnnotationsOverVars VerifyConstants NormalizeStatements DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations forbidChanges Set hasOkDuplicateDeclaration NodeTraversal t DiagnosticType CATCH_BLOCK_VAR_ERROR Node externs root MakeDeclaredNamesUnique renamer Map constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	125	125	1	add	
14	[BUG] [BUGGY] t.traverseRoots(externs, root); [FE] RuntimeException [CONTEXT] public void process(Node externs, Node root) { new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange)) .traverse(root); if (MAKE_LOCAL_NAMES_UNIQUE) { MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique(); NodeTraversal t = new NodeTraversal(compiler, renamer); [BUGGY] t.traverseRoots(externs, root); [BUGGY] }          [CLASS] Normalize PropagateConstantAnnotationsOverVars VerifyConstants NormalizeStatements DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations forbidChanges Set hasOkDuplicateDeclaration NodeTraversal t DiagnosticType CATCH_BLOCK_VAR_ERROR Node externs root MakeDeclaredNamesUnique renamer Map constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	126	126	1	replace	
15	[BUG] [BUGGY] [FE] RuntimeException [CONTEXT] public void process(Node externs, Node root) { new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange)) .traverse(root); if (MAKE_LOCAL_NAMES_UNIQUE) { MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique(); NodeTraversal t = new NodeTraversal(compiler, renamer); [BUGGY] [BUGGY] t.traverseRoots(externs, root); }          [CLASS] Normalize PropagateConstantAnnotationsOverVars VerifyConstants NormalizeStatements DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations forbidChanges Set hasOkDuplicateDeclaration NodeTraversal t DiagnosticType CATCH_BLOCK_VAR_ERROR Node externs root MakeDeclaredNamesUnique renamer Map constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	126	126	1	add	
16	[BUG] [BUGGY] removeDuplicateDeclarations(externs, root); [FE] RuntimeException [CONTEXT]           [BUGGY] removeDuplicateDeclarations(externs, root); [BUGGY] new PropagateConstantAnnotationsOverVars(compiler, assertOnChange) .process(externs, root); if (!compiler.getLifeCycleStage().isNormalized()) { compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED); } } [CLASS] Normalize PropagateConstantAnnotationsOverVars VerifyConstants NormalizeStatements DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations forbidChanges Set hasOkDuplicateDeclaration NodeTraversal t DiagnosticType CATCH_BLOCK_VAR_ERROR Node externs root MakeDeclaredNamesUnique renamer Map constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	142	142	1	replace	
17	[BUG] [BUGGY] [FE] RuntimeException [CONTEXT]           [BUGGY] [BUGGY] removeDuplicateDeclarations(externs, root); new PropagateConstantAnnotationsOverVars(compiler, assertOnChange) .process(externs, root); if (!compiler.getLifeCycleStage().isNormalized()) { compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED); } } [CLASS] Normalize PropagateConstantAnnotationsOverVars VerifyConstants NormalizeStatements DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations forbidChanges Set hasOkDuplicateDeclaration NodeTraversal t DiagnosticType CATCH_BLOCK_VAR_ERROR Node externs root MakeDeclaredNamesUnique renamer Map constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	142	142	1	add	
18	[BUG] [BUGGY] Callback tickler = new ScopeTicklingCallback(); [FE] RuntimeException [CONTEXT] private void removeDuplicateDeclarations(Node externs, Node root) { [BUGGY] Callback tickler = new ScopeTicklingCallback(); [BUGGY] ScopeCreator scopeCreator =new SyntacticScopeCreator( compiler, new DuplicateDeclarationHandler()); NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator); t.traverseRoots(externs, root); } [CLASS] Normalize PropagateConstantAnnotationsOverVars VerifyConstants NormalizeStatements DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] removeDuplicateDeclarations [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst isMarkedConstant isObjLitKey isProperty shouldBeConstant Set hasOkDuplicateDeclaration Callback tickler NodeTraversal t DiagnosticType CATCH_BLOCK_VAR_ERROR Node externs root ScopeCreator scopeCreator Map constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	629	629	1	replace	
19	[BUG] [BUGGY] [FE] RuntimeException [CONTEXT] private void removeDuplicateDeclarations(Node externs, Node root) { [BUGGY] [BUGGY] Callback tickler = new ScopeTicklingCallback(); ScopeCreator scopeCreator =new SyntacticScopeCreator( compiler, new DuplicateDeclarationHandler()); NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator); t.traverseRoots(externs, root); } [CLASS] Normalize PropagateConstantAnnotationsOverVars VerifyConstants NormalizeStatements DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] removeDuplicateDeclarations [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst isMarkedConstant isObjLitKey isProperty shouldBeConstant Set hasOkDuplicateDeclaration Callback tickler NodeTraversal t DiagnosticType CATCH_BLOCK_VAR_ERROR Node externs root ScopeCreator scopeCreator Map constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	629	629	1	add	
20	[BUG] [BUGGY] ScopeCreator scopeCreator =new SyntacticScopeCreator( compiler, new DuplicateDeclarationHandler()); [FE] RuntimeException [CONTEXT] private void removeDuplicateDeclarations(Node externs, Node root) { Callback tickler = new ScopeTicklingCallback(); [BUGGY] ScopeCreator scopeCreator =new SyntacticScopeCreator(  compiler, new DuplicateDeclarationHandler()); [BUGGY] compiler, new DuplicateDeclarationHandler()); NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator); t.traverseRoots(externs, root); } [CLASS] Normalize PropagateConstantAnnotationsOverVars VerifyConstants NormalizeStatements DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] removeDuplicateDeclarations [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst isMarkedConstant isObjLitKey isProperty shouldBeConstant Set hasOkDuplicateDeclaration Callback tickler NodeTraversal t DiagnosticType CATCH_BLOCK_VAR_ERROR Node externs root ScopeCreator scopeCreator Map constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	630	631	1	replace	
21	[BUG] [BUGGY] [FE] RuntimeException [CONTEXT] private void removeDuplicateDeclarations(Node externs, Node root) { Callback tickler = new ScopeTicklingCallback(); [BUGGY] [BUGGY] ScopeCreator scopeCreator =new SyntacticScopeCreator(  compiler, new DuplicateDeclarationHandler()); compiler, new DuplicateDeclarationHandler()); NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator); t.traverseRoots(externs, root); } [CLASS] Normalize PropagateConstantAnnotationsOverVars VerifyConstants NormalizeStatements DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] removeDuplicateDeclarations [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst isMarkedConstant isObjLitKey isProperty shouldBeConstant Set hasOkDuplicateDeclaration Callback tickler NodeTraversal t DiagnosticType CATCH_BLOCK_VAR_ERROR Node externs root ScopeCreator scopeCreator Map constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	630	631	1	add	
22	[BUG] [BUGGY] NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator); [FE] RuntimeException [CONTEXT] private void removeDuplicateDeclarations(Node externs, Node root) { Callback tickler = new ScopeTicklingCallback(); ScopeCreator scopeCreator =new SyntacticScopeCreator( compiler, new DuplicateDeclarationHandler()); [BUGGY] NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator); [BUGGY] t.traverseRoots(externs, root); } [CLASS] Normalize PropagateConstantAnnotationsOverVars VerifyConstants NormalizeStatements DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] removeDuplicateDeclarations [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst isMarkedConstant isObjLitKey isProperty shouldBeConstant Set hasOkDuplicateDeclaration Callback tickler NodeTraversal t DiagnosticType CATCH_BLOCK_VAR_ERROR Node externs root ScopeCreator scopeCreator Map constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	632	632	1	replace	
23	[BUG] [BUGGY] [FE] RuntimeException [CONTEXT] private void removeDuplicateDeclarations(Node externs, Node root) { Callback tickler = new ScopeTicklingCallback(); ScopeCreator scopeCreator =new SyntacticScopeCreator( compiler, new DuplicateDeclarationHandler()); [BUGGY] [BUGGY] NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator); t.traverseRoots(externs, root); } [CLASS] Normalize PropagateConstantAnnotationsOverVars VerifyConstants NormalizeStatements DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] removeDuplicateDeclarations [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst isMarkedConstant isObjLitKey isProperty shouldBeConstant Set hasOkDuplicateDeclaration Callback tickler NodeTraversal t DiagnosticType CATCH_BLOCK_VAR_ERROR Node externs root ScopeCreator scopeCreator Map constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	632	632	1	add	
24	[BUG] [BUGGY] t.traverseRoots(externs, root); [FE] RuntimeException [CONTEXT] private void removeDuplicateDeclarations(Node externs, Node root) { Callback tickler = new ScopeTicklingCallback(); ScopeCreator scopeCreator =new SyntacticScopeCreator( compiler, new DuplicateDeclarationHandler()); NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator); [BUGGY] t.traverseRoots(externs, root); [BUGGY] } [CLASS] Normalize PropagateConstantAnnotationsOverVars VerifyConstants NormalizeStatements DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] removeDuplicateDeclarations [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst isMarkedConstant isObjLitKey isProperty shouldBeConstant Set hasOkDuplicateDeclaration Callback tickler NodeTraversal t DiagnosticType CATCH_BLOCK_VAR_ERROR Node externs root ScopeCreator scopeCreator Map constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	633	633	1	replace	
25	[BUG] [BUGGY] [FE] RuntimeException [CONTEXT] private void removeDuplicateDeclarations(Node externs, Node root) { Callback tickler = new ScopeTicklingCallback(); ScopeCreator scopeCreator =new SyntacticScopeCreator( compiler, new DuplicateDeclarationHandler()); NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator); [BUGGY] [BUGGY] t.traverseRoots(externs, root); } [CLASS] Normalize PropagateConstantAnnotationsOverVars VerifyConstants NormalizeStatements DuplicateDeclarationHandler ScopeTicklingCallback [METHOD] removeDuplicateDeclarations [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler boolean CONVERT_WHILE_TO_FOR MAKE_LOCAL_NAMES_UNIQUE assertOnChange checkUserDeclarations expectedConst forbidChanges isConst isMarkedConstant isObjLitKey isProperty shouldBeConstant Set hasOkDuplicateDeclaration Callback tickler NodeTraversal t DiagnosticType CATCH_BLOCK_VAR_ERROR Node externs root ScopeCreator scopeCreator Map constantMap  	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.1889822365046136	633	633	1	add	
26	[BUG] [BUGGY] [FE] RuntimeException [CONTEXT] static final boolean MAKE_LOCAL_NAMES_UNIQUE = true; [CLASS] Normalize PropagateConstantAnnotationsOverVars VerifyConstants NormalizeStatements DuplicateDeclarationHandler ScopeTicklingCallback  [VARIABLES] 	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.18569533817705186	70	70	1	replace	
27	[BUG] [BUGGY] [FE] RuntimeException [CONTEXT] static final boolean MAKE_LOCAL_NAMES_UNIQUE = true; [CLASS] Normalize PropagateConstantAnnotationsOverVars VerifyConstants NormalizeStatements DuplicateDeclarationHandler ScopeTicklingCallback  [VARIABLES] 	projects/Closure79/src/com/google/javascript/jscomp/Normalize.java	0.18569533817705186	70	70	1	add	
28	[BUG] [BUGGY] static final DiagnosticType UNDEFINED_VAR_ERROR = DiagnosticType.error( "JSC_UNDEFINED_VARIABLE", "variable {0} is undefined"); [FE] RuntimeException [CONTEXT] [BUGGY] static final DiagnosticType UNDEFINED_VAR_ERROR = DiagnosticType.error(  "JSC_UNDEFINED_VARIABLE",   "variable {0} is undefined"); [BUGGY] "JSC_UNDEFINED_VARIABLE", "variable {0} is undefined"); [CLASS] VarCheck NameRefInExternsCheck  [VARIABLES] 	projects/Closure79/src/com/google/javascript/jscomp/VarCheck.java	0.11785113019775793	36	38	1	replace	
29	[BUG] [BUGGY] [FE] RuntimeException [CONTEXT] [BUGGY] [BUGGY] static final DiagnosticType UNDEFINED_VAR_ERROR = DiagnosticType.error(  "JSC_UNDEFINED_VARIABLE",   "variable {0} is undefined"); "JSC_UNDEFINED_VARIABLE", "variable {0} is undefined"); [CLASS] VarCheck NameRefInExternsCheck  [VARIABLES] 	projects/Closure79/src/com/google/javascript/jscomp/VarCheck.java	0.11785113019775793	36	38	1	add	
30	[BUG] [BUGGY] static final DiagnosticType VIOLATED_MODULE_DEP_ERROR = DiagnosticType.error( "JSC_VIOLATED_MODULE_DEPENDENCY", "module {0} cannot reference {2}, defined in " + [FE] RuntimeException [CONTEXT] [BUGGY] static final DiagnosticType VIOLATED_MODULE_DEP_ERROR = DiagnosticType.error(  "JSC_VIOLATED_MODULE_DEPENDENCY",   "module {0} cannot reference {2}, defined in " + [BUGGY] "JSC_VIOLATED_MODULE_DEPENDENCY", "module {0} cannot reference {2}, defined in " + "module {1}, since {1} loads after {0}"); [CLASS] VarCheck NameRefInExternsCheck  [VARIABLES] 	projects/Closure79/src/com/google/javascript/jscomp/VarCheck.java	0.11785113019775793	40	42	1	replace	
31	[BUG] [BUGGY] [FE] RuntimeException [CONTEXT] [BUGGY] [BUGGY] static final DiagnosticType VIOLATED_MODULE_DEP_ERROR = DiagnosticType.error(  "JSC_VIOLATED_MODULE_DEPENDENCY",   "module {0} cannot reference {2}, defined in " + "JSC_VIOLATED_MODULE_DEPENDENCY", "module {0} cannot reference {2}, defined in " + "module {1}, since {1} loads after {0}"); [CLASS] VarCheck NameRefInExternsCheck  [VARIABLES] 	projects/Closure79/src/com/google/javascript/jscomp/VarCheck.java	0.11785113019775793	40	42	1	add	
32	[BUG] [BUGGY] static final DiagnosticType MISSING_MODULE_DEP_ERROR = DiagnosticType.warning( "JSC_MISSING_MODULE_DEPENDENCY", "missing module dependency; module {0} should depend " + [FE] RuntimeException [CONTEXT] [BUGGY] static final DiagnosticType MISSING_MODULE_DEP_ERROR = DiagnosticType.warning(  "JSC_MISSING_MODULE_DEPENDENCY",   "missing module dependency; module {0} should depend " + [BUGGY] "JSC_MISSING_MODULE_DEPENDENCY", "missing module dependency; module {0} should depend " + "on module {1} because it references {2}"); [CLASS] VarCheck NameRefInExternsCheck  [VARIABLES] 	projects/Closure79/src/com/google/javascript/jscomp/VarCheck.java	0.11785113019775793	45	47	1	replace	
33	[BUG] [BUGGY] [FE] RuntimeException [CONTEXT] [BUGGY] [BUGGY] static final DiagnosticType MISSING_MODULE_DEP_ERROR = DiagnosticType.warning(  "JSC_MISSING_MODULE_DEPENDENCY",   "missing module dependency; module {0} should depend " + "JSC_MISSING_MODULE_DEPENDENCY", "missing module dependency; module {0} should depend " + "on module {1} because it references {2}"); [CLASS] VarCheck NameRefInExternsCheck  [VARIABLES] 	projects/Closure79/src/com/google/javascript/jscomp/VarCheck.java	0.11785113019775793	45	47	1	add	
34	[BUG] [BUGGY] static final DiagnosticType STRICT_MODULE_DEP_ERROR = DiagnosticType.disabled( "JSC_STRICT_MODULE_DEPENDENCY", "module {0} cannot reference {2}, defined in " + [FE] RuntimeException [CONTEXT] [BUGGY] static final DiagnosticType STRICT_MODULE_DEP_ERROR = DiagnosticType.disabled(  "JSC_STRICT_MODULE_DEPENDENCY",   "module {0} cannot reference {2}, defined in " + [BUGGY] "JSC_STRICT_MODULE_DEPENDENCY", "module {0} cannot reference {2}, defined in " + "module {1}"); [CLASS] VarCheck NameRefInExternsCheck  [VARIABLES] 	projects/Closure79/src/com/google/javascript/jscomp/VarCheck.java	0.11785113019775793	50	52	1	replace	
35	[BUG] [BUGGY] [FE] RuntimeException [CONTEXT] [BUGGY] [BUGGY] static final DiagnosticType STRICT_MODULE_DEP_ERROR = DiagnosticType.disabled(  "JSC_STRICT_MODULE_DEPENDENCY",   "module {0} cannot reference {2}, defined in " + "JSC_STRICT_MODULE_DEPENDENCY", "module {0} cannot reference {2}, defined in " + "module {1}"); [CLASS] VarCheck NameRefInExternsCheck  [VARIABLES] 	projects/Closure79/src/com/google/javascript/jscomp/VarCheck.java	0.11785113019775793	50	52	1	add	
36	[BUG] [BUGGY] static final DiagnosticType NAME_REFERENCE_IN_EXTERNS_ERROR = DiagnosticType.warning( "JSC_NAME_REFERENCE_IN_EXTERNS", [FE] RuntimeException [CONTEXT] [BUGGY] static final DiagnosticType NAME_REFERENCE_IN_EXTERNS_ERROR = DiagnosticType.warning(   "JSC_NAME_REFERENCE_IN_EXTERNS", [BUGGY] DiagnosticType.warning( "JSC_NAME_REFERENCE_IN_EXTERNS", "accessing name {0} in externs has no effect"); [CLASS] VarCheck NameRefInExternsCheck  [VARIABLES] 	projects/Closure79/src/com/google/javascript/jscomp/VarCheck.java	0.11785113019775793	55	57	1	replace	
37	[BUG] [BUGGY] [FE] RuntimeException [CONTEXT] [BUGGY] [BUGGY] static final DiagnosticType NAME_REFERENCE_IN_EXTERNS_ERROR = DiagnosticType.warning(   "JSC_NAME_REFERENCE_IN_EXTERNS", DiagnosticType.warning( "JSC_NAME_REFERENCE_IN_EXTERNS", "accessing name {0} in externs has no effect"); [CLASS] VarCheck NameRefInExternsCheck  [VARIABLES] 	projects/Closure79/src/com/google/javascript/jscomp/VarCheck.java	0.11785113019775793	55	57	1	add	
38	[BUG] [BUGGY] static final DiagnosticType UNDEFINED_EXTERN_VAR_ERROR = DiagnosticType.warning( "JSC_UNDEFINED_EXTERN_VAR_ERROR", [FE] RuntimeException [CONTEXT] [BUGGY] static final DiagnosticType UNDEFINED_EXTERN_VAR_ERROR = DiagnosticType.warning(   "JSC_UNDEFINED_EXTERN_VAR_ERROR", [BUGGY] DiagnosticType.warning( "JSC_UNDEFINED_EXTERN_VAR_ERROR", "name {0} is not undefined in the externs."); [CLASS] VarCheck NameRefInExternsCheck  [VARIABLES] 	projects/Closure79/src/com/google/javascript/jscomp/VarCheck.java	0.11785113019775793	60	62	1	replace	
39	[BUG] [BUGGY] [FE] RuntimeException [CONTEXT] [BUGGY] [BUGGY] static final DiagnosticType UNDEFINED_EXTERN_VAR_ERROR = DiagnosticType.warning(   "JSC_UNDEFINED_EXTERN_VAR_ERROR", DiagnosticType.warning( "JSC_UNDEFINED_EXTERN_VAR_ERROR", "name {0} is not undefined in the externs."); [CLASS] VarCheck NameRefInExternsCheck  [VARIABLES] 	projects/Closure79/src/com/google/javascript/jscomp/VarCheck.java	0.11785113019775793	60	62	1	add	
40	[BUG] [BUGGY] static final DiagnosticType INVALID_FUNCTION_DECL = DiagnosticType.error("JSC_INVALID_FUNCTION_DECL", "Syntax error: function declaration must have a name"); [FE] RuntimeException [CONTEXT] [BUGGY] static final DiagnosticType INVALID_FUNCTION_DECL = DiagnosticType.error("JSC_INVALID_FUNCTION_DECL",    "Syntax error: function declaration must have a name"); [BUGGY] DiagnosticType.error("JSC_INVALID_FUNCTION_DECL", "Syntax error: function declaration must have a name"); [CLASS] VarCheck NameRefInExternsCheck  [VARIABLES] 	projects/Closure79/src/com/google/javascript/jscomp/VarCheck.java	0.11785113019775793	65	67	1	replace	
41	[BUG] [BUGGY] [FE] RuntimeException [CONTEXT] [BUGGY] [BUGGY] static final DiagnosticType INVALID_FUNCTION_DECL = DiagnosticType.error("JSC_INVALID_FUNCTION_DECL",    "Syntax error: function declaration must have a name"); DiagnosticType.error("JSC_INVALID_FUNCTION_DECL", "Syntax error: function declaration must have a name"); [CLASS] VarCheck NameRefInExternsCheck  [VARIABLES] 	projects/Closure79/src/com/google/javascript/jscomp/VarCheck.java	0.11785113019775793	65	67	1	add	
