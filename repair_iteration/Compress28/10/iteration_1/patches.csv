bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  currEntry.read(buf,  offset,  numToRead);	  int    totalRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
2	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	  int    totalRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
3	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  int  totalRead  =  is.read(buf,  offset,  entrySize);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  is.read(buf,  offset,  entrySize);	  int    totalRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
4	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  int  totalRead  =  is.read(buf,  offset,  entrySize,  numToRead);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  is.read(buf,  offset,  entrySize,  numToRead);	  int    totalRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
5	[BUG]  [BUGGY]  int  totalRead  =  i.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  int  totalRead  =  i.read(buf,  offset,  numToRead);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  i.read(buf,  offset,  numToRead);	  int    totalRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
6	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  int  totalRead  =  is.read(buf,  offset,  entryOffset,  numToRead);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  is.read(buf,  offset,  entryOffset,  numToRead);	  int    totalRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
7	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  len);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead,  len);	  int    totalRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
8	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead  +  1);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead  +  1);	  totalRead    =    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
9	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead  +  1);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  rest.read(buf,  offset,  numToRead  +  1);	  totalRead    =    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
10	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead  +  1,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
11	[BUG]  [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead  +  1);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  i.read(buf,  offset,  numToRead  +  1);	  totalRead    =    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
12	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  is.read(buf,  offset,  entrySize  +  1);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  entrySize  +  1);	  totalRead    =    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
13	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead  +  2);  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead  +  2);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead  +  2);	  totalRead    =    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
14	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entryOffset);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  entryOffset);	  totalRead    =    is.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
15	[BUG]  [BUGGY]  if(entrySize  ==  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  if(entrySize  ==  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  ==  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    is.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
16	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entrySize);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  entrySize);	  totalRead    =    is.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
17	[BUG]  [BUGGY]  if(entrySize  ==  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  if(entrySize  ==  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  ==  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }	  totalRead    =    is.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
18	[BUG]  [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  hasHitEOF);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
19	[BUG]  [BUGGY]  numToRead  =  this.currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  numToRead  =  this.currEntry.read(buf,  offset,  numToRead);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  this.currEntry.read(buf,  offset,  numToRead);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
20	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
21	[BUG]  [BUGGY]  if(numToRead!=  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  if(numToRead!=  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
22	[BUG]  [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  entrySize,  numToRead);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  this.currEntry.read(buf,  offset,  entrySize,  numToRead);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
23	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
24	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);	  totalRead    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
25	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead);	  totalRead    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
26	[BUG]  [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  currEntry.read(buf,  offset,  numToRead);	  totalRead    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
27	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
28	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isHitEOF);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  isHitEOF);	  totalRead    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
29	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  len);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  len);	  totalRead    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
30	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  0);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  0);	  totalRead    =    is.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
31	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  is.read(buf,  offset,  0,  numToRead);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  0,  numToRead);	  totalRead    =    is.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
32	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entrySize,  0);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  is.read(buf,  offset,  entrySize,  0);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  entrySize,  0);	  totalRead    =    is.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
33	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  rest.read(buf,  offset,  0);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  rest.read(buf,  offset,  0);	  totalRead    =    is.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
34	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  0L);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  is.read(buf,  offset,  0L);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  0L);	  totalRead    =    is.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
35	[BUG]  [BUGGY]  if(numToRead  ==  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  if(numToRead  ==  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
36	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  if(numToRead  <  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
37	[BUG]  [BUGGY]  if(numToRead  ==  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  if(numToRead  ==  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
38	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
39	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  if(numToRead  <  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
40	[BUG]  [BUGGY]  ch  =  currEntry.getChronology();  [CE]  illegal  start  of  type  [FE]                                AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  ch  =  currEntry.getChronology();  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	ch  =  currEntry.getChronology();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
41	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
42	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  entrySize);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  entrySize);	  totalRead    =    is.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
43	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  entryOffset);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  entryOffset);	  totalRead    =    is.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
44	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0,  len);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0,  len);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  0,  len);	  totalRead    =    is.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
45	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  available);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  available);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  available);	  totalRead    =    is.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
46	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  len);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  rest.read(buf,  offset,  numToRead,  len);	  totalRead    =    is.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
47	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  rest.read(buf,  offset,  numToRead);	  totalRead    =    i.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
48	[BUG]  [BUGGY]  if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    i.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
49	[BUG]  [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  i.read(buf,  offset,  numToRead,  hasHitEOF);	  totalRead    =    i.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
50	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    i.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
51	[BUG]  [BUGGY]  if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  totalRead    =    i.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
52	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  totalRead    =    i.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
53	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	  numToRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
54	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  numToRead  =  is.read(buf,  offset,  entrySize);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  is.read(buf,  offset,  entrySize);	  numToRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
55	[BUG]  [BUGGY]  numToRead  =  rest.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  numToRead  =  rest.read(buf,  offset,  numToRead);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  rest.read(buf,  offset,  numToRead);	  numToRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
56	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  len);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  is.read(buf,  offset,  numToRead,  len);	  numToRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
57	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  length);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  length);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  is.read(buf,  offset,  numToRead,  length);	  numToRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
58	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  is.read(buf,  offset,  entrySize,  hasHitEOF);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  entrySize,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
59	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  is.read(buf,  offset,  entrySize,  numToRead);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  entrySize,  numToRead);	  totalRead    =    is.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
60	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  rest.read(buf,  offset,  entrySize);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  rest.read(buf,  offset,  entrySize);	  totalRead    =    is.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
61	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  is.read(buf,  offset,  entryOffset,  hasHitEOF);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  entryOffset,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
62	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entrySize,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  is.read(buf,  offset,  entrySize,  numToRead,  hasHitEOF);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  entrySize,  numToRead,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
63	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF,  entrySize);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF,  entrySize);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF,  entrySize);	  totalRead    =    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
64	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  rest.read(buf,  offset,  numToRead,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
65	[BUG]  [BUGGY]  totalRead  =  i.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  i.read(buf,  offset,  0);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  i.read(buf,  offset,  0);	  totalRead    =    is.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
66	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  length);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  length);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  length);	  totalRead    =    is.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
67	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  0);	  totalRead    =    is.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
68	[BUG]  [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead);	  totalRead    =    i.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
69	[BUG]  [BUGGY]  totalRead  =  curr.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  curr.read(buf,  offset,  numToRead);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  curr.read(buf,  offset,  numToRead);	  totalRead    =    i.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
70	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  numToRead,  offset);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  currEntry.read(buf,  numToRead,  offset);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  numToRead,  offset);	  totalRead    =    i.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
71	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  rest.read(buf,  offset,  entryOffset);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  rest.read(buf,  offset,  entryOffset);	  totalRead    =    is.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
72	[BUG]  [BUGGY]  totalRead  =  curr.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  curr.read(buf,  offset,  entryOffset);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  curr.read(buf,  offset,  entryOffset);	  totalRead    =    is.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
73	[BUG]  [BUGGY]  totalRead  =  i.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  i.read(buf,  offset,  entryOffset);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  i.read(buf,  offset,  entryOffset);	  totalRead    =    is.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
74	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  is.read(buf,  offset,  numToRead  +  1);	  numToRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
75	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead  +  1);	  int    totalRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
76	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  length);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  length);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead,  length);	  int    totalRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
77	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  is.read(buf,  offset,  0,  hasHitEOF);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  0,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
78	[BUG]  [BUGGY]  totalRead  =  i.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  i.read(buf,  offset,  entrySize);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  i.read(buf,  offset,  entrySize);	  totalRead    =    is.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
79	[BUG]  [BUGGY]  totalRead  =  curr.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  curr.read(buf,  offset,  entrySize);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  curr.read(buf,  offset,  entrySize);	  totalRead    =    is.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
80	[BUG]  [BUGGY]  if(entrySize  >  numToRead)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  if(entrySize  >  numToRead)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  numToRead)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
81	[BUG]  [BUGGY]  i.remove();  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  i.remove();  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	i.remove();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
82	[BUG]  [BUGGY]  if(entrySize  >  numToRead)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  if(entrySize  >  numToRead)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  numToRead)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
83	[BUG]  [BUGGY]  if(entrySize  >  numToRead)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  if(entrySize  >  numToRead)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  numToRead)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
84	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  if(numToRead  <  0)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
85	[BUG]  [BUGGY]  totalRead  =  curr.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  curr.read(buf,  offset,  numToRead  +  1);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  curr.read(buf,  offset,  numToRead  +  1);	  totalRead    =    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
86	[BUG]  [BUGGY]  totalRead  =  in.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  in.read(buf,  offset,  numToRead  +  1);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  in.read(buf,  offset,  numToRead  +  1);	  totalRead    =    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
87	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead  *  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead  *  1);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead  *  1);	  totalRead    =    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
88	[BUG]  [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead  +  1);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  this.currEntry.read(buf,  offset,  numToRead  +  1);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
89	[BUG]  [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  len);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  len);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
90	[BUG]  [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  isHitEOF);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  isHitEOF);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  isHitEOF);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
91	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isEnabled);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isEnabled);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  isEnabled);	  totalRead    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
92	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isRecord);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isRecord);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  isRecord);	  totalRead    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
93	[BUG]  [BUGGY]  totalRead  =  hasHitEOF.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  hasHitEOF.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  hasHitEOF.read(buf,  offset,  numToRead,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
94	[BUG]  [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  currentSize);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  currentSize);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  currentSize);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
95	[BUG]  [BUGGY]  totalRead  =  str.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  str.read(buf,  offset,  numToRead  +  1);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  str.read(buf,  offset,  numToRead  +  1);	  totalRead    =    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
96	[BUG]  [BUGGY]  totalRead  =  buffer.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  buffer.read(buf,  offset,  numToRead  +  1);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  buffer.read(buf,  offset,  numToRead  +  1);	  totalRead    =    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
97	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  len);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  len);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  len);	  totalRead    =    is.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
98	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  off,  numToRead);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  currEntry.read(buf,  off,  numToRead);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  off,  numToRead);	  totalRead    =    i.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
99	[BUG]  [BUGGY]  int  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  int  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);	  int    totalRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
100	[BUG]  [BUGGY]  int  totalRead  =  buffer.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  int  totalRead  =  buffer.read(buf,  offset,  numToRead);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  buffer.read(buf,  offset,  numToRead);	  int    totalRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
101	[BUG]  [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  entryOffset);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  currEntry.read(buf,  offset,  entryOffset);	  totalRead    =    is.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
102	[BUG]  [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
103	[BUG]  [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  offset;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  offset;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  0)  {  for(int  i  =  offset;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
104	[BUG]  [BUGGY]  i.remove();  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  i.remove();  hasHitEOF  =  true;  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	i.remove();  hasHitEOF  =  true;	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
105	[BUG]  [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numRecords.size();  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numRecords.size();  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numRecords.size();  ++i)  {  hasHitEOF  =  true;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
106	[BUG]  [BUGGY]  if(numToRead  >  entrySize)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  if(numToRead  >  entrySize)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >  entrySize)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
107	[BUG]  [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
108	[BUG]  [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead,  len);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  i.read(buf,  offset,  numToRead,  len);	  totalRead    =    is.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
109	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isRecorded);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isRecorded);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  isRecorded);	  totalRead    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
110	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isSkip);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());    [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isSkip);  [BUGGY]    count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  isSkip);	  totalRead    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
