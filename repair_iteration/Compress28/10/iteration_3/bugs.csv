bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  totalRead  =  hasHitEOF.read(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  hasHitEOF.read(buf,  offset,  numToRead,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  hasHitEOF.read(buf,  offset,  numToRead,  entrySize);	  totalRead    =    hasHitEOF.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
2	[BUG]  [BUGGY]  totalRead  =  hasHitEOF.read(buf,  offset,  entrySize,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  hasHitEOF.read(buf,  offset,  entrySize,  numToRead,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  hasHitEOF.read(buf,  offset,  entrySize,  numToRead,  hasHitEOF);	  totalRead    =    hasHitEOF.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
3	[BUG]  [BUGGY]  numToRead  =  hasHitEOF.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  hasHitEOF.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  hasHitEOF.read(buf,  offset,  numToRead,  hasHitEOF);	  totalRead    =    hasHitEOF.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
4	[BUG]  [BUGGY]  totalRead  =  hasHitEOF.read(buf,  offset,  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  hasHitEOF.read(buf,  offset,  entrySize,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  hasHitEOF.read(buf,  offset,  entrySize,  numToRead);	  totalRead    =    hasHitEOF.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
5	[BUG]  [BUGGY]  totalRead  =  hasHitEOF.read(buf,  numToRead,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  hasHitEOF.read(buf,  numToRead,  offset,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  hasHitEOF.read(buf,  numToRead,  offset,  hasHitEOF);	  totalRead    =    hasHitEOF.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
6	[BUG]  [BUGGY]  totalRead  =  hasHitEOF.read(buf,  offset,  numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  hasHitEOF.read(buf,  offset,  numToRead,  entryOffset);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  hasHitEOF.read(buf,  offset,  numToRead,  entryOffset);	  totalRead    =    hasHitEOF.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
7	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  i.read(buf,  offset,  numToRead  +  1);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  i.read(buf,  offset,  numToRead  +  1);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  totalRead  =  i.read(buf,  offset,  numToRead  +  1);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    i.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
8	[BUG]  [BUGGY]  if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead  +  1);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead  +  1);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead  +  1);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    i.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
9	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  i.read(buf,  offset,  numToRead  +  1);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  i.read(buf,  offset,  numToRead  +  1);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  totalRead  =  i.read(buf,  offset,  numToRead  +  1);  }  else  {  hasHitEOF  =  false;  }	  totalRead    =    i.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
10	[BUG]  [BUGGY]  if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead  +  1);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead  +  1);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead  +  1);  }  else  {  hasHitEOF  =  false;  }	  totalRead    =    i.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
11	[BUG]  [BUGGY]  totalRead  =  curr.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  curr.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  curr.read(buf,  offset,  numToRead,  hasHitEOF);	  totalRead    =    curr.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
12	[BUG]  [BUGGY]  totalRead  =  curr.read(buf,  offset,  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  curr.read(buf,  offset,  entrySize,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  curr.read(buf,  offset,  entrySize,  numToRead);	  totalRead    =    curr.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
13	[BUG]  [BUGGY]  numToRead  =  curr.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  curr.read(buf,  offset,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  curr.read(buf,  offset,  numToRead);	  totalRead    =    curr.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
14	[BUG]  [BUGGY]  totalRead  =  curr.read(buf,  offset,  numToRead,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  curr.read(buf,  offset,  numToRead,  isHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  curr.read(buf,  offset,  numToRead,  isHitEOF);	  totalRead    =    curr.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
15	[BUG]  [BUGGY]  totalRead  =  curr.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  curr.read(buf,  offset,  numToRead,  len);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  curr.read(buf,  offset,  numToRead,  len);	  totalRead    =    curr.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
16	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  entrySize);	  totalRead    =    is.read(buf,    offset,    entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
17	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  entryOffset,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  entryOffset,  numToRead);	  totalRead    =    is.read(buf,    offset,    entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
18	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entrySize,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  entrySize,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
19	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  entrySize,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  is.read(buf,  offset,  entrySize,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
20	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entrySize  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  entrySize  +  1);	  totalRead    =    is.read(buf,    offset,    entrySize    +    1);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
21	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  entryOffset  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  entryOffset  +  1);	  totalRead    =    is.read(buf,    offset,    entrySize    +    1);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
22	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entrySize  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  entrySize  +  1,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  entrySize  +  1,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    entrySize    +    1);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
23	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  entrySize  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  rest.read(buf,  offset,  entrySize  +  1);	  totalRead    =    is.read(buf,    offset,    entrySize    +    1);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
24	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entrySize  +  numToRead);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  entrySize  +  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  entrySize  +  numToRead);	  totalRead    =    is.read(buf,    offset,    entrySize    +    1);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
25	[BUG]  [BUGGY]  if(numToRead  ==  null)  {  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numRecords.size();  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  null)  {  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numRecords.size();  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  null)  {  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numRecords.size();  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numRecords.size();    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords.size();  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  for(int  i  =  0;  i  <  numRecords.size();  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	for(int  i  =  0;  i  <  numRecords.size();  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numRecords.size();    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
27	[BUG]  [BUGGY]  int  totalRead  =  numRecords.size();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  numRecords.size();  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  numRecords.size();	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numRecords.size();    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
28	[BUG]  [BUGGY]  if(numToRead  ==  null)  {  if(entrySize  >  1)  {  for(int  i  =  0;  i  <  numRecords.size();  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  null)  {  if(entrySize  >  1)  {  for(int  i  =  0;  i  <  numRecords.size();  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  null)  {  if(entrySize  >  1)  {  for(int  i  =  0;  i  <  numRecords.size();  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numRecords.size();    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
29	[BUG]  [BUGGY]  if(numToRead  ==  null)  {  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numRecords.size();  ++i)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  null)  {  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numRecords.size();  ++i)  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  null)  {  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numRecords.size();  ++i)  {  hasHitEOF  =  false;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numRecords.size();    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
30	[BUG]  [BUGGY]  if(numToRead  ==  null)  {  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numRecords.size();  ++i)  {  hasHitEOF  =  true  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  null)  {  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numRecords.size();  ++i)  {  hasHitEOF  =  true  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  null)  {  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numRecords.size();  ++i)  {  hasHitEOF  =  true	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numRecords.size();    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
31	[BUG]  [BUGGY]  int  entrySize  =  numRecords.size();  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  entrySize  =  numRecords.size();  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  entrySize  =  numRecords.size();	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numRecords.size();    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
32	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead,  entrySize);	  int    totalRead    =    is.read(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
33	[BUG]  [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  numToRead,  length);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  numToRead,  length);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  currEntry.read(buf,  offset,  numToRead,  length);	  int    totalRead    =    is.read(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
34	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  length,  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  length,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  is.read(buf,  offset,  length,  numToRead);	  int    totalRead    =    is.read(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
35	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  length,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  length,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead,  length,  hasHitEOF);	  int    totalRead    =    is.read(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
36	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  length  +  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  length  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead,  length  +  1);	  int    totalRead    =    is.read(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
37	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  0,  length);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  0,  length);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead,  0,  length);	  int    totalRead    =    is.read(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
38	[BUG]  [BUGGY]  numToRead  =  i.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  i.read(buf,  offset,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  i.read(buf,  offset,  numToRead);	  if(numToRead!=    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
39	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  -1)  {  if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  if(numToRead!=    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
40	[BUG]  [BUGGY]  if(numToRead!=  0)  {  int  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  0)  {  int  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  0)  {  int  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  if(numToRead!=    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
41	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  if(numToRead!=    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
42	[BUG]  [BUGGY]  if(numToRead!=  0)  {  if(numToRead  ==  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  0)  {  if(numToRead  ==  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  0)  {  if(numToRead  ==  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  if(numToRead!=    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
43	[BUG]  [BUGGY]  if(numToRead!=  0)  {  if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  0)  {  if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  0)  {  if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  if(numToRead!=    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
44	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(numToRead!=  -1)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(numToRead!=  -1)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  if(numToRead!=  -1)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  if(numToRead!=    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
45	[BUG]  [BUGGY]  int  totalRead  =  buffer.read(buf,  offset,  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  buffer.read(buf,  offset,  entrySize,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  buffer.read(buf,  offset,  entrySize,  numToRead);	  int    totalRead    =    buffer.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
46	[BUG]  [BUGGY]  int  totalRead  =  buffer.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  buffer.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  buffer.read(buf,  offset,  numToRead,  hasHitEOF);	  int    totalRead    =    buffer.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
47	[BUG]  [BUGGY]  int  totalRead  =  buffer.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  buffer.read(buf,  offset,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  buffer.read(buf,  offset,  entrySize);	  int    totalRead    =    buffer.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
48	[BUG]  [BUGGY]  int  totalRead  =  buffer.read(buf,  offset,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  buffer.read(buf,  offset,  entryOffset,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  buffer.read(buf,  offset,  entryOffset,  numToRead);	  int    totalRead    =    buffer.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
49	[BUG]  [BUGGY]  byte  totalRead  =  buffer.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  byte  totalRead  =  buffer.read(buf,  offset,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	byte  totalRead  =  buffer.read(buf,  offset,  numToRead);	  int    totalRead    =    buffer.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
50	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isHitEOF,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isHitEOF,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  isHitEOF,  hasHitEOF);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isHitEOF);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
51	[BUG]  [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isHitEOF);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
52	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isHitEOF);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isHitEOF);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isHitEOF);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isHitEOF);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
53	[BUG]  [BUGGY]  if(numToRead!=  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isHitEOF);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isHitEOF);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isHitEOF);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isHitEOF);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
54	[BUG]  [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  entrySize);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead,    currentSize);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
55	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  entryOffset);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  entryOffset);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead,    currentSize);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
56	[BUG]  [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  entryOffset);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  entryOffset);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead,    currentSize);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
57	[BUG]  [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  entryOffset,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  this.currEntry.read(buf,  offset,  entryOffset,  numToRead);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead,    currentSize);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
58	[BUG]  [BUGGY]  numToRead  =  this.currEntry.read(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  this.currEntry.read(buf,  offset,  numToRead,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  this.currEntry.read(buf,  offset,  numToRead,  entrySize);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead,    currentSize);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
59	[BUG]  [BUGGY]  if(entryOffset  ==  numToRead)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  ==  numToRead)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entryOffset  ==  numToRead)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    ==    entrySize)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
60	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  entryOffset  >=  0)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  entryOffset  >=  0)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  if(hasHitEOF  ||  entryOffset  >=  0)  {  return  -1;  }	  if(numToRead    ==    entrySize)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
61	[BUG]  [BUGGY]  if(entryOffset  ==  0)  {  if(hasHitEOF  ||  entryOffset  >=  0)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  ==  0)  {  if(hasHitEOF  ||  entryOffset  >=  0)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entryOffset  ==  0)  {  if(hasHitEOF  ||  entryOffset  >=  0)  {  return  -1;  }	  if(numToRead    ==    entrySize)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
62	[BUG]  [BUGGY]  if(entrySize  ==  numToRead)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  ==  numToRead)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  ==  numToRead)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    ==    entrySize)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
63	[BUG]  [BUGGY]  if(numToRead  ==  entryOffset)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  entryOffset)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  entryOffset)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    ==    entrySize)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
64	[BUG]  [BUGGY]  if(entryOffset  ==  numToRead)  {  if(hasHitEOF  ||  entryOffset!=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  ==  numToRead)  {  if(hasHitEOF  ||  entryOffset!=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entryOffset  ==  numToRead)  {  if(hasHitEOF  ||  entryOffset!=  entrySize)  {  return  -1;  }	  if(numToRead    ==    entrySize)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
65	[BUG]  [BUGGY]  if(entrySize  ==  numToRead)  {  if(hasHitEOF  ||  entryOffset!=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  ==  numToRead)  {  if(hasHitEOF  ||  entryOffset!=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  ==  numToRead)  {  if(hasHitEOF  ||  entryOffset!=  entrySize)  {  return  -1;  }	  if(numToRead    ==    entrySize)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
66	[BUG]  [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  this.currEntry.read(buf,  offset,  numToRead  +  1,  hasHitEOF);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
67	[BUG]  [BUGGY]  numToRead  =  this.currEntry.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  this.currEntry.read(buf,  offset,  numToRead  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  this.currEntry.read(buf,  offset,  numToRead  +  1);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
68	[BUG]  [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead  +  2);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead  +  2);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  this.currEntry.read(buf,  offset,  numToRead  +  2);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
69	[BUG]  [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead  *  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead  *  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  this.currEntry.read(buf,  offset,  numToRead  *  1);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
70	[BUG]  [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  entrySize  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  this.currEntry.read(buf,  offset,  entrySize  +  1);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
71	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  length);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  length);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  length);	  totalRead    =    is.read(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
72	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  length,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  length,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  length,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
73	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  length  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  length  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  length  +  1);	  totalRead    =    is.read(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
74	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  length);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  length);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  rest.read(buf,  offset,  numToRead,  length);	  totalRead    =    is.read(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
75	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0,  length);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0,  length);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  0,  length);	  totalRead    =    is.read(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
76	[BUG]  [BUGGY]  ch  =  currEntry.getChronology(numToRead);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  ch  =  currEntry.getChronology(numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	ch  =  currEntry.getChronology(numToRead);	  ch    =    currEntry.getChronology();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
77	[BUG]  [BUGGY]  ch  =  currEntry.getChronology(entrySize);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  ch  =  currEntry.getChronology(entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	ch  =  currEntry.getChronology(entrySize);	  ch    =    currEntry.getChronology();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
78	[BUG]  [BUGGY]  ch  =  currEntry.getCHronology();  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  ch  =  currEntry.getCHronology();  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	ch  =  currEntry.getCHronology();	  ch    =    currEntry.getChronology();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
79	[BUG]  [BUGGY]  ch  =  currEntry.getChronology().hashCode();  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  ch  =  currEntry.getChronology().hashCode();  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	ch  =  currEntry.getChronology().hashCode();	  ch    =    currEntry.getChronology();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
80	[BUG]  [BUGGY]  ch  =  currEntry.getCurrentChronology();  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  ch  =  currEntry.getCurrentChronology();  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	ch  =  currEntry.getCurrentChronology();	  ch    =    currEntry.getChronology();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
81	[BUG]  [BUGGY]  ch  =  currEntry.getChronology().blockSize;  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  ch  =  currEntry.getChronology().blockSize;  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	ch  =  currEntry.getChronology().blockSize;	  ch    =    currEntry.getChronology();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
82	[BUG]  [BUGGY]  totalRead  =  str.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  str.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  str.read(buf,  offset,  numToRead  +  1,  hasHitEOF);	  totalRead    =    str.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
83	[BUG]  [BUGGY]  totalRead  =  str.read(buf,  offset,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  str.read(buf,  offset,  entrySize  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  str.read(buf,  offset,  entrySize  +  1);	  totalRead    =    str.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
84	[BUG]  [BUGGY]  numToRead  =  str.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  str.read(buf,  offset,  numToRead  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  str.read(buf,  offset,  numToRead  +  1);	  totalRead    =    str.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
85	[BUG]  [BUGGY]  totalRead  =  str.read(buf,  offset,  numToRead  +  2);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  str.read(buf,  offset,  numToRead  +  2);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  str.read(buf,  offset,  numToRead  +  2);	  totalRead    =    str.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
86	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  entrySize,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  entrySize,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    entrySize,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
87	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entryOffset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  entryOffset,  numToRead,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  entryOffset,  numToRead,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    entrySize,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
88	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  entrySize,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  entrySize,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    entrySize,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
89	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    entrySize,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
90	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  numToRead,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  numToRead,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    entrySize,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
91	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF,  hasHitEOF);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
92	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  }  else  {  entryOffset  +=  numToRead;  }	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
93	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  }  else  {  throw  new  IllegalStateException( " ");  }	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
94	[BUG]  [BUGGY]  totalRead  =  curr.read(buf,  offset,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  curr.read(buf,  offset,  entrySize,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  curr.read(buf,  offset,  entrySize,  hasHitEOF);	  totalRead    =    curr.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
95	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  totalRead  =  curr.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  entrySize)  {  totalRead  =  curr.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  entrySize)  {  totalRead  =  curr.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    curr.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
96	[BUG]  [BUGGY]  if(entrySize!=  entrySize)  {  totalRead  =  curr.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize!=  entrySize)  {  totalRead  =  curr.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize!=  entrySize)  {  totalRead  =  curr.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    curr.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
97	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  totalRead  =  curr.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  entrySize)  {  totalRead  =  curr.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  entrySize)  {  totalRead  =  curr.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  false;  }	  totalRead    =    curr.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
98	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  -1)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    ==    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
99	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  if(!hasHitEOF  ||  entryOffset  >=  numToRead)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  ==  0)  {  if(!hasHitEOF  ||  entryOffset  >=  numToRead)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  ==  0)  {  if(!hasHitEOF  ||  entryOffset  >=  numToRead)  {  return  -1;  }	  if(numToRead    ==    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
100	[BUG]  [BUGGY]  if(entrySize!=  0)  {  if(!hasHitEOF  ||  entryOffset  >=  numToRead)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize!=  0)  {  if(!hasHitEOF  ||  entryOffset  >=  numToRead)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize!=  0)  {  if(!hasHitEOF  ||  entryOffset  >=  numToRead)  {  return  -1;  }	  if(numToRead    ==    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
101	[BUG]  [BUGGY]  if(entryOffset  ==  0)  {  if(!hasHitEOF  ||  entryOffset  >=  0)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  ==  0)  {  if(!hasHitEOF  ||  entryOffset  >=  0)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entryOffset  ==  0)  {  if(!hasHitEOF  ||  entryOffset  >=  0)  {  return  -1;  }	  if(numToRead    ==    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
102	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  entryOffset!=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  entryOffset!=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF  ||  entryOffset!=  entrySize)  {  return  -1;  }	  if(numToRead    ==    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
103	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead  *  2);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead  *  2);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead  *  2);	  totalRead    =    is.read(buf,    offset,    numToRead    *    1);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
104	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead  *  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead  *  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead  *  1);	  totalRead    =    is.read(buf,    offset,    numToRead    *    1);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
105	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead  *  4);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead  *  4);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead  *  4);	  totalRead    =    is.read(buf,    offset,    numToRead    *    1);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
106	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead  *  1);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead  *  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  rest.read(buf,  offset,  numToRead  *  1);	  totalRead    =    is.read(buf,    offset,    numToRead    *    1);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
107	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entrySize  *  1);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  entrySize  *  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  entrySize  *  1);	  totalRead    =    is.read(buf,    offset,    numToRead    *    1);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
108	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead  *  3);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead  *  3);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead  *  3);	  totalRead    =    is.read(buf,    offset,    numToRead    *    1);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
109	[BUG]  [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead  *  1);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead  *  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  i.read(buf,  offset,  numToRead  *  1);	  totalRead    =    is.read(buf,    offset,    numToRead    *    1);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
110	[BUG]  [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  currEntry.read(buf,  offset,  entrySize);	  int    totalRead    =    currEntry.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
111	[BUG]  [BUGGY]  int  totalRead  =  currEntry.read(buf,  numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  currEntry.read(buf,  numToRead,  entryOffset);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  currEntry.read(buf,  numToRead,  entryOffset);	  int    totalRead    =    currEntry.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
112	[BUG]  [BUGGY]  int  totalRead  =  currEntry.read(entry,  offset,  buf.length);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  currEntry.read(entry,  offset,  buf.length);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  currEntry.read(entry,  offset,  buf.length);	  int    totalRead    =    currEntry.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
113	[BUG]  [BUGGY]  byte  totalRead  =  currEntry.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  byte  totalRead  =  currEntry.read(buf,  offset,  entryOffset);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	byte  totalRead  =  currEntry.read(buf,  offset,  entryOffset);	  int    totalRead    =    currEntry.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
114	[BUG]  [BUGGY]  int  totalRead  =  currEntry.read(buff,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  currEntry.read(buff,  offset,  entryOffset);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  currEntry.read(buff,  offset,  entryOffset);	  int    totalRead    =    currEntry.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
115	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  0,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  0,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    0,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
116	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  0,  entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  0,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  0,  entrySize);	  totalRead    =    is.read(buf,    offset,    0,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
117	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  0,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    0,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
118	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  0,  entryOffset);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  0,  entryOffset);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  0,  entryOffset);	  totalRead    =    is.read(buf,    offset,    0,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
119	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  0,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  0,  numToRead);	  totalRead    =    is.read(buf,    offset,    0,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
120	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  0,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  rest.read(buf,  offset,  0,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    0,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
121	[BUG]  [BUGGY]  if(entrySize  ==  entrySize)  {  totalRead  =  curr.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  ==  entrySize)  {  totalRead  =  curr.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  ==  entrySize)  {  totalRead  =  curr.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    curr.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
122	[BUG]  [BUGGY]  if(entrySize!=  entrySize)  {  totalRead  =  curr.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize!=  entrySize)  {  totalRead  =  curr.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize!=  entrySize)  {  totalRead  =  curr.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    curr.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
123	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  entrySize  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  entrySize  +  1);	  totalRead    =    is.read(buf,    offset,    numToRead,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
124	[BUG]  [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  offset;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  offset;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  for(int  i  =  offset;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    offset;    i    <    numToRead;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
125	[BUG]  [BUGGY]  for(int  i  =  offset;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  for(int  i  =  offset;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	for(int  i  =  offset;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    offset;    i    <    numToRead;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
126	[BUG]  [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  offset;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  offset;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >  0)  {  for(int  i  =  offset;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    offset;    i    <    numToRead;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
127	[BUG]  [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  entryOffset;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  entryOffset;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  0)  {  for(int  i  =  entryOffset;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    offset;    i    <    numToRead;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
128	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  offset;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  offset;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  for(int  i  =  offset;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    offset;    i    <    numToRead;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
129	[BUG]  [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  entrySize;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  entrySize;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >  0)  {  for(int  i  =  entrySize;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    offset;    i    <    numToRead;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
130	[BUG]  [BUGGY]  totalRead  =  rec.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rec.read(buf,  offset,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  rec.read(buf,  offset,  numToRead);	  totalRead    =    rest.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
131	[BUG]  [BUGGY]  totalRead  =  repaint.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  repaint.read(buf,  offset,  entryOffset);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  repaint.read(buf,  offset,  entryOffset);	  totalRead    =    rest.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
132	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead  +  1,  hasHitEOF);	  totalRead    =    currEntry.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
133	[BUG]  [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  currEntry.read(buf,  offset,  numToRead  +  1);	  totalRead    =    currEntry.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
134	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead  +  2);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead  +  2);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead  +  2);	  totalRead    =    currEntry.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
135	[BUG]  [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  numToRead  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  currEntry.read(buf,  offset,  numToRead  +  1);	  totalRead    =    currEntry.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
136	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  0L,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  0L,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  0L,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    0L);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
137	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0L);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0L);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  0L);	  totalRead    =    is.read(buf,    offset,    0L);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
138	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  0L,  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  0L,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  0L,  entrySize);	  totalRead    =    is.read(buf,    offset,    0L);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
139	[BUG]  [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);	  TotalRead    totalRead    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
140	[BUG]  [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	TotalRead  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead);	  TotalRead    totalRead    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
141	[BUG]  [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead,  len);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead,  len);	  TotalRead    totalRead    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
142	[BUG]  [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isHitEOF);	  TotalRead    totalRead    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
143	[BUG]  [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead,  entrySize);	  TotalRead    totalRead    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
144	[BUG]  [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead,  length);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead,  length);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead,  length);	  TotalRead    totalRead    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
145	[BUG]  [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	TotalRead  totalRead  =  currEntry.read(buf,  offset,  entrySize);	  TotalRead    totalRead    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
146	[BUG]  [BUGGY]  if(numToRead  >  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
147	[BUG]  [BUGGY]  if(numToRead  ==  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
148	[BUG]  [BUGGY]  if(numToRead  >=  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >=  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >=  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
149	[BUG]  [BUGGY]  if(numToRead  <  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
150	[BUG]  [BUGGY]  if(numToRead!=  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
151	[BUG]  [BUGGY]  if(numToRead  <  numRecords)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  numRecords)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  numRecords)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
152	[BUG]  [BUGGY]  if(numToRead  <  =  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  =  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  =  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
153	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  entrySize,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  rest.read(buf,  offset,  entrySize,  hasHitEOF);	  totalRead    =    rest.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
154	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  entrySize,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  rest.read(buf,  offset,  entrySize,  numToRead);	  totalRead    =    rest.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
155	[BUG]  [BUGGY]  totalRead  =  repaint.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  repaint.read(buf,  offset,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  repaint.read(buf,  offset,  entrySize);	  totalRead    =    rest.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
156	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    currEntry.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
157	[BUG]  [BUGGY]  if(entrySize  ==  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  ==  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  ==  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    currEntry.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
158	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }	  totalRead    =    currEntry.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
159	[BUG]  [BUGGY]  if(entrySize  >=  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >=  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >=  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    currEntry.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
160	[BUG]  [BUGGY]  if(entrySize  ==  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  ==  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  ==  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }	  totalRead    =    currEntry.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
161	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    currEntry.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
162	[BUG]  [BUGGY]  if(entrySize!=  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize!=  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize!=  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    currEntry.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
163	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  false;  }	  totalRead    =    currEntry.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
164	[BUG]  [BUGGY]  if(entrySize!=  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize!=  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize!=  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  false;  }	  totalRead    =    currEntry.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
165	[BUG]  [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  numToRead,  len);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  currEntry.read(buf,  offset,  numToRead,  len);	  int    totalRead    =    is.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
166	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  entryOffset);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead,  entryOffset);	  int    totalRead    =    is.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
167	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  len,  numToRead);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  len,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  is.read(buf,  offset,  len,  numToRead);	  int    totalRead    =    is.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
168	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  0,  len);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  0,  len);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead,  0,  len);	  int    totalRead    =    is.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
169	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  -1)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
170	[BUG]  [BUGGY]  if(numToRead!=  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
171	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  &&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  &&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF  &&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
172	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  entryOffset!=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  entryOffset!=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF  ||  entryOffset!=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
173	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  if(!hasHitEOF  ||  entryOffset  >=  numToRead)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  ==  0)  {  if(!hasHitEOF  ||  entryOffset  >=  numToRead)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  ==  0)  {  if(!hasHitEOF  ||  entryOffset  >=  numToRead)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
174	[BUG]  [BUGGY]  numToRead  =  this.currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  this.currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  this.currEntry.read(buf,  offset,  numToRead,  hasHitEOF);	  numToRead    =    this.currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
175	[BUG]  [BUGGY]  numToRead  =  this.currEntry.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  this.currEntry.read(buf,  offset,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  this.currEntry.read(buf,  offset,  entrySize);	  numToRead    =    this.currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
176	[BUG]  [BUGGY]  numToRead  =  this.currEntry.read(buf,  offset,  numToRead,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  this.currEntry.read(buf,  offset,  numToRead,  isHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  this.currEntry.read(buf,  offset,  numToRead,  isHitEOF);	  numToRead    =    this.currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
177	[BUG]  [BUGGY]  numToRead  =  this.currEntry.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  this.currEntry.read(buf,  offset,  numToRead,  len);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  this.currEntry.read(buf,  offset,  numToRead,  len);	  numToRead    =    this.currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
178	[BUG]  [BUGGY]  numToRead  =  this.currEntry.read(buf,  offset,  numToRead,  true);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  this.currEntry.read(buf,  offset,  numToRead,  true);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  this.currEntry.read(buf,  offset,  numToRead,  true);	  numToRead    =    this.currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
179	[BUG]  [BUGGY]  if(numToRead  ==  null)  {  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  null)  {  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  null)  {  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
180	[BUG]  [BUGGY]  if(numToRead!=  null)  {  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  null)  {  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  null)  {  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
181	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
182	[BUG]  [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  for(int  i  =  0;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
183	[BUG]  [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numRecords.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numRecords.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numRecords.length;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
184	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  for(int  i  =  0;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	for(int  i  =  0;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
185	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  rest.read(buf,  offset,  numToRead  +  1,  hasHitEOF);	  totalRead    =    rest.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
186	[BUG]  [BUGGY]  totalRead  =  repaint.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  repaint.read(buf,  offset,  numToRead  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  repaint.read(buf,  offset,  numToRead  +  1);	  totalRead    =    rest.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
187	[BUG]  [BUGGY]  totalRead  =  rec.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rec.read(buf,  offset,  numToRead  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  rec.read(buf,  offset,  numToRead  +  1);	  totalRead    =    rest.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
188	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead  +  2);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead  +  2);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  rest.read(buf,  offset,  numToRead  +  2);	  totalRead    =    rest.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
189	[BUG]  [BUGGY]  int  totalRead  =  i.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  i.read(buf,  offset,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  i.read(buf,  offset,  entrySize);	  int    totalRead    =    is.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
190	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  entryOffset,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  is.read(buf,  offset,  entryOffset,  hasHitEOF);	  int    totalRead    =    is.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
191	[BUG]  [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  entrySize,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  entrySize,  numToRead,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  this.currEntry.read(buf,  offset,  entrySize,  numToRead,  hasHitEOF);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
192	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  }  else  {  entryOffset  +=  numToRead;  }	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
193	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  }  else  {  throw  new  IllegalStateException( " ");  }	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
194	[BUG]  [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  isHitEOF,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  isHitEOF,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  isHitEOF,  hasHitEOF);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead,    isHitEOF);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
195	[BUG]  [BUGGY]  if(numToRead  ==  entrySize)  {  if(entryOffset  ==  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  entrySize)  {  if(entryOffset  ==  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  entrySize)  {  if(entryOffset  ==  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }	  if(entrySize    ==    entrySize)    {    totalRead    =    is.read(buf,    offset,    entryOffset);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
196	[BUG]  [BUGGY]  if(entryOffset  ==  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  ==  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entryOffset  ==  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }	  if(entrySize    ==    entrySize)    {    totalRead    =    is.read(buf,    offset,    entryOffset);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
197	[BUG]  [BUGGY]  if(numToRead!=  entrySize)  {  if(entryOffset  ==  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  entrySize)  {  if(entryOffset  ==  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  entrySize)  {  if(entryOffset  ==  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }	  if(entrySize    ==    entrySize)    {    totalRead    =    is.read(buf,    offset,    entryOffset);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
198	[BUG]  [BUGGY]  if(entryOffset  ==  entrySize)  {  if(numToRead  ==  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  ==  entrySize)  {  if(numToRead  ==  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entryOffset  ==  entrySize)  {  if(numToRead  ==  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }	  if(entrySize    ==    entrySize)    {    totalRead    =    is.read(buf,    offset,    entryOffset);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
199	[BUG]  [BUGGY]  if(entryOffset  ==  entrySize)  {  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  ==  entrySize)  {  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entryOffset  ==  entrySize)  {  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }	  if(entrySize    ==    entrySize)    {    totalRead    =    is.read(buf,    offset,    entryOffset);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
200	[BUG]  [BUGGY]  if(numToRead  ==  entrySize)  {  if(entryOffset  >=  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  entrySize)  {  if(entryOffset  >=  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  entrySize)  {  if(entryOffset  >=  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }	  if(entrySize    ==    entrySize)    {    totalRead    =    is.read(buf,    offset,    entryOffset);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
201	[BUG]  [BUGGY]  if(numToRead  ==  entrySize)  {  if(entryOffset!=  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  entrySize)  {  if(entryOffset!=  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  entrySize)  {  if(entryOffset!=  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }	  if(entrySize    ==    entrySize)    {    totalRead    =    is.read(buf,    offset,    entryOffset);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
202	[BUG]  [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    i.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
203	[BUG]  [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  false;  }	  totalRead    =    i.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
204	[BUG]  [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entrySize);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entrySize);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entrySize);  }  else  {  throw  new  IllegalStateException( " ");  }	  totalRead    =    i.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
205	[BUG]  [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entrySize);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entrySize);  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entrySize);  }	  totalRead    =    i.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
206	[BUG]  [BUGGY]  if(numToRead  >  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
207	[BUG]  [BUGGY]  if(numToRead  ==  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
208	[BUG]  [BUGGY]  if(numToRead  >=  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >=  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >=  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
209	[BUG]  [BUGGY]  if(numToRead!=  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
210	[BUG]  [BUGGY]  if(numToRead  <  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
211	[BUG]  [BUGGY]  if(numToRead  <  numRecords)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  numRecords)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  numRecords)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
212	[BUG]  [BUGGY]  if(numToRead  >  entrySize)  {  if(hasHitEOF  ||  entryOffset!=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >  entrySize)  {  if(hasHitEOF  ||  entryOffset!=  entrySize)  {  return  0;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >  entrySize)  {  if(hasHitEOF  ||  entryOffset!=  entrySize)  {  return  0;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
213	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  -1)  {  if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead!=    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
214	[BUG]  [BUGGY]  if(numToRead!=  -1)  {  if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  -1)  {  if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  -1)  {  if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead!=    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
215	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead!=    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
216	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(numToRead!=  -1)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(numToRead!=  -1)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  if(numToRead!=  -1)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead!=    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
217	[BUG]  [BUGGY]  if(numToRead!=  0)  {  if(numToRead  ==  -1)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  0)  {  if(numToRead  ==  -1)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  0)  {  if(numToRead  ==  -1)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead!=    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
218	[BUG]  [BUGGY]  if(numToRead!=  0)  {  if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  0)  {  if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  0)  {  if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead!=    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
219	[BUG]  [BUGGY]  if(i.hasNext())  {  i.remove();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  i.remove();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(i.hasNext())  {  i.remove();  }  else  {  throw  new  IllegalStateException( " ");  }	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
220	[BUG]  [BUGGY]  if(i.hasNext())  {  i.remove();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  i.remove();  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(i.hasNext())  {  i.remove();  }	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
221	[BUG]  [BUGGY]  if(i.hasNext())  {  i.remove();  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  i.remove();  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(i.hasNext())  {  i.remove();  }  else  {  hasHitEOF  =  true;  }	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
222	[BUG]  [BUGGY]  if(i.hasNext())  {  i.remove();  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  i.remove();  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(i.hasNext())  {  i.remove();  }  else  {  hasHitEOF  =  false;  }	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
223	[BUG]  [BUGGY]  if(i.hasNext())  {  i.remove();  }  else  {  currEntry.setAccessible(true);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  i.remove();  }  else  {  currEntry.setAccessible(true);  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(i.hasNext())  {  i.remove();  }  else  {  currEntry.setAccessible(true);  }	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
224	[BUG]  [BUGGY]  if(i.hasNext())  {  i.remove();  }  else  {  currEntry.setHitEOF(numToRead);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  i.remove();  }  else  {  currEntry.setHitEOF(numToRead);  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(i.hasNext())  {  i.remove();  }  else  {  currEntry.setHitEOF(numToRead);  }	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
225	[BUG]  [BUGGY]  if(numToRead  ==  entrySize)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  entrySize)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  entrySize)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    >    entrySize)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
226	[BUG]  [BUGGY]  if(entrySize  >  numToRead)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  numToRead)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  numToRead)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    >    entrySize)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
227	[BUG]  [BUGGY]  if(numToRead  >=  entrySize)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >=  entrySize)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >=  entrySize)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    >    entrySize)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
228	[BUG]  [BUGGY]  if(numToRead!=  entrySize)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  entrySize)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  entrySize)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    >    entrySize)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
229	[BUG]  [BUGGY]  if(numToRead  <  entrySize)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  entrySize)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  entrySize)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    >    entrySize)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
230	[BUG]  [BUGGY]  if(entryOffset  >  numToRead)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  >  numToRead)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entryOffset  >  numToRead)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    >    entrySize)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
231	[BUG]  [BUGGY]  if(numToRead  ==  entrySize)  {  if(!hasHitEOF  ||  entryOffset!=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  entrySize)  {  if(!hasHitEOF  ||  entryOffset!=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  entrySize)  {  if(!hasHitEOF  ||  entryOffset!=  entrySize)  {  return  -1;  }	  if(numToRead    >    entrySize)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
232	[BUG]  [BUGGY]  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    currEntry.read(buf,    numToRead,    offset);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
233	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  totalRead    =    currEntry.read(buf,    numToRead,    offset);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
234	[BUG]  [BUGGY]  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  totalRead    =    currEntry.read(buf,    numToRead,    offset);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
235	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  throw  new  IllegalStateException( " ");  }	  totalRead    =    currEntry.read(buf,    numToRead,    offset);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
236	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  -1)  {  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
237	[BUG]  [BUGGY]  if(numToRead!=  -1)  {  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  -1)  {  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  -1)  {  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
238	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(numToRead  ==  -1)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(numToRead  ==  -1)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  if(numToRead  ==  -1)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
239	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(numToRead  ==  0)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  if(numToRead  ==  0)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  -1)  {  if(numToRead  ==  0)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
240	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
241	[BUG]  [BUGGY]  if(numToRead!=  0)  {  if(numToRead  ==  -1)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  0)  {  if(numToRead  ==  -1)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  0)  {  if(numToRead  ==  -1)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
242	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF,  entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF,  entrySize);	  totalRead    =    is.read(buf,    offset,    numToRead,    hasHitEOF,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
243	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  entryOffset,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  entryOffset,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    numToRead,    hasHitEOF,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
244	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entryOffset,  hasHitEOF,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  entryOffset,  hasHitEOF,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  entryOffset,  hasHitEOF,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    numToRead,    hasHitEOF,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
245	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF,  entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF,  entryOffset);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF,  entryOffset);	  totalRead    =    is.read(buf,    offset,    numToRead,    hasHitEOF,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
246	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  0);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
247	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  numRecords);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  numRecords);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  numRecords);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
248	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  1);	  totalRead    =    is.read(buf,    offset,    numToRead,    0);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
249	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0,  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  0,  entrySize);	  totalRead    =    is.read(buf,    offset,    numToRead,    0);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
250	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  2);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  2);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  2);	  totalRead    =    is.read(buf,    offset,    numToRead,    0);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
251	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0,  numRecords);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0,  numRecords);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  0,  numRecords);	  totalRead    =    is.read(buf,    offset,    numToRead,    0);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
252	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  false);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  false);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  false);	  totalRead    =    is.read(buf,    offset,    numToRead,    0);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
253	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  entrySize,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  entrySize,  numToRead,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  is.read(buf,  offset,  entrySize,  numToRead,  hasHitEOF);	  int    totalRead    =    is.read(buf,    offset,    entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
254	[BUG]  [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead);	  int    totalRead    =    is.read(buf,    offset,    entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
255	[BUG]  [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  numToRead,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  currEntry.read(buf,  offset,  numToRead,  entrySize);	  int    totalRead    =    is.read(buf,    offset,    entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
256	[BUG]  [BUGGY]  int  totalRead  =  i.read(buf,  offset,  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  i.read(buf,  offset,  entrySize,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  i.read(buf,  offset,  entrySize,  numToRead);	  int    totalRead    =    is.read(buf,    offset,    entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
257	[BUG]  [BUGGY]  if(numToRead  ==  len)  {  totalRead  =  currEntry.read(buf,  offset,  len);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  len)  {  totalRead  =  currEntry.read(buf,  offset,  len);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  len)  {  totalRead  =  currEntry.read(buf,  offset,  len);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    currEntry.read(buf,    offset,    len);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
258	[BUG]  [BUGGY]  if(numToRead  ==  len)  {  totalRead  =  currEntry.read(buf,  offset,  len);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  len)  {  totalRead  =  currEntry.read(buf,  offset,  len);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  len)  {  totalRead  =  currEntry.read(buf,  offset,  len);  }  else  {  throw  new  IllegalStateException( " ");  }	  totalRead    =    currEntry.read(buf,    offset,    len);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
259	[BUG]  [BUGGY]  if(numToRead  ==  len)  {  totalRead  =  currEntry.read(buf,  offset,  len);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  len)  {  totalRead  =  currEntry.read(buf,  offset,  len);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  len)  {  totalRead  =  currEntry.read(buf,  offset,  len);  }  else  {  hasHitEOF  =  false;  }	  totalRead    =    currEntry.read(buf,    offset,    len);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
260	[BUG]  [BUGGY]  if(numToRead  ==  len)  {  totalRead  =  currEntry.read(buf,  offset,  len);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  len)  {  totalRead  =  currEntry.read(buf,  offset,  len);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  len)  {  totalRead  =  currEntry.read(buf,  offset,  len);  }  else  {  entryOffset  +=  numToRead;  }	  totalRead    =    currEntry.read(buf,    offset,    len);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
261	[BUG]  [BUGGY]  if(numToRead  ==  len)  {  totalRead  =  currEntry.read(buf,  offset,  len);  }  else  {  entrySize  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  len)  {  totalRead  =  currEntry.read(buf,  offset,  len);  }  else  {  entrySize  +=  numToRead;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  len)  {  totalRead  =  currEntry.read(buf,  offset,  len);  }  else  {  entrySize  +=  numToRead;  }	  totalRead    =    currEntry.read(buf,    offset,    len);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
262	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  entryOffset  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  entryOffset  +  1);	  totalRead    =    is.read(buf,    offset,    numToRead,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
263	[BUG]  [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead,  len);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  currEntry.read(buf,  offset,  numToRead,  len);	  numToRead    =    is.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
264	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  is.read(buf,  offset,  numToRead,  entrySize);	  numToRead    =    is.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
265	[BUG]  [BUGGY]  numToRead  =  rest.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  rest.read(buf,  offset,  numToRead,  len);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  rest.read(buf,  offset,  numToRead,  len);	  numToRead    =    is.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
266	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  is.read(buf,  offset,  numToRead,  1);	  numToRead    =    is.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
267	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entrySize,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entrySize,  0);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  entrySize,  0);	  totalRead    =    is.read(buf,    offset,    entrySize,    0);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
268	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entryOffset,  0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  entryOffset,  0);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  entryOffset,  0);	  totalRead    =    is.read(buf,    offset,    entrySize,    0);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
269	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entrySize,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  entrySize,  0,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  entrySize,  0,  numToRead);	  totalRead    =    is.read(buf,    offset,    entrySize,    0);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
270	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isRecord,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isRecord,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  isRecord,  hasHitEOF);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isRecord);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
271	[BUG]  [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead,  isRecord);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead,  isRecord);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  currEntry.read(buf,  offset,  numToRead,  isRecord);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isRecord);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
272	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    <    0)    {    if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
273	[BUG]  [BUGGY]  if(numToRead!=  0)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  0)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  0)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    <    0)    {    if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
274	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  -1)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    <    0)    {    if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
275	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >=  0)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >=  0)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    <    0)    {    if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
276	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  if(hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    <    0)    {    if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
277	[BUG]  [BUGGY]  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    <    0)    {    if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
278	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  rest.read(buf,  offset,  numToRead,  entrySize);	  totalRead    =    rest.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
279	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  entrySize,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  entrySize,  numToRead,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  rest.read(buf,  offset,  entrySize,  numToRead,  hasHitEOF);	  totalRead    =    rest.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
280	[BUG]  [BUGGY]  totalRead  =  rec.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rec.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  rec.read(buf,  offset,  numToRead,  hasHitEOF);	  totalRead    =    rest.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
281	[BUG]  [BUGGY]  totalRead  =  repaint.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  repaint.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  repaint.read(buf,  offset,  numToRead,  hasHitEOF);	  totalRead    =    rest.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
282	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  hasHitEOF,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  hasHitEOF,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  rest.read(buf,  offset,  numToRead,  hasHitEOF,  hasHitEOF);	  totalRead    =    rest.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
283	[BUG]  [BUGGY]  int  totalRead  =  i.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  i.read(buf,  offset,  numToRead  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  i.read(buf,  offset,  numToRead  +  1);	  int    totalRead    =    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
284	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead  +  1,  hasHitEOF);	  int    totalRead    =    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
285	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  entrySize  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  is.read(buf,  offset,  entrySize  +  1);	  int    totalRead    =    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
286	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead  +  2);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead  +  2);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead  +  2);	  int    totalRead    =    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
287	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead  *  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead  *  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead  *  1);	  int    totalRead    =    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
288	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  len);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  len);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  len);	  totalRead    =    is.read(buf,    offset,    numToRead,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
289	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0,  entryOffset);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0,  entryOffset);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  0,  entryOffset);	  totalRead    =    is.read(buf,    offset,    numToRead,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
290	[BUG]  [BUGGY]  if(entrySize  <  0)  {  if(!hasHitEOF  ||  entryOffset  >=  numToRead)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  <  0)  {  if(!hasHitEOF  ||  entryOffset  >=  numToRead)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  <  0)  {  if(!hasHitEOF  ||  entryOffset  >=  numToRead)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
291	[BUG]  [BUGGY]  if(numToRead!=  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
292	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >=  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >=  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
293	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  if(!hasHitEOF  ||  entryOffset  >=  0)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  <  0)  {  if(!hasHitEOF  ||  entryOffset  >=  0)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entryOffset  <  0)  {  if(!hasHitEOF  ||  entryOffset  >=  0)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
294	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(numToRead!=  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  if(numToRead!=  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  -1)  {  if(numToRead!=  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead!=    0)    {    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
295	[BUG]  [BUGGY]  if(numToRead!=  -1)  {  if(numToRead  >=  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  -1)  {  if(numToRead  >=  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  -1)  {  if(numToRead  >=  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead!=    0)    {    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
296	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(numToRead  >=  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  if(numToRead  >=  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  -1)  {  if(numToRead  >=  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead!=    0)    {    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
297	[BUG]  [BUGGY]  if(numToRead!=  0)  {  if(numToRead  ==  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  0)  {  if(numToRead  ==  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  0)  {  if(numToRead  ==  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead!=    0)    {    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
298	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(numToRead!=  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(numToRead!=  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  if(numToRead!=  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead!=    0)    {    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
299	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(numToRead  ==  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  if(numToRead  ==  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  -1)  {  if(numToRead  ==  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
300	[BUG]  [BUGGY]  if(numToRead!=  -1)  {  if(numToRead  ==  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  -1)  {  if(numToRead  ==  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  -1)  {  if(numToRead  ==  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
301	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(numToRead  ==  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(numToRead  ==  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  if(numToRead  ==  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
302	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(numToRead  ==  -1)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(numToRead  ==  -1)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  if(numToRead  ==  -1)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
303	[BUG]  [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead,  length);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead,  length);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  currEntry.read(buf,  offset,  numToRead,  length);	  numToRead    =    is.read(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
304	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  length,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  length,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  is.read(buf,  offset,  numToRead,  length,  hasHitEOF);	  numToRead    =    is.read(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
305	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  length,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  length,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  is.read(buf,  offset,  length,  numToRead);	  numToRead    =    is.read(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
306	[BUG]  [BUGGY]  numToRead  =  rest.read(buf,  offset,  numToRead,  length);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  rest.read(buf,  offset,  numToRead,  length);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  rest.read(buf,  offset,  numToRead,  length);	  numToRead    =    is.read(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
307	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  length  +  1);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  length  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  is.read(buf,  offset,  numToRead,  length  +  1);	  numToRead    =    is.read(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
308	[BUG]  [BUGGY]  totalRead  =  buffer.read(buf,  offset,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  buffer.read(buf,  offset,  entrySize  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  buffer.read(buf,  offset,  entrySize  +  1);	  totalRead    =    buffer.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
309	[BUG]  [BUGGY]  totalRead  =  buffer.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  buffer.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  buffer.read(buf,  offset,  numToRead  +  1,  hasHitEOF);	  totalRead    =    buffer.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
310	[BUG]  [BUGGY]  numToRead  =  buffer.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  buffer.read(buf,  offset,  numToRead  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  buffer.read(buf,  offset,  numToRead  +  1);	  totalRead    =    buffer.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
311	[BUG]  [BUGGY]  totalRead  =  cache.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  cache.read(buf,  offset,  numToRead  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  cache.read(buf,  offset,  numToRead  +  1);	  totalRead    =    buffer.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
312	[BUG]  [BUGGY]  totalRead  =  buffer.read(buf,  offset,  numToRead  +  2);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  buffer.read(buf,  offset,  numToRead  +  2);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  buffer.read(buf,  offset,  numToRead  +  2);	  totalRead    =    buffer.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
313	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isEnabled,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isEnabled,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  isEnabled,  hasHitEOF);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isEnabled);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
314	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isEnabled);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isEnabled);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isEnabled);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isEnabled);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
315	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isEnabled);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isEnabled);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isEnabled);  }  else  {  hasHitEOF  =  false;  }	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isEnabled);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
316	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isEnabled);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isEnabled);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isEnabled);  }  else  {  throw  new  IllegalStateException( " ");  }	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isEnabled);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
317	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead,  isEnabled);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead,  isEnabled);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead,  isEnabled);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isEnabled);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
318	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(numToRead  ==  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  if(numToRead  ==  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  -1)  {  if(numToRead  ==  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  if(numToRead    ==    0)    {    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
319	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  if(numToRead    ==    0)    {    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
320	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(numToRead  ==  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(numToRead  ==  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  if(numToRead  ==  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  if(numToRead    ==    0)    {    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
321	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(numToRead  ==  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(numToRead  ==  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  if(numToRead  ==  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  if(numToRead    ==    0)    {    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
322	[BUG]  [BUGGY]  if(numToRead!=  0)  {  if(numToRead  ==  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  0)  {  if(numToRead  ==  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  0)  {  if(numToRead  ==  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  if(numToRead    ==    0)    {    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
323	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }	  if(numToRead    ==    0)    {    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
324	[BUG]  [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  0);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  0);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  0);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    i.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
325	[BUG]  [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  0);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  0);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  0);  }  else  {  hasHitEOF  =  false;  }	  totalRead    =    i.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
326	[BUG]  [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  0);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  0);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  0);  }  else  {  throw  new  IllegalStateException( " ");  }	  totalRead    =    i.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
327	[BUG]  [BUGGY]  if(i.hasNext())  {  totalRead  =  buf.read(i.next(),  offset,  0);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  totalRead  =  buf.read(i.next(),  offset,  0);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(i.hasNext())  {  totalRead  =  buf.read(i.next(),  offset,  0);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    i.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
328	[BUG]  [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  0);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  0);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  0);  }  else  {  entryOffset  +=  numToRead;  }	  totalRead    =    i.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
329	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  entryOffset  >=  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  entryOffset  >=  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  if(hasHitEOF  ||  entryOffset  >=  0)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    entrySize)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
330	[BUG]  [BUGGY]  if(entrySize  ==  numToRead)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  ==  numToRead)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  ==  numToRead)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    entrySize)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
331	[BUG]  [BUGGY]  if(entryOffset  ==  numToRead)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  ==  numToRead)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entryOffset  ==  numToRead)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    entrySize)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
332	[BUG]  [BUGGY]  if(entryOffset  ==  0)  {  if(hasHitEOF  ||  entryOffset  >=  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  ==  0)  {  if(hasHitEOF  ||  entryOffset  >=  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entryOffset  ==  0)  {  if(hasHitEOF  ||  entryOffset  >=  0)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    entrySize)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
333	[BUG]  [BUGGY]  if(numToRead!=  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    entrySize)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
334	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(hasHitEOF  ||  entryOffset  >=  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(hasHitEOF  ||  entryOffset  >=  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  if(hasHitEOF  ||  entryOffset  >=  0)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    entrySize)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
335	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isRecorded,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isRecorded,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  isRecorded,  hasHitEOF);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isRecorded);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
336	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  false);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  false);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  false);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isRecorded);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
337	[BUG]  [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  entryOffset,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  currEntry.read(buf,  offset,  entryOffset,  numToRead);	  int    totalRead    =    is.read(buf,    offset,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
338	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  entryOffset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  entryOffset,  numToRead,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  is.read(buf,  offset,  entryOffset,  numToRead,  hasHitEOF);	  int    totalRead    =    is.read(buf,    offset,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
339	[BUG]  [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  numToRead,  entryOffset);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  currEntry.read(buf,  offset,  numToRead,  entryOffset);	  int    totalRead    =    is.read(buf,    offset,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
340	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  buf.length);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  buf.length);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead,  buf.length);	  int    totalRead    =    is.read(buf,    offset,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
341	[BUG]  [BUGGY]  if(numToRead  >  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
342	[BUG]  [BUGGY]  if(numToRead  >=  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >=  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >=  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
343	[BUG]  [BUGGY]  if(numToRead  <  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
344	[BUG]  [BUGGY]  if(numToRead!=  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
345	[BUG]  [BUGGY]  if(numToRead  <  numRecords)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  numRecords)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  numRecords)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
346	[BUG]  [BUGGY]  if(numToRead  >  numRecords)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >  numRecords)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >  numRecords)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
347	[BUG]  [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);	  int    totalRead    =    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
348	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF,  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF,  entrySize);	  int    totalRead    =    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
349	[BUG]  [BUGGY]  int  totalRead  =  i.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  i.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  i.read(buf,  offset,  numToRead,  hasHitEOF);	  int    totalRead    =    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
350	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entryOffset,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  entryOffset,  numToRead);	  totalRead    =    currEntry.read(buf,    offset,    entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
351	[BUG]  [BUGGY]  if(numToRead!=  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    currEntry.read(buf,    offset,    entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
352	[BUG]  [BUGGY]  if(numToRead  ==  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    currEntry.read(buf,    offset,    entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
353	[BUG]  [BUGGY]  if(numToRead!=  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  totalRead    =    currEntry.read(buf,    offset,    entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
354	[BUG]  [BUGGY]  if(numToRead  ==  entrySize)  {  if(entryOffset  ==  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  entrySize)  {  if(entryOffset  ==  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  entrySize)  {  if(entryOffset  ==  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }	  if(entrySize    ==    entrySize)    {    totalRead    =    is.read(buf,    offset,    entryOffset);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
355	[BUG]  [BUGGY]  if(entryOffset  ==  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  ==  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entryOffset  ==  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }	  if(entrySize    ==    entrySize)    {    totalRead    =    is.read(buf,    offset,    entryOffset);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
356	[BUG]  [BUGGY]  if(entryOffset  ==  entrySize)  {  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  ==  entrySize)  {  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entryOffset  ==  entrySize)  {  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }	  if(entrySize    ==    entrySize)    {    totalRead    =    is.read(buf,    offset,    entryOffset);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
357	[BUG]  [BUGGY]  if(numToRead  ==  entrySize)  {  if(entryOffset  >=  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  entrySize)  {  if(entryOffset  >=  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  entrySize)  {  if(entryOffset  >=  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }	  if(entrySize    ==    entrySize)    {    totalRead    =    is.read(buf,    offset,    entryOffset);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
358	[BUG]  [BUGGY]  if(entryOffset  ==  entrySize)  {  if(numToRead  ==  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  ==  entrySize)  {  if(numToRead  ==  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entryOffset  ==  entrySize)  {  if(numToRead  ==  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }	  if(entrySize    ==    entrySize)    {    totalRead    =    is.read(buf,    offset,    entryOffset);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
359	[BUG]  [BUGGY]  if(numToRead  ==  entrySize)  {  if(entryOffset!=  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  entrySize)  {  if(entryOffset!=  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  entrySize)  {  if(entryOffset!=  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }	  if(entrySize    ==    entrySize)    {    totalRead    =    is.read(buf,    offset,    entryOffset);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
360	[BUG]  [BUGGY]  if(entryOffset  ==  entrySize)  {  if(numToRead  ==  currEntry.length)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  ==  entrySize)  {  if(numToRead  ==  currEntry.length)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entryOffset  ==  entrySize)  {  if(numToRead  ==  currEntry.length)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }	  if(entrySize    ==    entrySize)    {    totalRead    =    is.read(buf,    offset,    entryOffset);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
361	[BUG]  [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  currEntry.read(buf,  offset,  entrySize);	  numToRead    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
362	[BUG]  [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead,  isHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  currEntry.read(buf,  offset,  numToRead,  isHitEOF);	  numToRead    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
363	[BUG]  [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead,  false);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead,  false);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  currEntry.read(buf,  offset,  numToRead,  false);	  numToRead    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
364	[BUG]  [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead,  true);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead,  true);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  currEntry.read(buf,  offset,  numToRead,  true);	  numToRead    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
365	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  entrySize,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  is.read(buf,  offset,  entrySize,  hasHitEOF);	  numToRead    =    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
366	[BUG]  [BUGGY]  numToRead  =  rest.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  rest.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  rest.read(buf,  offset,  numToRead,  hasHitEOF);	  numToRead    =    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
367	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  entryOffset,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  is.read(buf,  offset,  entryOffset,  hasHitEOF);	  numToRead    =    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
368	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  entrySize,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  is.read(buf,  offset,  entrySize,  numToRead);	  numToRead    =    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
369	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(numToRead  ==  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  if(numToRead  ==  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  -1)  {  if(numToRead  ==  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  if(numToRead    ==    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
370	[BUG]  [BUGGY]  if(numToRead!=  -1)  {  if(numToRead  ==  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  -1)  {  if(numToRead  ==  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  -1)  {  if(numToRead  ==  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  if(numToRead    ==    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
371	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  if(numToRead    ==    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
372	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(numToRead  ==  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(numToRead  ==  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  if(numToRead  ==  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  if(numToRead    ==    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
373	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }	  if(numToRead    ==    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
374	[BUG]  [BUGGY]  numToRead  =  rest.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  rest.read(buf,  offset,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  rest.read(buf,  offset,  entrySize);	  numToRead    =    is.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
375	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  entryOffset);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  is.read(buf,  offset,  entryOffset);	  numToRead    =    is.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
376	[BUG]  [BUGGY]  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  off,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  off,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  off,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    currEntry.read(buf,    off,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
377	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  off,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  off,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  off,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    currEntry.read(buf,    off,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
378	[BUG]  [BUGGY]  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  off,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  off,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  off,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  totalRead    =    currEntry.read(buf,    off,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
379	[BUG]  [BUGGY]  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  off,  numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  off,  numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  off,  numToRead);  }  else  {  entryOffset  +=  numToRead;  }	  totalRead    =    currEntry.read(buf,    off,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
380	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  off,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  off,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  off,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  totalRead    =    currEntry.read(buf,    off,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
381	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(numToRead  ==  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  if(numToRead  ==  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  -1)  {  if(numToRead  ==  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
382	[BUG]  [BUGGY]  if(numToRead!=  -1)  {  if(numToRead  ==  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  -1)  {  if(numToRead  ==  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  -1)  {  if(numToRead  ==  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
383	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
384	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(numToRead  ==  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(numToRead  ==  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  if(numToRead  ==  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
385	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(numToRead  ==  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(numToRead  ==  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  if(numToRead  ==  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
386	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  isHitEOF);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  isHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  rest.read(buf,  offset,  numToRead,  isHitEOF);	  totalRead    =    rest.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
387	[BUG]  [BUGGY]  totalRead  =  repaint.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  repaint.read(buf,  offset,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  repaint.read(buf,  offset,  numToRead);	  totalRead    =    rest.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
388	[BUG]  [BUGGY]  i.remove();  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  i.remove();  hasHitEOF  =  false;  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	i.remove();  hasHitEOF  =  false;	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
389	[BUG]  [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
390	[BUG]  [BUGGY]  n.remove();  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  n.remove();  hasHitEOF  =  true;  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	n.remove();  hasHitEOF  =  true;	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
391	[BUG]  [BUGGY]  if(numToRead  ==  null)  {  i.remove();  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  null)  {  i.remove();  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  null)  {  i.remove();  hasHitEOF  =  true;  }	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
392	[BUG]  [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  else  {  throw  new  IllegalStateException( " ");  }	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
393	[BUG]  [BUGGY]  if(numToRead!=  null)  {  i.remove();  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  null)  {  i.remove();  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  null)  {  i.remove();  hasHitEOF  =  true;  }	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
394	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(!hasHitEOF  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(!hasHitEOF  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  if(!hasHitEOF  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
395	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >=  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >=  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
396	[BUG]  [BUGGY]  if(entrySize  <  0)  {  if(!hasHitEOF  ||  entryOffset  >=  numToRead)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  <  0)  {  if(!hasHitEOF  ||  entryOffset  >=  numToRead)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  <  0)  {  if(!hasHitEOF  ||  entryOffset  >=  numToRead)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
397	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  available,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  available,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  available,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    numToRead,    available);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
398	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  available);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  available);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  available);	  totalRead    =    is.read(buf,    offset,    numToRead,    available);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
399	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  available,  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  available,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  available,  entrySize);	  totalRead    =    is.read(buf,    offset,    numToRead,    available);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
400	[BUG]  [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isHitEOF);	  int    totalRead    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
401	[BUG]  [BUGGY]  Integer  totalRead  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  Integer  totalRead  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	Integer  totalRead  =  currEntry.read(buf,  offset,  numToRead);	  int    totalRead    =    i.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
402	[BUG]  [BUGGY]  byte  totalRead  =  i.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  byte  totalRead  =  i.read(buf,  offset,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	byte  totalRead  =  i.read(buf,  offset,  numToRead);	  int    totalRead    =    i.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
403	[BUG]  [BUGGY]  int  totalRead  =  rest.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  rest.read(buf,  offset,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  rest.read(buf,  offset,  numToRead);	  int    totalRead    =    i.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
404	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead  +  1,  entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead  +  1,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead  +  1,  entrySize);	  totalRead    =    is.read(buf,    offset,    numToRead    +    1,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
405	[BUG]  [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  i.read(buf,  offset,  numToRead  +  1,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    numToRead    +    1,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
406	[BUG]  [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  numToRead,  hasHitEOF);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  numToRead,  hasHitEOF);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  numToRead,  hasHitEOF);  }  else  {  entryOffset  +=  numToRead;  }	  totalRead    =    i.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
407	[BUG]  [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  numToRead,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  numToRead,  hasHitEOF);  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  numToRead,  hasHitEOF);  }	  totalRead    =    i.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
408	[BUG]  [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  numToRead,  hasHitEOF);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  numToRead,  hasHitEOF);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  numToRead,  hasHitEOF);  }  else  {  throw  new  IllegalStateException( " ");  }	  totalRead    =    i.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
409	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  entryOffset);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  rest.read(buf,  offset,  numToRead,  entryOffset);	  totalRead    =    rest.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
410	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  0,  len);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  0,  len);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  rest.read(buf,  offset,  numToRead,  0,  len);	  totalRead    =    rest.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
411	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
412	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
413	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  for(int  i  =  0;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	for(int  i  =  0;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
414	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
415	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  0)  {  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
416	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  entryOffset;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  entryOffset;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  entryOffset;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
417	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  0,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  rest.read(buf,  offset,  0,  numToRead);	  totalRead    =    rest.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
418	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  entrySize,  0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  entrySize,  0);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  rest.read(buf,  offset,  entrySize,  0);	  totalRead    =    rest.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
419	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  0L);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  0L);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  rest.read(buf,  offset,  0L);	  totalRead    =    rest.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
420	[BUG]  [BUGGY]  totalRead  =  repaint.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  repaint.read(buf,  offset,  0);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  repaint.read(buf,  offset,  0);	  totalRead    =    rest.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
421	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  1);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
422	[BUG]  [BUGGY]  if(entrySize  ==  entrySize)  {  totalRead  =  i.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  ==  entrySize)  {  totalRead  =  i.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  ==  entrySize)  {  totalRead  =  i.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    i.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
423	[BUG]  [BUGGY]  if(entrySize  ==  entrySize)  {  totalRead  =  i.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  ==  entrySize)  {  totalRead  =  i.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  ==  entrySize)  {  totalRead  =  i.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }	  totalRead    =    i.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
424	[BUG]  [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    i.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
425	[BUG]  [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }	  totalRead    =    i.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
426	[BUG]  [BUGGY]  numToRead  =  rest.read(buf,  offset,  numToRead,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  rest.read(buf,  offset,  numToRead,  isHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  rest.read(buf,  offset,  numToRead,  isHitEOF);	  numToRead    =    rest.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
427	[BUG]  [BUGGY]  numToRead  =  rec.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  rec.read(buf,  offset,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  rec.read(buf,  offset,  numToRead);	  numToRead    =    rest.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
428	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entryOffset,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  entryOffset,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
429	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entryOffset,  hasHitEOF,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  entryOffset,  hasHitEOF,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  entryOffset,  hasHitEOF,  numToRead);	  totalRead    =    is.read(buf,    offset,    entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
430	[BUG]  [BUGGY]  totalRead  =  in.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  in.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  in.read(buf,  offset,  numToRead  +  1,  hasHitEOF);	  totalRead    =    in.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
431	[BUG]  [BUGGY]  totalRead  =  in.read(buf,  offset,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  in.read(buf,  offset,  entrySize  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  in.read(buf,  offset,  entrySize  +  1);	  totalRead    =    in.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
432	[BUG]  [BUGGY]  totalRead  =  this.in.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  this.in.read(buf,  offset,  numToRead  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  this.in.read(buf,  offset,  numToRead  +  1);	  totalRead    =    in.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
433	[BUG]  [BUGGY]  totalRead  =  in.read(buf,  offset,  numToRead  +  2);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  in.read(buf,  offset,  numToRead  +  2);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  in.read(buf,  offset,  numToRead  +  2);	  totalRead    =    in.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
434	[BUG]  [BUGGY]  totalRead  =  in.read(buf,  offset,  numToRead  *  1);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  in.read(buf,  offset,  numToRead  *  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  in.read(buf,  offset,  numToRead  *  1);	  totalRead    =    in.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
435	[BUG]  [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead  +  2);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead  +  2);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  i.read(buf,  offset,  numToRead  +  2);	  totalRead    =    is.read(buf,    offset,    numToRead    +    2);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
436	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entrySize  +  2);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  entrySize  +  2);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  entrySize  +  2);	  totalRead    =    is.read(buf,    offset,    numToRead    +    2);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
437	[BUG]  [BUGGY]  totalRead  =  curr.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  curr.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  curr.read(buf,  offset,  numToRead  +  1,  hasHitEOF);	  totalRead    =    curr.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
438	[BUG]  [BUGGY]  numToRead  =  curr.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  curr.read(buf,  offset,  numToRead  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  curr.read(buf,  offset,  numToRead  +  1);	  totalRead    =    curr.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
439	[BUG]  [BUGGY]  totalRead  =  curr.read(buf,  offset,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  curr.read(buf,  offset,  entrySize  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  curr.read(buf,  offset,  entrySize  +  1);	  totalRead    =    curr.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
440	[BUG]  [BUGGY]  totalRead  =  curr.read(buf,  offset,  numToRead  *  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  curr.read(buf,  offset,  numToRead  *  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  curr.read(buf,  offset,  numToRead  *  1);	  totalRead    =    curr.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
441	[BUG]  [BUGGY]  totalRead  =  curr.read(buf,  offset,  numToRead  +  2);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  curr.read(buf,  offset,  numToRead  +  2);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  curr.read(buf,  offset,  numToRead  +  2);	  totalRead    =    curr.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
442	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isSkip,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isSkip,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  isSkip,  hasHitEOF);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isSkip);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
443	[BUG]  [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead,  isSkip);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead,  isSkip);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  currEntry.read(buf,  offset,  numToRead,  isSkip);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isSkip);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
444	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  0,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  0,  numToRead,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  0,  numToRead,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
445	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  0,  numToRead);	  totalRead    =    is.read(buf,    offset,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
446	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  0,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  0,  numToRead  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  0,  numToRead  +  1);	  totalRead    =    is.read(buf,    offset,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
447	[BUG]  [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  numToRead,  len);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  numToRead,  len);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  numToRead,  len);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    i.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
448	[BUG]  [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  i.read(buf,  offset,  numToRead,  entrySize);	  totalRead    =    i.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
449	[BUG]  [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  numToRead,  len);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  numToRead,  len);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  numToRead,  len);  }  else  {  hasHitEOF  =  false;  }	  totalRead    =    i.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
450	[BUG]  [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  numToRead,  len);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  numToRead,  len);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  numToRead,  len);  }  else  {  throw  new  IllegalStateException( " ");  }	  totalRead    =    i.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
451	[BUG]  [BUGGY]  numToRead  =  rest.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  rest.read(buf,  offset,  numToRead  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  rest.read(buf,  offset,  numToRead  +  1);	  numToRead    =    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
452	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  is.read(buf,  offset,  numToRead  +  1,  hasHitEOF);	  numToRead    =    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
453	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead  *  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead  *  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  is.read(buf,  offset,  numToRead  *  1);	  numToRead    =    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
454	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  entrySize  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  is.read(buf,  offset,  entrySize  +  1);	  numToRead    =    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
455	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead  +  2);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead  +  2);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  is.read(buf,  offset,  numToRead  +  2);	  numToRead    =    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
456	[BUG]  [BUGGY]  int  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  hasHitEOF);	  int    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
457	[BUG]  [BUGGY]  int  totalRead  =  this.currEntry.read(buf,  offset,  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  this.currEntry.read(buf,  offset,  entrySize,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  this.currEntry.read(buf,  offset,  entrySize,  numToRead);	  int    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
458	[BUG]  [BUGGY]  byte  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  byte  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	byte  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);	  int    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
459	[BUG]  [BUGGY]  int  totalRead  =  this.currEntry.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  this.currEntry.read(buf,  offset,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  this.currEntry.read(buf,  offset,  entrySize);	  int    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
460	[BUG]  [BUGGY]  int  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  isHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  isHitEOF);	  int    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
461	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  0L);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  0L);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  0L);	  totalRead    =    currEntry.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
462	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  numToRead,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  numToRead,  0);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  numToRead,  0);	  totalRead    =    currEntry.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
463	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  1);	  totalRead    =    currEntry.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
464	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  length  -  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  length  -  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead,  length  -  1);	  int    totalRead    =    is.read(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
465	[BUG]  [BUGGY]  totalRead  =  curr.read(buf,  offset,  numToRead,  isRecord);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  curr.read(buf,  offset,  numToRead,  isRecord);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  curr.read(buf,  offset,  numToRead,  isRecord);	  totalRead    =    curr.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
466	[BUG]  [BUGGY]  totalRead  =  i.read(buf,  offset,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  i.read(buf,  offset,  0,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  i.read(buf,  offset,  0,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    0,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
467	[BUG]  [BUGGY]  if(numToRead!=  -1)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  -1)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  -1)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    <    0)    {    if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
468	[BUG]  [BUGGY]  if(entrySize  <  0)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  <  0)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  <  0)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    <    0)    {    if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
469	[BUG]  [BUGGY]  if(numToRead  >=  -1)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >=  -1)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >=  -1)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    <    0)    {    if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
470	[BUG]  [BUGGY]  totalRead  =  recv.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  recv.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  recv.read(buf,  offset,  numToRead,  hasHitEOF);	  totalRead    =    rest.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
471	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  isEnabled(HitEOF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  isEnabled(HitEOF));  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  rest.read(buf,  offset,  numToRead,  isEnabled(HitEOF));	  totalRead    =    rest.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
472	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  off,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  off,  numToRead,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  off,  numToRead,  hasHitEOF);	  totalRead    =    currEntry.read(buf,    off,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
473	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  off,  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  off,  entrySize,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  off,  entrySize,  numToRead);	  totalRead    =    currEntry.read(buf,    off,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
474	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  0,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  0,  numToRead);	  totalRead    =    currEntry.read(buf,    off,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
475	[BUG]  [BUGGY]  totalRead  =  currEntry.read(numToRead,  off,  buf);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(numToRead,  off,  buf);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(numToRead,  off,  buf);	  totalRead    =    currEntry.read(buf,    off,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
476	[BUG]  [BUGGY]  numToRead  =  curr.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  curr.read(buf,  offset,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  curr.read(buf,  offset,  entrySize);	  numToRead    =    is.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
477	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  -1)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
478	[BUG]  [BUGGY]  if(numToRead!=  -1)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  -1)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  -1)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
479	[BUG]  [BUGGY]  if(numToRead  >=  -1)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >=  -1)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >=  -1)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
480	[BUG]  [BUGGY]  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  0);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  0);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  0);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
481	[BUG]  [BUGGY]  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  -1);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  -1);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  -1);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
482	[BUG]  [BUGGY]  totalRead  =  recv.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  recv.read(buf,  offset,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  recv.read(buf,  offset,  entrySize);	  totalRead    =    rest.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
483	[BUG]  [BUGGY]  totalRead  =  RestUtil.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  RestUtil.read(buf,  offset,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  RestUtil.read(buf,  offset,  entrySize);	  totalRead    =    rest.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
484	[BUG]  [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  isEOF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  isEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  isEOF);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
485	[BUG]  [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  true);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  true);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  true);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
486	[BUG]  [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  false);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  false);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  false);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
487	[BUG]  [BUGGY]  totalRead  =  curr.read(buf,  offset,  numToRead  +  3);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  curr.read(buf,  offset,  numToRead  +  3);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  curr.read(buf,  offset,  numToRead  +  3);	  totalRead    =    curr.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
488	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  numToRead,  i,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  numToRead,  i,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  numToRead,  i,  hasHitEOF);	  totalRead    =    i.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
489	[BUG]  [BUGGY]  if(numToRead!=  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead!=    0)    {    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
490	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead!=    0)    {    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
491	[BUG]  [BUGGY]  if(numToRead  >=  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >=  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >=  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead!=    0)    {    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
492	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >=  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >=  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead!=    0)    {    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
493	[BUG]  [BUGGY]  totalRead  =  curr.read(buf,  numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  curr.read(buf,  numToRead,  entryOffset);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  curr.read(buf,  numToRead,  entryOffset);	  totalRead    =    curr.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
494	[BUG]  [BUGGY]  totalRead  =  curr.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  curr.read(buf,  offset,  0);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  curr.read(buf,  offset,  0);	  totalRead    =    curr.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
495	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  iOffset);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  iOffset);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  iOffset);	  totalRead    =    i.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
496	[BUG]  [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  entryOffset);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	TotalRead  totalRead  =  currEntry.read(buf,  offset,  entryOffset);	  totalRead    =    i.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
497	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isEnabled)&&  isEnabled;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isEnabled)&&  isEnabled;  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  isEnabled)&&  isEnabled;	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isEnabled);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
498	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  this.isEnabled);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  this.isEnabled);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  this.isEnabled);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isEnabled);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
499	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isEnabled,  len);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isEnabled,  len);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  isEnabled,  len);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isEnabled);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
500	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  length  -  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  length  -  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  length  -  1);	  totalRead    =    is.read(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
501	[BUG]  [BUGGY]  totalRead  =  buffer.read(buf,  offset,  numToRead  *  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  buffer.read(buf,  offset,  numToRead  *  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  buffer.read(buf,  offset,  numToRead  *  1);	  totalRead    =    buffer.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
502	[BUG]  [BUGGY]  if(numToRead!=  -1)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  -1)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  -1)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead!=    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
503	[BUG]  [BUGGY]  if(numToRead!=  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead!=    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
504	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead!=    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
505	[BUG]  [BUGGY]  if(numToRead!=  0)  {  hasHitEOF  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  0)  {  hasHitEOF  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  0)  {  hasHitEOF  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead!=    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
506	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entrySize  -  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  entrySize  -  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  entrySize  -  1);	  totalRead    =    is.read(buf,    offset,    entrySize    +    1);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
507	[BUG]  [BUGGY]  if(numToRead!=  -1)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  -1)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  -1)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
508	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  if(!hasHitEOF  ||  entryOffset  >=  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  ==  0)  {  if(!hasHitEOF  ||  entryOffset  >=  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  ==  0)  {  if(!hasHitEOF  ||  entryOffset  >=  0)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
509	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  ==  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  ==  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
510	[BUG]  [BUGGY]  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
511	[BUG]  [BUGGY]  numToRead  =  recv.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  recv.read(buf,  offset,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  recv.read(buf,  offset,  numToRead);	  numToRead    =    rest.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
512	[BUG]  [BUGGY]  numToRead  =  RestUtil.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  RestUtil.read(buf,  offset,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  RestUtil.read(buf,  offset,  numToRead);	  numToRead    =    rest.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
513	[BUG]  [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  0);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  currEntry.read(buf,  offset,  0);	  numToRead    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
514	[BUG]  [BUGGY]  if(entrySize  >=  numToRead)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >=  numToRead)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >=  numToRead)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }	  if(entrySize    ==    entrySize)    {    totalRead    =    is.read(buf,    offset,    entryOffset);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
515	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }	  if(entrySize    ==    entrySize)    {    totalRead    =    is.read(buf,    offset,    entryOffset);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
516	[BUG]  [BUGGY]  if(entrySize  ==  numToRead)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  ==  numToRead)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  ==  numToRead)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }	  if(entrySize    ==    entrySize)    {    totalRead    =    is.read(buf,    offset,    entryOffset);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
517	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  entryOffset);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  is.read(buf,  offset,  entryOffset);	  if(entrySize    ==    entrySize)    {    totalRead    =    is.read(buf,    offset,    entryOffset);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
518	[BUG]  [BUGGY]  int  entrySize  =  is.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  entrySize  =  is.read(buf,  offset,  entryOffset);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  entrySize  =  is.read(buf,  offset,  entryOffset);	  if(entrySize    ==    entrySize)    {    totalRead    =    is.read(buf,    offset,    entryOffset);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
519	[BUG]  [BUGGY]  ch  =  currEntry.getChronology()  +  1;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  ch  =  currEntry.getChronology()  +  1;  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	ch  =  currEntry.getChronology()  +  1;	  ch    =    currEntry.getChronology();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
520	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  inputSize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  inputSize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  inputSize);	  totalRead    =    currEntry.read(buf,    offset,    entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
521	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead  +  1);	  totalRead    =    currEntry.read(buf,    offset,    entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
522	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  -1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  -1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  rest.read(buf,  offset,  -1);	  totalRead    =    rest.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
523	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  rest.read(buf,  offset,  1);	  totalRead    =    rest.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
524	[BUG]  [BUGGY]  totalRead  =  encoding.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  encoding.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  encoding.read(buf,  offset,  numToRead,  hasHitEOF);	  totalRead    =    hasHitEOF.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
525	[BUG]  [BUGGY]  totalRead  =  hasHitEOF.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  hasHitEOF.read(buf,  offset,  numToRead,  len);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  hasHitEOF.read(buf,  offset,  numToRead,  len);	  totalRead    =    hasHitEOF.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
526	[BUG]  [BUGGY]  totalRead  =  hasHitEOF.read(buf,  offset,  numToRead,  cache.length);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  hasHitEOF.read(buf,  offset,  numToRead,  cache.length);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  hasHitEOF.read(buf,  offset,  numToRead,  cache.length);	  totalRead    =    hasHitEOF.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
527	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  fileSize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  fileSize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  fileSize);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isSkip);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
528	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  padding);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  padding);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  padding);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isSkip);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
529	[BUG]  [BUGGY]  i.remove(numToRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  i.remove(numToRead);  hasHitEOF  =  true;  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	i.remove(numToRead);  hasHitEOF  =  true;	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
530	[BUG]  [BUGGY]  i.set();  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  i.set();  hasHitEOF  =  true;  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	i.set();  hasHitEOF  =  true;	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
531	[BUG]  [BUGGY]  i.remove(0);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  i.remove(0);  hasHitEOF  =  true;  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	i.remove(0);  hasHitEOF  =  true;	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
532	[BUG]  [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  0);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  currEntry.read(buf,  offset,  0);	  int    totalRead    =    currEntry.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
533	[BUG]  [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  numToRead,  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  numToRead,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  currEntry.read(buf,  offset,  numToRead,  numToRead);	  int    totalRead    =    is.read(buf,    offset,    entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
534	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF,  entrySize  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF,  entrySize  +  1);	  totalRead    =    is.read(buf,    offset,    numToRead,    hasHitEOF,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
535	[BUG]  [BUGGY]  numToRead  =  this.currEntry.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  this.currEntry.read(buf,  offset,  0);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  this.currEntry.read(buf,  offset,  0);	  numToRead    =    this.currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
536	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  recordSize);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  recordSize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  recordSize);	  totalRead    =    is.read(buf,    offset,    numToRead,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
537	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  0L  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  0L  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  0L  +  1);	  totalRead    =    is.read(buf,    offset,    0L);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
538	[BUG]  [BUGGY]  if(numToRead  >  access)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >  access)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >  access)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
539	[BUG]  [BUGGY]  if(numToRead  <  =  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  =  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  =  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
540	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  numToRead,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  numToRead,  entrySize);	  totalRead    =    currEntry.read(buf,    numToRead,    offset);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
541	[BUG]  [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  offset;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  offset;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >  0)  {  for(int  i  =  offset;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    offset;    i    <    numToRead;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
542	[BUG]  [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  offset;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  offset;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  for(int  i  =  offset;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    offset;    i    <    numToRead;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
543	[BUG]  [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  length;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  length;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  0)  {  for(int  i  =  length;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    offset;    i    <    numToRead;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
544	[BUG]  [BUGGY]  i.remove(entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  i.remove(entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	i.remove(entrySize);	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
545	[BUG]  [BUGGY]  i.remove(numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  i.remove(numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	i.remove(numToRead);	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
546	[BUG]  [BUGGY]  i.setIndex(numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  i.setIndex(numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	i.setIndex(numToRead);	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
547	[BUG]  [BUGGY]  i.remove(offset);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  i.remove(offset);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	i.remove(offset);	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
548	[BUG]  [BUGGY]  i.setIsEOF(hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  i.setIsEOF(hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	i.setIsEOF(hasHitEOF);	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
549	[BUG]  [BUGGY]  i.setRead(offset);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  i.setRead(offset);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	i.setRead(offset);	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
550	[BUG]  [BUGGY]  numToRead  =  curr.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  curr.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  curr.read(buf,  offset,  numToRead,  hasHitEOF);	  numToRead    =    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
551	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  0,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  is.read(buf,  offset,  0,  hasHitEOF);	  numToRead    =    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
552	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  if(numToRead    ==    0)    {    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
553	[BUG]  [BUGGY]  if(numToRead!=  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  if(numToRead    ==    0)    {    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
554	[BUG]  [BUGGY]  if(numToRead  >=  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >=  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >=  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  if(numToRead    ==    0)    {    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
555	[BUG]  [BUGGY]  if(numToRead  >  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  if(numToRead    ==    0)    {    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
556	[BUG]  [BUGGY]  if(numToRead  <  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  if(numToRead    ==    0)    {    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
557	[BUG]  [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  0;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  0;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >  0)  {  for(int  i  =  0;  i  <  entrySize;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
558	[BUG]  [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >  0)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
559	[BUG]  [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  0;  i  <  entryOffset;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  0;  i  <  entryOffset;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >  0)  {  for(int  i  =  0;  i  <  entryOffset;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
560	[BUG]  [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  0;  i  <  accessSize;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  0;  i  <  accessSize;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >  0)  {  for(int  i  =  0;  i  <  accessSize;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
561	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  is.read);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  is.read);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  is.read);	  totalRead    =    is.read(buf,    offset,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
562	[BUG]  [BUGGY]  totalRead  =  available.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  available.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  available.read(buf,  offset,  numToRead,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    numToRead,    available);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
563	[BUG]  [BUGGY]  totalRead  =  hasHitEOF.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  hasHitEOF.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  hasHitEOF.read(buf,  offset,  numToRead  +  1,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    numToRead    +    1,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
564	[BUG]  [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  isRecorded);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  isRecorded);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  isRecorded);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead,    isHitEOF);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
565	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  available);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  available);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead,  available);	  int    totalRead    =    is.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
566	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  0);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  0);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead,  0);	  int    totalRead    =    is.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
567	[BUG]  [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  0;  i  <  numRecords.size();  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  0;  i  <  numRecords.size();  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >  0)  {  for(int  i  =  0;  i  <  numRecords.size();  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numRecords.size();    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
568	[BUG]  [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  currEntry.size();  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  currEntry.size();  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  0)  {  for(int  i  =  0;  i  <  currEntry.size();  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numRecords.size();    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
569	[BUG]  [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numRecords.size();  ++i)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numRecords.size();  ++i)  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numRecords.size();  ++i)  {  hasHitEOF  =  false;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numRecords.size();    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
570	[BUG]  [BUGGY]  Integer  totalRead  =  numRecords.get(numToRead);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  Integer  totalRead  =  numRecords.get(numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	Integer  totalRead  =  numRecords.get(numToRead);	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numRecords.size();    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
571	[BUG]  [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  accessSize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  accessSize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  accessSize);	  totalRead    =    this.currEntry.read(buf,    offset,    entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
572	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  numToRead,  entryOffset);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  numToRead,  entryOffset);	  totalRead    =    currEntry.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
573	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buff,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buff,  offset,  entryOffset);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buff,  offset,  entryOffset);	  totalRead    =    currEntry.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
574	[BUG]  [BUGGY]  totalRead  =  str.read(buf,  offset,  numToRead  *  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  str.read(buf,  offset,  numToRead  *  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  str.read(buf,  offset,  numToRead  *  1);	  totalRead    =    str.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
575	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  -1)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
576	[BUG]  [BUGGY]  if(numToRead  <  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
577	[BUG]  [BUGGY]  if(numToRead  <  0)  {  totalRead  =  i.read(buf,  offset,  hasHitEOF);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  totalRead  =  i.read(buf,  offset,  hasHitEOF);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  totalRead  =  i.read(buf,  offset,  hasHitEOF);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
578	[BUG]  [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead  +  1);	  totalRead    =    i.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
579	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  numToRead,  i  +  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  numToRead,  i  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  numToRead,  i  +  1);	  totalRead    =    i.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
580	[BUG]  [BUGGY]  totalRead  =  recv.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  recv.read(buf,  offset,  numToRead  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  recv.read(buf,  offset,  numToRead  +  1);	  totalRead    =    i.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
581	[BUG]  [BUGGY]  if(entryOffset  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entryOffset  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
582	[BUG]  [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
583	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
584	[BUG]  [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
585	[BUG]  [BUGGY]  if(numToRead  >  access)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >  access)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >  access)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
586	[BUG]  [BUGGY]  if(numToRead  <  =  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  =  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  =  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
587	[BUG]  [BUGGY]  if(numToRead  >  accessSize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >  accessSize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >  accessSize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
588	[BUG]  [BUGGY]  if(numToRead  >  entrySize)  {  if(hasHitEOF  ||  entryOffset!=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >  entrySize)  {  if(hasHitEOF  ||  entryOffset!=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >  entrySize)  {  if(hasHitEOF  ||  entryOffset!=  entrySize)  {  return  -1;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
589	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  iSize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  iSize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  iSize);	  totalRead    =    i.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
590	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  currentSize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  currentSize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  currentSize);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead,    currentSize);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
591	[BUG]  [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  available);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  available);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  available);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead,    currentSize);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
592	[BUG]  [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  currentSize  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  currentSize  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  currentSize  +  1);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead,    currentSize);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
593	[BUG]  [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  0);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  0);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
594	[BUG]  [BUGGY]  totalRead  =  recv.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  recv.read(buf,  offset,  entryOffset);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  recv.read(buf,  offset,  entryOffset);	  totalRead    =    rest.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
595	[BUG]  [BUGGY]  totalRead  =  RestUtil.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  RestUtil.read(buf,  offset,  entryOffset);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  RestUtil.read(buf,  offset,  entryOffset);	  totalRead    =    rest.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
596	[BUG]  [BUGGY]  numToRead  =  strEntry.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  strEntry.read(buf,  offset,  numToRead  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  strEntry.read(buf,  offset,  numToRead  +  1);	  numToRead    =    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
597	[BUG]  [BUGGY]  numToRead  =  in.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  in.read(buf,  offset,  numToRead  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  in.read(buf,  offset,  numToRead  +  1);	  numToRead    =    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
598	[BUG]  [BUGGY]  numToRead  =  recv.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  recv.read(buf,  offset,  numToRead  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  recv.read(buf,  offset,  numToRead  +  1);	  numToRead    =    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
599	[BUG]  [BUGGY]  int  totalRead  =  buffer.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  buffer.read(buf,  offset,  numToRead,  len);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  buffer.read(buf,  offset,  numToRead,  len);	  int    totalRead    =    buffer.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
600	[BUG]  [BUGGY]  int  totalRead  =  buffer.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  buffer.read(buf,  offset,  numToRead  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  buffer.read(buf,  offset,  numToRead  +  1);	  int    totalRead    =    buffer.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
601	[BUG]  [BUGGY]  int  totalRead  =  buffer.read(buf,  offset,  numToRead,  length);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  buffer.read(buf,  offset,  numToRead,  length);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  buffer.read(buf,  offset,  numToRead,  length);	  int    totalRead    =    buffer.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
602	[BUG]  [BUGGY]  if(numToRead!=  -1)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  -1)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  -1)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
603	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(!hasHitEOF  ||  entryOffset  >=  0)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(!hasHitEOF  ||  entryOffset  >=  0)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  if(!hasHitEOF  ||  entryOffset  >=  0)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
604	[BUG]  [BUGGY]  if(numToRead  >  access)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >  access)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >  access)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
605	[BUG]  [BUGGY]  if(numToRead  >  accessSize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >  accessSize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >  accessSize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
606	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0,  0);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  0,  0);	  totalRead    =    is.read(buf,    offset,    entrySize,    0);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
607	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  numToRead);	  totalRead    =    is.read(buf,    offset,    entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
608	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  len,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  len,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  len,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
609	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  null);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  null);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  null);	  totalRead    =    i.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
610	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  buf);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  buf);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead,  buf);	  int    totalRead    =    is.read(buf,    offset,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
611	[BUG]  [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  numToRead,  true);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  numToRead,  true);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  currEntry.read(buf,  offset,  numToRead,  true);	  int    totalRead    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
612	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  -1)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  if(numToRead    ==    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
613	[BUG]  [BUGGY]  if(numToRead!=  -1)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  -1)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  -1)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  if(numToRead    ==    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
614	[BUG]  [BUGGY]  if(numToRead  <  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  if(numToRead    ==    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
615	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  -1)  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
616	[BUG]  [BUGGY]  totalRead  =  RestUtil.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  RestUtil.read(buf,  offset,  numToRead  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  RestUtil.read(buf,  offset,  numToRead  +  1);	  totalRead    =    rest.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
617	[BUG]  [BUGGY]  totalRead  =  recv.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  recv.read(buf,  offset,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  recv.read(buf,  offset,  numToRead);	  totalRead    =    rest.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
618	[BUG]  [BUGGY]  totalRead  =  curr.read(buf,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  curr.read(buf,  numToRead,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  curr.read(buf,  numToRead,  entrySize);	  totalRead    =    curr.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
619	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  isEOF);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isHitEOF);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
620	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  true);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  true);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  true);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isHitEOF);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
621	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  numToRead,  offset  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  numToRead,  offset  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  numToRead,  offset  +  1);	  totalRead    =    currEntry.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
622	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead  +  3);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead  +  3);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead  +  3);	  totalRead    =    currEntry.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
623	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  -1)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    ==    entrySize)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
624	[BUG]  [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  0);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	TotalRead  totalRead  =  currEntry.read(buf,  offset,  0);	  totalRead    =    i.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
625	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  numToRead,  len);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  numToRead,  len);	  totalRead    =    currEntry.read(buf,    offset,    len);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
626	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  0,  len);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  0,  len);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  0,  len);	  totalRead    =    currEntry.read(buf,    offset,    len);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
627	[BUG]  [BUGGY]  byte  totalRead  =  is.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  byte  totalRead  =  is.read(buf,  offset,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	byte  totalRead  =  is.read(buf,  offset,  entrySize);	  int    totalRead    =    is.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
628	[BUG]  [BUGGY]  Integer  totalRead  =  is.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  Integer  totalRead  =  is.read(buf,  offset,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	Integer  totalRead  =  is.read(buf,  offset,  entrySize);	  int    totalRead    =    is.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
629	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  -1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  -1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  -1);	  totalRead    =    currEntry.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
630	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  len,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  len,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  is.read(buf,  offset,  len,  numToRead);	  numToRead    =    is.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
631	[BUG]  [BUGGY]  byte  totalRead  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  byte  totalRead  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	byte  totalRead  =  currEntry.read(buf,  offset,  numToRead);	  int    totalRead    =    i.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
632	[BUG]  [BUGGY]  int  totalRead  =  currEntrySize.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  currEntrySize.read(buf,  offset,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  currEntrySize.read(buf,  offset,  numToRead);	  int    totalRead    =    i.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
633	[BUG]  [BUGGY]  int  totalRead  =  curr.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  curr.read(buf,  offset,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  curr.read(buf,  offset,  numToRead);	  int    totalRead    =    i.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
634	[BUG]  [BUGGY]  if(entrySize  >=  numToRead)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >=  numToRead)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >=  numToRead)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }	  if(entrySize    ==    entrySize)    {    totalRead    =    is.read(buf,    offset,    entryOffset);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
635	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  entrySize)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }	  if(entrySize    ==    entrySize)    {    totalRead    =    is.read(buf,    offset,    entryOffset);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
636	[BUG]  [BUGGY]  if(entrySize  ==  numToRead)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  ==  numToRead)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  ==  numToRead)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }	  if(entrySize    ==    entrySize)    {    totalRead    =    is.read(buf,    offset,    entryOffset);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
637	[BUG]  [BUGGY]  int  totalRead  =  rest.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  rest.read(buf,  offset,  numToRead  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  rest.read(buf,  offset,  numToRead  +  1);	  int    totalRead    =    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
638	[BUG]  [BUGGY]  int  totalRead  =  this.currEntry.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  this.currEntry.read(buf,  offset,  numToRead  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  this.currEntry.read(buf,  offset,  numToRead  +  1);	  int    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
639	[BUG]  [BUGGY]  int  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  len);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  len);	  int    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
640	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  -1)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    entrySize)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
641	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  if(!hasHitEOF  ||  entryOffset  >=  numToRead)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >=  0)  {  if(!hasHitEOF  ||  entryOffset  >=  numToRead)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >=  0)  {  if(!hasHitEOF  ||  entryOffset  >=  numToRead)  {  return  -1;  }	  if(numToRead    ==    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
642	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  if(!hasHitEOF  ||  entryOffset  >=  0)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  ==  0)  {  if(!hasHitEOF  ||  entryOffset  >=  0)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  ==  0)  {  if(!hasHitEOF  ||  entryOffset  >=  0)  {  return  -1;  }	  if(numToRead    ==    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
643	[BUG]  [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isEnabled);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isEnabled);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isEnabled);	  TotalRead    totalRead    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
644	[BUG]  [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead,  true);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead,  true);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead,  true);	  TotalRead    totalRead    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
645	[BUG]  [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead,  null);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead,  null);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead,  null);	  TotalRead    totalRead    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
646	[BUG]  [BUGGY]  totalRead  =  this.currEntry.read(buf,  numToRead,  offset  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  this.currEntry.read(buf,  numToRead,  offset  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  this.currEntry.read(buf,  numToRead,  offset  +  1);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
647	[BUG]  [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead  +  3);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead  +  3);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  this.currEntry.read(buf,  offset,  numToRead  +  3);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
648	[BUG]  [BUGGY]  if(numToRead  >  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
649	[BUG]  [BUGGY]  if(numToRead  <  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
650	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  0);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  0);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  -1)  {  totalRead  =  this.currEntry.read(buf,  offset,  0);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
651	[BUG]  [BUGGY]  if(numToRead  >=  -1)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >=  -1)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >=  -1)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
652	[BUG]  [BUGGY]  if(entrySize  <  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  <  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  <  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
653	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  available);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  available);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  rest.read(buf,  offset,  numToRead,  available);	  totalRead    =    rest.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
654	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  0);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  rest.read(buf,  offset,  numToRead,  0);	  totalRead    =    rest.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
655	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  0,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  is.read(buf,  offset,  0,  hasHitEOF);	  int    totalRead    =    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
656	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  fileSize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  fileSize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead,  fileSize);	  int    totalRead    =    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
657	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  this.shouldReset);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  this.shouldReset);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  this.shouldReset);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isRecord);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
658	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  -1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  -1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  -1);	  totalRead    =    is.read(buf,    offset,    numToRead,    0);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
659	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isRecorded  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isRecorded  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  isRecorded  +  1);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isRecorded);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
660	[BUG]  [BUGGY]  if(numToRead!=  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  if(numToRead!=    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
661	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >=  0)  {  totalRead  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  if(numToRead!=    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
662	[BUG]  [BUGGY]  if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  hasHitEOF);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  hasHitEOF);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  0)  {  totalRead  =  i.read(buf,  offset,  hasHitEOF);  }  else  {  hasHitEOF  =  false;  }	  if(numToRead!=    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
663	[BUG]  [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  1);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
664	[BUG]  [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  2);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  2);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  2);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
665	[BUG]  [BUGGY]  totalRead  =  curr.read(buf,  off,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  curr.read(buf,  off,  numToRead  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  curr.read(buf,  off,  numToRead  +  1);	  totalRead    =    curr.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
666	[BUG]  [BUGGY]  int  totalRead  =  i.read(buf,  offset,  numToRead,  length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  i.read(buf,  offset,  numToRead,  length);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  i.read(buf,  offset,  numToRead,  length);	  int    totalRead    =    is.read(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
667	[BUG]  [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  numToRead,  inputSize);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  numToRead,  inputSize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  currEntry.read(buf,  offset,  numToRead,  inputSize);	  int    totalRead    =    is.read(buf,    offset,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
668	[BUG]  [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  numToRead,  buf.length);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  numToRead,  buf.length);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  currEntry.read(buf,  offset,  numToRead,  buf.length);	  int    totalRead    =    is.read(buf,    offset,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
669	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  this);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  this);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  this);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isRecorded);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
670	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  0L,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  0L,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  is.read(buf,  offset,  0L,  numToRead);	  totalRead    =    is.read(buf,    offset,    0L);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
671	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  1,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  1,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    0,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
672	[BUG]  [BUGGY]  ch  =  currEntry.getKey();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  ch  =  currEntry.getKey();  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	ch  =  currEntry.getKey();	  ch    =    currEntry.getChronology();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
673	[BUG]  [BUGGY]  ch  =  currEntry.getChronologyRecord();  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  ch  =  currEntry.getChronologyRecord();  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	ch  =  currEntry.getChronologyRecord();	  ch    =    currEntry.getChronology();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
674	[BUG]  [BUGGY]  ch  =  currEntry.getChronology(entry);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  ch  =  currEntry.getChronology(entry);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	ch  =  currEntry.getChronology(entry);	  ch    =    currEntry.getChronology();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
675	[BUG]  [BUGGY]  if(numToRead!=  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  if(numToRead    ==    0)    {    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
676	[BUG]  [BUGGY]  if(numToRead  <  0)  {  hasHitEOF  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  hasHitEOF  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  hasHitEOF  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  if(numToRead    ==    0)    {    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
677	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >=  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >=  0)  {  totalRead  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  if(numToRead    ==    0)    {    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
678	[BUG]  [BUGGY]  hasHitEOF  =  this.currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  hasHitEOF  =  this.currEntry.read(buf,  offset,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	hasHitEOF  =  this.currEntry.read(buf,  offset,  numToRead);	  if(numToRead    ==    0)    {    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
679	[BUG]  [BUGGY]  totalRead  =  cache.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  cache.read(buf,  offset,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  cache.read(buf,  offset,  entrySize);	  totalRead    =    rest.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
680	[BUG]  [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
681	[BUG]  [BUGGY]  if(entrySize  <  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  <  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  <  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
682	[BUG]  [BUGGY]  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  hasHitEOF  =  true;  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	hasHitEOF  =  true;	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
683	[BUG]  [BUGGY]  if(entryOffset  ==  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  ==  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entryOffset  ==  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    ==    entrySize)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
684	[BUG]  [BUGGY]  if(entryOffset  >=  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  >=  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entryOffset  >=  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    ==    entrySize)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
685	[BUG]  [BUGGY]  if(entrySize  >=  numToRead)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >=  numToRead)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >=  numToRead)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    ==    entrySize)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
686	[BUG]  [BUGGY]  if(entryOffset  ==  0)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  ==  0)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entryOffset  ==  0)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    ==    entrySize)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
687	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
688	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  entryOffset  >=  0)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  entryOffset  >=  0)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  0)  {  if(hasHitEOF  ||  entryOffset  >=  0)  {  return  -1;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
689	[BUG]  [BUGGY]  if(entrySize  >  numToRead)  {  if(hasHitEOF  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  numToRead)  {  if(hasHitEOF  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  numToRead)  {  if(hasHitEOF  ||  entryOffset  ==  entrySize)  {  return  -1;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
690	[BUG]  [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead,  0,  len);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead,  0,  len);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  i.read(buf,  offset,  numToRead,  0,  len);	  totalRead    =    is.read(buf,    offset,    numToRead,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
691	[BUG]  [BUGGY]  if(numToRead  <  0)  {  hasHitEOF  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  hasHitEOF  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  hasHitEOF  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  if(numToRead    ==    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
692	[BUG]  [BUGGY]  if(numToRead!=  0)  {  hasHitEOF  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  0)  {  hasHitEOF  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  0)  {  hasHitEOF  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  if(numToRead    ==    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
693	[BUG]  [BUGGY]  if(numToRead!=  -1)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  -1)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  -1)  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
694	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  off,  entrySize);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  off,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  off,  entrySize);	  totalRead    =    currEntry.read(buf,    off,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
695	[BUG]  [BUGGY]  totalRead  =  currEntry.read(off,  buf,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(off,  buf,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(off,  buf,  numToRead);	  totalRead    =    currEntry.read(buf,    off,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
696	[BUG]  [BUGGY]  int  totalRead  =  currEntry.read(buf,  off,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  currEntry.read(buf,  off,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  currEntry.read(buf,  off,  numToRead);	  int    totalRead    =    currEntry.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
697	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  insertSize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  insertSize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  insertSize);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isSkip);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
698	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  unwrapped);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  unwrapped);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  unwrapped);	  totalRead    =    i.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
699	[BUG]  [BUGGY]  totalRead  =  i.read(buf,  offset,  entrySize,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  i.read(buf,  offset,  entrySize,  0);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  i.read(buf,  offset,  entrySize,  0);	  totalRead    =    is.read(buf,    offset,    entrySize,    0);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
700	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  len,  0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  len,  0);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  len,  0);	  totalRead    =    is.read(buf,    offset,    entrySize,    0);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
701	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  buf,  0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  buf,  0);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  buf,  0);	  totalRead    =    is.read(buf,    offset,    entrySize,    0);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
702	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  0);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  0);	  totalRead    =    is.read(buf,    offset,    entrySize,    0);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
703	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  length  -  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  length  -  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  is.read(buf,  offset,  numToRead,  length  -  1);	  numToRead    =    is.read(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
704	[BUG]  [BUGGY]  if(entrySize  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
705	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  throw  new  IllegalStateException( " ");  }	  totalRead    =    currEntry.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
706	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  System.arraycopy(currEntry,  0,  buf,  offset,  entrySize);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  System.arraycopy(currEntry,  0,  buf,  offset,  entrySize);  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  System.arraycopy(currEntry,  0,  buf,  offset,  entrySize);  }	  totalRead    =    currEntry.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
707	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  return  null;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  return  null;  }	  totalRead    =    currEntry.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
708	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  entrySize)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  totalRead    =    currEntry.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
709	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  buf,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  buf,  entryOffset,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  buf,  entryOffset,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
710	[BUG]  [BUGGY]  TotalRead  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  TotalRead  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	TotalRead  =  currEntry.read(buf,  offset,  numToRead);	  totalRead    =    currEntry.read(buf,    numToRead,    offset);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
711	[BUG]  [BUGGY]  numToRead  =  repaint.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  repaint.read(buf,  offset,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  repaint.read(buf,  offset,  numToRead);	  numToRead    =    rest.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
712	[BUG]  [BUGGY]  numToRead  =  cache.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  cache.read(buf,  offset,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  cache.read(buf,  offset,  numToRead);	  numToRead    =    rest.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
713	[BUG]  [BUGGY]  if(numToRead!=  0)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  0)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  0)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead!=    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
714	[BUG]  [BUGGY]  if(numToRead!=  -1)  {  hasHitEOF  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  -1)  {  hasHitEOF  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  -1)  {  hasHitEOF  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead!=    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
715	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  hasHitEOF  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >=  0)  {  hasHitEOF  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >=  0)  {  hasHitEOF  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead!=    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
716	[BUG]  [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  entries.length);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  entries.length);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  currEntry.read(buf,  offset,  entries.length);	  numToRead    =    is.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
717	[BUG]  [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  len);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  len);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  currEntry.read(buf,  offset,  len);	  numToRead    =    is.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
718	[BUG]  [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead,  0);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead,  0);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  i.read(buf,  offset,  numToRead,  0);	  totalRead    =    is.read(buf,    offset,    numToRead,    0);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
719	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
720	[BUG]  [BUGGY]  if(entryOffset  >  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  >  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entryOffset  >  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
721	[BUG]  [BUGGY]  if(entrySize  >  numToRead)  {  if(hasHitEOF  ||  entryOffset  <  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  numToRead)  {  if(hasHitEOF  ||  entryOffset  <  entrySize)  {  return  0;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  numToRead)  {  if(hasHitEOF  ||  entryOffset  <  entrySize)  {  return  0;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
722	[BUG]  [BUGGY]  if(entrySize  >  numToRead)  {  if(hasHitEOF  ||  entryOffset  ==  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  numToRead)  {  if(hasHitEOF  ||  entryOffset  ==  entrySize)  {  return  0;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  numToRead)  {  if(hasHitEOF  ||  entryOffset  ==  entrySize)  {  return  0;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
723	[BUG]  [BUGGY]  totalRead  =  i.read(buf,  offset,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  i.read(buf,  offset,  0,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  i.read(buf,  offset,  0,  numToRead);	  totalRead    =    is.read(buf,    offset,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
724	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF,  entryOffset);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF,  entryOffset);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF,  entryOffset);	  totalRead    =    is.read(buf,    offset,    numToRead,    hasHitEOF,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
725	[BUG]  [BUGGY]  int  totalRead  =  curr.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  curr.read(buf,  offset,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  curr.read(buf,  offset,  entrySize);	  int    totalRead    =    is.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
726	[BUG]  [BUGGY]  if(entrySize  >=  numToRead)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >=  numToRead)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >=  numToRead)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    entrySize)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
727	[BUG]  [BUGGY]  if(entryOffset  >=  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  >=  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entryOffset  >=  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    entrySize)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
728	[BUG]  [BUGGY]  if(entryOffset  ==  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  ==  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entryOffset  ==  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    entrySize)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
729	[BUG]  [BUGGY]  if(numToRead  <  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    entrySize)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
730	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  ==  0)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  ==  0)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    entrySize)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
731	[BUG]  [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  isSkip);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  isSkip);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  isSkip);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead,    isHitEOF);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
732	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  buf,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  buf,  entrySize,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  buf,  entrySize,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
733	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  buf,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  buf,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  buf,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
734	[BUG]  [BUGGY]  int  totalRead  =  i.read(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  i.read(buf,  offset,  numToRead,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  i.read(buf,  offset,  numToRead,  entrySize);	  int    totalRead    =    is.read(buf,    offset,    entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
735	[BUG]  [BUGGY]  int  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  entrySize);	  int    totalRead    =    is.read(buf,    offset,    entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
736	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >=  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >=  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
737	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
738	[BUG]  [BUGGY]  if(entrySize!=  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize!=  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize!=  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
739	[BUG]  [BUGGY]  totalRead  =  recv.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  recv.read(buf,  offset,  0);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  recv.read(buf,  offset,  0);	  totalRead    =    rest.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
740	[BUG]  [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead,  entryOffset);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  i.read(buf,  offset,  numToRead,  entryOffset);	  totalRead    =    is.read(buf,    offset,    numToRead,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
741	[BUG]  [BUGGY]  int  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  currentSize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  currentSize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  currentSize);	  int    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
742	[BUG]  [BUGGY]  int  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  isRecorded);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  isRecorded);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  isRecorded);	  int    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
743	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(!hasHitEOF  ||  entryOffset  >  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(!hasHitEOF  ||  entryOffset  >  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  if(!hasHitEOF  ||  entryOffset  >  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
744	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
745	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  off,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  off,  numToRead  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  off,  numToRead  +  1);	  totalRead    =    i.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
746	[BUG]  [BUGGY]  int  totalRead  =  i.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  i.read(buf,  offset,  numToRead,  len);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  i.read(buf,  offset,  numToRead,  len);	  int    totalRead    =    is.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
747	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  len  +  1);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead,  len  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead,  len  +  1);	  int    totalRead    =    is.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
748	[BUG]  [BUGGY]  totalRead  =  record.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  record.read(buf,  offset,  numToRead  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  record.read(buf,  offset,  numToRead  +  1);	  totalRead    =    rest.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
749	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  this.entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  this.entrySize);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
750	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  len  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  len  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  len  +  1);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
751	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  hasHitEOF  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  hasHitEOF  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  -1)  {  hasHitEOF  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
752	[BUG]  [BUGGY]  if(numToRead  <  0)  {  hasHitEOF  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  hasHitEOF  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  hasHitEOF  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
753	[BUG]  [BUGGY]  if(numToRead!=  0)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  0)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  0)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  if(numToRead!=    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
754	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  hasHitEOF  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >=  0)  {  hasHitEOF  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >=  0)  {  hasHitEOF  =  i.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  if(numToRead!=    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
755	[BUG]  [BUGGY]  if(numToRead!=  0)  {  hasHitEOF  =  i.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  0)  {  hasHitEOF  =  i.read(buf,  offset,  numToRead);  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  0)  {  hasHitEOF  =  i.read(buf,  offset,  numToRead);  }	  if(numToRead!=    0)    {    totalRead    =    i.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
756	[BUG]  [BUGGY]  entrySize  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  entrySize  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	entrySize  =  currEntry.read(buf,  offset,  numToRead);	  totalRead    =    currEntry.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
757	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  hasHitEOF  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  hasHitEOF  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  -1)  {  hasHitEOF  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
758	[BUG]  [BUGGY]  if(entrySize  <  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  <  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  <  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
759	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
760	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(!hasHitEOF  ||  entryOffset  >  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(!hasHitEOF  ||  entryOffset  >  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  if(!hasHitEOF  ||  entryOffset  >  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
761	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  <  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entryOffset  <  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
762	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >=  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >=  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
763	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(!hasHitEOF  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(!hasHitEOF  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  if(!hasHitEOF  ||  entryOffset  ==  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
764	[BUG]  [BUGGY]  numToRead  =  in.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  in.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	numToRead  =  in.read(buf,  offset,  numToRead,  hasHitEOF);	  numToRead    =    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
765	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  is.read);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  is.read);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  is.read);	  totalRead    =    is.read(buf,    offset,    numToRead,    available);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
766	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entries.length);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entries.length);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  entries.length);	  totalRead    =    i.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
767	[BUG]  [BUGGY]  totalRead  =  recv.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  recv.read(buf,  offset,  numToRead,  len);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  recv.read(buf,  offset,  numToRead,  len);	  totalRead    =    rest.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
768	[BUG]  [BUGGY]  totalRead  =  repaint.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  repaint.read(buf,  offset,  numToRead,  len);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  repaint.read(buf,  offset,  numToRead,  len);	  totalRead    =    rest.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
769	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  rest.read(buf,  offset,  numToRead,  1);	  totalRead    =    rest.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
770	[BUG]  [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  1;  i  <  numRecords.size();  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  1;  i  <  numRecords.size();  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  0)  {  for(int  i  =  1;  i  <  numRecords.size();  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numRecords.size();    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
771	[BUG]  [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  this.numRecords.size();  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  this.numRecords.size();  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  0)  {  for(int  i  =  0;  i  <  this.numRecords.size();  ++i)  {  hasHitEOF  =  true;  }	  if(entrySize    >    0)    {    for(int    i    =    0;    i    <    numRecords.size();    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
772	[BUG]  [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isRecorded);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isRecorded);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isRecorded);	  int    totalRead    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
773	[BUG]  [BUGGY]  totalRead  =  RestUtil.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  RestUtil.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  RestUtil.read(buf,  offset,  numToRead,  hasHitEOF);	  totalRead    =    rest.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
774	[BUG]  [BUGGY]  totalRead  =  cache.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  cache.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  cache.read(buf,  offset,  numToRead,  hasHitEOF);	  totalRead    =    rest.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
775	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
776	[BUG]  [BUGGY]  if(entryOffset  >  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  >  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entryOffset  >  entrySize)  {  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  1;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
777	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  entryOffset  >=  0)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  entryOffset  >=  0)  {  return  1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  0)  {  if(hasHitEOF  ||  entryOffset  >=  0)  {  return  1;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
778	[BUG]  [BUGGY]  if(entrySize  >  numToRead)  {  if(hasHitEOF  ||  entryOffset  ==  entrySize)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  numToRead)  {  if(hasHitEOF  ||  entryOffset  ==  entrySize)  {  return  1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  numToRead)  {  if(hasHitEOF  ||  entryOffset  ==  entrySize)  {  return  1;  }	  if(entrySize    >    numToRead)    {    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
779	[BUG]  [BUGGY]  int  totalRead  =  buffer.read(buf,  offset,  numToRead,  fileSize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  buffer.read(buf,  offset,  numToRead,  fileSize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  buffer.read(buf,  offset,  numToRead,  fileSize);	  int    totalRead    =    buffer.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
780	[BUG]  [BUGGY]  i.set(entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  i.set(entrySize,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	i.set(entrySize,  numToRead);	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
781	[BUG]  [BUGGY]  i.set(numToRead,  available());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  i.set(numToRead,  available());  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	i.set(numToRead,  available());	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
782	[BUG]  [BUGGY]  i.remove(0);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  i.remove(0);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	i.remove(0);	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
783	[BUG]  [BUGGY]  i.set(offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  i.set(offset,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	i.set(offset,  numToRead);	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
784	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  fileEncoding);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  fileEncoding);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  fileEncoding);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isRecord);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
785	[BUG]  [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  entryLimit);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  entryLimit);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  entryLimit);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead,    currentSize);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
786	[BUG]  [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  entryLength);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  entryLength);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  entryLength);	  totalRead    =    this.currEntry.read(buf,    offset,    numToRead,    currentSize);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
787	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  numToRead,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  numToRead,  offset,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  numToRead,  offset,  hasHitEOF);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
788	[BUG]  [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead,  currentSize);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead,  currentSize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead,  currentSize);	  TotalRead    totalRead    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
789	[BUG]  [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isEnabled(HitEOF));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isEnabled(HitEOF));  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isEnabled(HitEOF));	  TotalRead    totalRead    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
790	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  off,  0);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  off,  0);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  off,  0);	  totalRead    =    i.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
791	[BUG]  [BUGGY]  totalRead  =  i.read(buf,  offset,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  i.read(buf,  offset,  entrySize  +  1);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  i.read(buf,  offset,  entrySize  +  1);	  totalRead    =    is.read(buf,    offset,    entrySize    +    1);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
792	[BUG]  [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  else  {  System.arraycopy(currEntry.getMethod(),  numToRead,  available());  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  else  {  System.arraycopy(currEntry.getMethod(),  numToRead,  available());  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  else  {  System.arraycopy(currEntry.getMethod(),  numToRead,  available());  }	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
793	[BUG]  [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  else  {  System.arraycopy(currEntry.getName(),  numToRead,  available());  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  else  {  System.arraycopy(currEntry.getName(),  numToRead,  available());  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  else  {  System.arraycopy(currEntry.getName(),  numToRead,  available());  }	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
794	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  entrySize)  {  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  entrySize)  {  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }	  if(entrySize    ==    entrySize)    {    totalRead    =    is.read(buf,    offset,    entryOffset);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
795	[BUG]  [BUGGY]  if(entrySize  >=  entryOffset)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >=  entryOffset)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >=  entryOffset)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }	  if(entrySize    ==    entrySize)    {    totalRead    =    is.read(buf,    offset,    entryOffset);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
796	[BUG]  [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	hasHitEOF  =  is.read(buf,  offset,  entrySize);	  if(entrySize    ==    entrySize)    {    totalRead    =    is.read(buf,    offset,    entryOffset);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
797	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  ==  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  ==  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    ==    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
798	[BUG]  [BUGGY]  if(entrySize!=  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize!=  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize!=  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    ==    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
799	[BUG]  [BUGGY]  if(entryOffset  >=  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  >=  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entryOffset  >=  0)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    ==    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
800	[BUG]  [BUGGY]  if(entrySize!=  numToRead)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize!=  numToRead)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize!=  numToRead)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    ==    0)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
801	[BUG]  [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  buf.length);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  buf.length);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  buf.length);	  totalRead    =    this.currEntry.read(buf,    offset,    entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
802	[BUG]  [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  this.currEntry.read(buf,  offset,  numToRead,  numToRead);	  totalRead    =    this.currEntry.read(buf,    offset,    entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
803	[BUG]  [BUGGY]  if(numToRead  <  0)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  <  0)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
804	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  ==  -1)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
805	[BUG]  [BUGGY]  if(numToRead  >  0)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >  0)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >  0)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
806	[BUG]  [BUGGY]  if(numToRead  >=  -1)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >=  -1)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >=  -1)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
807	[BUG]  [BUGGY]  if(numToRead!=  -1)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  -1)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  -1)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
808	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >=  0)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >=  0)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    ==    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
809	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  off,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  off,  numToRead,  entrySize);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  off,  numToRead,  entrySize);	  totalRead    =    currEntry.read(buf,    offset,    entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
810	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  entries);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  entries);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  entries);	  totalRead    =    currEntry.read(buf,    offset,    entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
811	[BUG]  [BUGGY]  int  totalRead  =  hasHitEOF.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  hasHitEOF.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	int  totalRead  =  hasHitEOF.read(buf,  offset,  numToRead,  hasHitEOF);	  int    totalRead    =    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
812	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  entrySize)  {  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  entrySize)  {  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }	  if(entrySize    ==    entrySize)    {    totalRead    =    is.read(buf,    offset,    entryOffset);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
813	[BUG]  [BUGGY]  if(entrySize  >=  entryOffset)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >=  entryOffset)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >=  entryOffset)  {  totalRead  =  is.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }	  if(entrySize    ==    entrySize)    {    totalRead    =    is.read(buf,    offset,    entryOffset);    }    else    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
814	[BUG]  [BUGGY]  totalRead  =  currentry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currentry.read(buf,  offset,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currentry.read(buf,  offset,  numToRead);	  totalRead    =    curr.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
815	[BUG]  [BUGGY]  totalRead  =  curr.read(buf,  off,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  curr.read(buf,  off,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  curr.read(buf,  off,  numToRead);	  totalRead    =    curr.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
816	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >  0)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead  >  0)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    <    0)    {    if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
817	[BUG]  [BUGGY]  if(entrySize  >  numToRead)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)return  -1;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  numToRead)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entrySize  >  numToRead)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)return  -1;  }	  if(numToRead    >    entrySize)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
818	[BUG]  [BUGGY]  if(entryOffset  >  entrySize)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  >  entrySize)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entryOffset  >  entrySize)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    >    entrySize)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
819	[BUG]  [BUGGY]  if(entryToRead  >  numToRead)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryToRead  >  numToRead)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(entryToRead  >  numToRead)  {  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    >    entrySize)    {    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
820	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  len,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  len,  numToRead);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  currEntry.read(buf,  offset,  len,  numToRead);	  totalRead    =    currEntry.read(buf,    offset,    len);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
821	[BUG]  [BUGGY]  totalRead  =  curr.read(buf,  offset,  numToRead,  isRecorded);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  curr.read(buf,  offset,  numToRead,  isRecorded);  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	totalRead  =  curr.read(buf,  offset,  numToRead,  isRecorded);	  totalRead    =    curr.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
822	[BUG]  [BUGGY]  if(numToRead!=  -1)  {  hasHitEOF  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  -1)  {  hasHitEOF  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  -1)  {  hasHitEOF  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead!=    0)    {    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
823	[BUG]  [BUGGY]  if(numToRead!=  0)  {  hasHitEOF  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  0)  {  hasHitEOF  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]      count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	582	582	1	replace	if(numToRead!=  0)  {  hasHitEOF  =  this.currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead!=    0)    {    totalRead    =    this.currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
