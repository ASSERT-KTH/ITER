projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=is.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=is.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead,len);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=i.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=this.currEntry.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=currEntry.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=is.read(buf,offset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=is.read(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=is.read(buf,offset,entrySize,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=i.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=is.read(buf,offset,entryOffset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=is.read(buf,offset,numToRead,len);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=rest.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead+1,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=i.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,entrySize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead+2);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize==entrySize){totalRead=is.read(buf,offset,entryOffset);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize==entrySize){totalRead=is.read(buf,offset,entryOffset);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=this.currEntry.read(buf,offset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=this.currEntry.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){totalRead=this.currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=0){totalRead=this.currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=this.currEntry.read(buf,offset,entrySize,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){totalRead=this.currEntry.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,entrySize,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=currEntry.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){totalRead=currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,isHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,len);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,0,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,entrySize,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=rest.read(buf,offset,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,0L);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==entrySize){if(hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){if(!hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==entrySize){if(hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){if(!hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){if(!hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582ch=currEntry.getChronology();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){if(!hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead,0,len);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=rest.read(buf,offset,numToRead,len);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=rest.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=0){totalRead=i.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=i.read(buf,offset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){totalRead=i.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=0){totalRead=i.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){totalRead=i.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=is.read(buf,offset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=is.read(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=rest.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=is.read(buf,offset,numToRead,len);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=is.read(buf,offset,numToRead,length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,entrySize,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,entrySize,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=rest.read(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,entryOffset,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,entrySize,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead,hasHitEOF,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=rest.read(buf,offset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=i.read(buf,offset,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead,length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582TotalReadtotalRead=currEntry.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=curr.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,numToRead,offset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=rest.read(buf,offset,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=curr.read(buf,offset,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=i.read(buf,offset,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=is.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=is.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=is.read(buf,offset,numToRead,length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,0,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=i.read(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=curr.read(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>numToRead){if(hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582i.remove();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>numToRead){if(hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>numToRead){if(hasHitEOF||entryOffset>=entrySize){return1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){if(!hasHitEOF){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=curr.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=in.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead*1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=this.currEntry.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=this.currEntry.read(buf,offset,numToRead,len);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=this.currEntry.read(buf,offset,numToRead,isHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,isEnabled);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,isRecord);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=hasHitEOF.read(buf,offset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=this.currEntry.read(buf,offset,numToRead,currentSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=str.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=buffer.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,len);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,off,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=this.currEntry.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=buffer.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=currEntry.read(buf,offset,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>0){for(inti=0;i<numToRead;++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>0){for(inti=offset;i<numToRead;++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582i.remove();hasHitEOF=true;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>0){for(inti=0;i<numRecords.size();++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>entrySize){if(!hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>0){for(inti=0;i<numRecords;++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=i.read(buf,offset,numToRead,len);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,isRecorded);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,isSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=hasHitEOF.read(buf,offset,numToRead,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=hasHitEOF.read(buf,offset,entrySize,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=hasHitEOF.read(buf,offset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=hasHitEOF.read(buf,offset,entrySize,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=hasHitEOF.read(buf,numToRead,offset,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=hasHitEOF.read(buf,offset,numToRead,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){totalRead=i.read(buf,offset,numToRead+1);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=0){totalRead=i.read(buf,offset,numToRead+1);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){totalRead=i.read(buf,offset,numToRead+1);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=0){totalRead=i.read(buf,offset,numToRead+1);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=curr.read(buf,offset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=curr.read(buf,offset,entrySize,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=curr.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=curr.read(buf,offset,numToRead,isHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=curr.read(buf,offset,numToRead,len);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,entryOffset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,entrySize,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=is.read(buf,offset,entrySize,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,entrySize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,entryOffset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,entrySize+1,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=rest.read(buf,offset,entrySize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,entrySize+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==null){if(entrySize>0){for(inti=0;i<numRecords.size();++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582for(inti=0;i<numRecords.size();++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=numRecords.size();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==null){if(entrySize>1){for(inti=0;i<numRecords.size();++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==null){if(entrySize>0){for(inti=0;i<numRecords.size();++i){hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==null){if(entrySize>0){for(inti=0;i<numRecords.size();++i){hasHitEOF=true
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582intentrySize=numRecords.size();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=is.read(buf,offset,numToRead,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=currEntry.read(buf,offset,numToRead,length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=is.read(buf,offset,length,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=is.read(buf,offset,numToRead,length,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=is.read(buf,offset,numToRead,length+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=is.read(buf,offset,numToRead,0,length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=i.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==-1){if(numToRead!=0){totalRead=i.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=0){inttotalRead=i.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){if(numToRead!=0){totalRead=i.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=0){if(numToRead==0){totalRead=i.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=0){if(numToRead!=0){totalRead=i.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){if(numToRead!=-1){totalRead=i.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=buffer.read(buf,offset,entrySize,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=buffer.read(buf,offset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=buffer.read(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=buffer.read(buf,offset,entryOffset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582bytetotalRead=buffer.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,isHitEOF,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=currEntry.read(buf,offset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){totalRead=currEntry.read(buf,offset,numToRead,isHitEOF);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=0){totalRead=currEntry.read(buf,offset,numToRead,isHitEOF);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=this.currEntry.read(buf,offset,numToRead,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=this.currEntry.read(buf,offset,numToRead,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=this.currEntry.read(buf,offset,entryOffset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=this.currEntry.read(buf,offset,numToRead,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entryOffset==numToRead){if(hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){if(hasHitEOF||entryOffset>=0){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entryOffset==0){if(hasHitEOF||entryOffset>=0){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize==numToRead){if(hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==entryOffset){if(hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entryOffset==numToRead){if(hasHitEOF||entryOffset!=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize==numToRead){if(hasHitEOF||entryOffset!=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=this.currEntry.read(buf,offset,numToRead+1,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=this.currEntry.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=this.currEntry.read(buf,offset,numToRead+2);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=this.currEntry.read(buf,offset,numToRead*1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=this.currEntry.read(buf,offset,entrySize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead,length,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead,length+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=rest.read(buf,offset,numToRead,length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead,0,length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582ch=currEntry.getChronology(numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582ch=currEntry.getChronology(entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582ch=currEntry.getCHronology();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582ch=currEntry.getChronology().hashCode();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582ch=currEntry.getCurrentChronology();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582ch=currEntry.getChronology().blockSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=str.read(buf,offset,numToRead+1,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=str.read(buf,offset,entrySize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=str.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=str.read(buf,offset,numToRead+2);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead,entrySize,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,entryOffset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,entrySize,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,entrySize,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,hasHitEOF,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){totalRead=currEntry.read(buf,offset,numToRead,hasHitEOF);}else{entryOffset+=numToRead;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){totalRead=currEntry.read(buf,offset,numToRead,hasHitEOF);}else{thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=curr.read(buf,offset,entrySize,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>entrySize){totalRead=curr.read(buf,offset,entrySize);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize!=entrySize){totalRead=curr.read(buf,offset,entrySize);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>entrySize){totalRead=curr.read(buf,offset,entrySize);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==-1){if(!hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize==0){if(!hasHitEOF||entryOffset>=numToRead){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize!=0){if(!hasHitEOF||entryOffset>=numToRead){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entryOffset==0){if(!hasHitEOF||entryOffset>=0){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){if(!hasHitEOF||entryOffset!=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead*2);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead*1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead*4);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=rest.read(buf,offset,numToRead*1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,entrySize*1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead*3);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=i.read(buf,offset,numToRead*1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=currEntry.read(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=currEntry.read(buf,numToRead,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=currEntry.read(entry,offset,buf.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582bytetotalRead=currEntry.read(buf,offset,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=currEntry.read(buff,offset,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,0,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,0,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead,0,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,0,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,0,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=rest.read(buf,offset,0,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize==entrySize){totalRead=curr.read(buf,offset,entryOffset);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize!=entrySize){totalRead=curr.read(buf,offset,entryOffset);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead,entrySize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){for(inti=offset;i<entrySize;++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582for(inti=offset;i<numToRead;++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>0){for(inti=offset;i<entrySize;++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>0){for(inti=entryOffset;i<numToRead;++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){for(inti=offset;i<entrySize;++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>0){for(inti=entrySize;i<numToRead;++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=rec.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=repaint.read(buf,offset,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead+1,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=currEntry.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead+2);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=currEntry.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,0L,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead,0L);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,0L,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582TotalReadtotalRead=currEntry.read(buf,offset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582TotalReadtotalRead=currEntry.read(buf,offset,entrySize,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582TotalReadtotalRead=currEntry.read(buf,offset,numToRead,len);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582TotalReadtotalRead=currEntry.read(buf,offset,numToRead,isHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582TotalReadtotalRead=currEntry.read(buf,offset,numToRead,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582TotalReadtotalRead=currEntry.read(buf,offset,numToRead,length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582TotalReadtotalRead=currEntry.read(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>entrySize){if(hasHitEOF||entryOffset>=entrySize){return1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==entrySize){if(hasHitEOF||entryOffset>=entrySize){return1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>=entrySize){if(hasHitEOF||entryOffset>=entrySize){return1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<entrySize){if(hasHitEOF||entryOffset>=entrySize){return1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=entrySize){if(hasHitEOF||entryOffset>=entrySize){return1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<numRecords){if(hasHitEOF||entryOffset>=entrySize){return1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<=entrySize){if(hasHitEOF||entryOffset>=entrySize){return1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=rest.read(buf,offset,entrySize,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=rest.read(buf,offset,entrySize,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=repaint.read(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>entrySize){totalRead=currEntry.read(buf,offset,entryOffset);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize==entrySize){totalRead=currEntry.read(buf,offset,entryOffset);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>entrySize){totalRead=currEntry.read(buf,offset,entryOffset);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>=entrySize){totalRead=currEntry.read(buf,offset,entryOffset);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize==entrySize){totalRead=currEntry.read(buf,offset,entryOffset);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>entrySize){totalRead=currEntry.read(buf,offset,entrySize);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize!=entrySize){totalRead=currEntry.read(buf,offset,entrySize);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>entrySize){totalRead=currEntry.read(buf,offset,entrySize);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize!=entrySize){totalRead=currEntry.read(buf,offset,entrySize);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=currEntry.read(buf,offset,numToRead,len);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=is.read(buf,offset,numToRead,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=is.read(buf,offset,len,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=is.read(buf,offset,numToRead,0,len);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==-1){if(!hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=0){if(!hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){if(!hasHitEOF&&entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){if(!hasHitEOF||entryOffset!=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize==0){if(!hasHitEOF||entryOffset>=numToRead){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=this.currEntry.read(buf,offset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=this.currEntry.read(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=this.currEntry.read(buf,offset,numToRead,isHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=this.currEntry.read(buf,offset,numToRead,len);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=this.currEntry.read(buf,offset,numToRead,true);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==null){if(entrySize>0){for(inti=0;i<numRecords;++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=null){if(entrySize>0){for(inti=0;i<numRecords;++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582for(inti=0;i<numRecords;++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){for(inti=0;i<entrySize;++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>0){for(inti=0;i<numRecords.length;++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582for(inti=0;i<entrySize;++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=rest.read(buf,offset,numToRead+1,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=repaint.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=rec.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=rest.read(buf,offset,numToRead+2);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=i.read(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=is.read(buf,offset,entryOffset,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=this.currEntry.read(buf,offset,entrySize,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){totalRead=this.currEntry.read(buf,offset,numToRead,hasHitEOF);}else{entryOffset+=numToRead;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){totalRead=this.currEntry.read(buf,offset,numToRead,hasHitEOF);}else{thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=this.currEntry.read(buf,offset,numToRead,isHitEOF,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==entrySize){if(entryOffset==entrySize){totalRead=is.read(buf,offset,entryOffset);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entryOffset==entrySize){totalRead=is.read(buf,offset,entryOffset);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=entrySize){if(entryOffset==entrySize){totalRead=is.read(buf,offset,entryOffset);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entryOffset==entrySize){if(numToRead==entrySize){totalRead=is.read(buf,offset,entryOffset);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entryOffset==entrySize){hasHitEOF=is.read(buf,offset,entryOffset);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==entrySize){if(entryOffset>=entrySize){totalRead=is.read(buf,offset,entryOffset);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==entrySize){if(entryOffset!=entrySize){totalRead=is.read(buf,offset,entryOffset);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(i.hasNext()){totalRead=i.read(buf,offset,entrySize);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(i.hasNext()){totalRead=i.read(buf,offset,entrySize);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(i.hasNext()){totalRead=i.read(buf,offset,entrySize);}else{thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(i.hasNext()){totalRead=i.read(buf,offset,entrySize);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>entrySize){if(hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==entrySize){if(hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>=entrySize){if(hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=entrySize){if(hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<entrySize){if(hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<numRecords){if(hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>entrySize){if(hasHitEOF||entryOffset!=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==-1){if(numToRead!=0){totalRead=i.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=-1){if(numToRead!=0){totalRead=i.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){if(numToRead!=0){totalRead=i.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){if(numToRead!=-1){totalRead=i.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=0){if(numToRead==-1){totalRead=i.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=0){if(numToRead!=0){totalRead=i.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(i.hasNext()){i.remove();}else{thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(i.hasNext()){i.remove();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(i.hasNext()){i.remove();}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(i.hasNext()){i.remove();}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(i.hasNext()){i.remove();}else{currEntry.setAccessible(true);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(i.hasNext()){i.remove();}else{currEntry.setHitEOF(numToRead);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==entrySize){if(!hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>numToRead){if(!hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>=entrySize){if(!hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=entrySize){if(!hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<entrySize){if(!hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entryOffset>numToRead){if(!hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==entrySize){if(!hasHitEOF||entryOffset!=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){totalRead=currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){totalRead=currEntry.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){totalRead=currEntry.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){totalRead=currEntry.read(buf,offset,numToRead);}else{thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==-1){if(numToRead==0){totalRead=currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=-1){if(numToRead==0){totalRead=currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){if(numToRead==-1){totalRead=currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==-1){if(numToRead==0){hasHitEOF=currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){if(numToRead==0){totalRead=currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=0){if(numToRead==-1){totalRead=currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,hasHitEOF,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead,entryOffset,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,entryOffset,hasHitEOF,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead,hasHitEOF,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead,1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead,0,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead,2);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead,0,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead,false);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=is.read(buf,offset,entrySize,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=currEntry.read(buf,offset,entrySize,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=currEntry.read(buf,offset,numToRead,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=i.read(buf,offset,entrySize,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==len){totalRead=currEntry.read(buf,offset,len);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==len){totalRead=currEntry.read(buf,offset,len);}else{thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==len){totalRead=currEntry.read(buf,offset,len);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==len){totalRead=currEntry.read(buf,offset,len);}else{entryOffset+=numToRead;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==len){totalRead=currEntry.read(buf,offset,len);}else{entrySize+=numToRead;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead,entryOffset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=currEntry.read(buf,offset,numToRead,len);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=is.read(buf,offset,numToRead,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=rest.read(buf,offset,numToRead,len);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=is.read(buf,offset,numToRead,1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,entrySize,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,entryOffset,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,entrySize,0,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,isRecord,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=currEntry.read(buf,offset,numToRead,isRecord);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){if(!hasHitEOF){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=0){if(!hasHitEOF){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==-1){if(!hasHitEOF){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>=0){if(!hasHitEOF){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){if(hasHitEOF){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(!hasHitEOF){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=rest.read(buf,offset,numToRead,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=rest.read(buf,offset,entrySize,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=rec.read(buf,offset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=repaint.read(buf,offset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=rest.read(buf,offset,numToRead,hasHitEOF,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=i.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=is.read(buf,offset,numToRead+1,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=is.read(buf,offset,entrySize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=is.read(buf,offset,numToRead+2);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=is.read(buf,offset,numToRead*1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,0,len);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead,0,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize<0){if(!hasHitEOF||entryOffset>=numToRead){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=0){if(!hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>=0){if(!hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entryOffset<0){if(!hasHitEOF||entryOffset>=0){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==-1){if(numToRead!=0){totalRead=this.currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=-1){if(numToRead>=0){totalRead=this.currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==-1){if(numToRead>=0){totalRead=this.currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=0){if(numToRead==-1){totalRead=this.currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){if(numToRead!=-1){totalRead=this.currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==-1){if(numToRead==0){totalRead=i.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=-1){if(numToRead==0){totalRead=i.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){if(numToRead==0){totalRead=i.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){if(numToRead==-1){totalRead=i.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=currEntry.read(buf,offset,numToRead,length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=is.read(buf,offset,numToRead,length,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=is.read(buf,offset,length,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=rest.read(buf,offset,numToRead,length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=is.read(buf,offset,numToRead,length+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=buffer.read(buf,offset,entrySize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=buffer.read(buf,offset,numToRead+1,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=buffer.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=cache.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=buffer.read(buf,offset,numToRead+2);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,isEnabled,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){totalRead=currEntry.read(buf,offset,numToRead,isEnabled);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){totalRead=currEntry.read(buf,offset,numToRead,isEnabled);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){totalRead=currEntry.read(buf,offset,numToRead,isEnabled);}else{thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,entrySize,numToRead,isEnabled);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==-1){if(numToRead==0){totalRead=this.currEntry.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){if(!hasHitEOF){totalRead=this.currEntry.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){if(numToRead==0){totalRead=this.currEntry.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){if(numToRead==-1){totalRead=this.currEntry.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=0){if(numToRead==-1){totalRead=this.currEntry.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){if(!hasHitEOF){totalRead=this.currEntry.read(buf,offset,numToRead);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(i.hasNext()){totalRead=i.read(buf,offset,0);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(i.hasNext()){totalRead=i.read(buf,offset,0);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(i.hasNext()){totalRead=i.read(buf,offset,0);}else{thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(i.hasNext()){totalRead=buf.read(i.next(),offset,0);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(i.hasNext()){totalRead=i.read(buf,offset,0);}else{entryOffset+=numToRead;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){if(hasHitEOF||entryOffset>=0){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize==numToRead){if(hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entryOffset==numToRead){if(hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entryOffset==0){if(hasHitEOF||entryOffset>=0){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=entrySize){if(hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){if(hasHitEOF||entryOffset>=0){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,isRecorded,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,false);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=currEntry.read(buf,offset,entryOffset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=is.read(buf,offset,entryOffset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=currEntry.read(buf,offset,numToRead,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=is.read(buf,offset,numToRead,buf.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>entrySize){if(hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>=entrySize){if(hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<entrySize){if(hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=entrySize){if(hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<numRecords){if(hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>numRecords){if(hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=currEntry.read(buf,offset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=is.read(buf,offset,numToRead,hasHitEOF,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=i.read(buf,offset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,entryOffset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=entrySize){totalRead=currEntry.read(buf,offset,entrySize,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==entrySize){totalRead=currEntry.read(buf,offset,entrySize,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=entrySize){totalRead=currEntry.read(buf,offset,entrySize,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==entrySize){if(entryOffset==entrySize){totalRead=is.read(buf,offset,entryOffset);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entryOffset==entrySize){totalRead=is.read(buf,offset,entryOffset);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entryOffset==entrySize){hasHitEOF=is.read(buf,offset,entryOffset);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==entrySize){if(entryOffset>=entrySize){totalRead=is.read(buf,offset,entryOffset);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entryOffset==entrySize){if(numToRead==entrySize){totalRead=is.read(buf,offset,entryOffset);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==entrySize){if(entryOffset!=entrySize){totalRead=is.read(buf,offset,entryOffset);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entryOffset==entrySize){if(numToRead==currEntry.length){totalRead=is.read(buf,offset,entryOffset);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=currEntry.read(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=currEntry.read(buf,offset,numToRead,isHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=currEntry.read(buf,offset,numToRead,false);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=currEntry.read(buf,offset,numToRead,true);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=is.read(buf,offset,entrySize,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=rest.read(buf,offset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=is.read(buf,offset,entryOffset,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=is.read(buf,offset,entrySize,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==-1){if(numToRead==0){totalRead=i.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=-1){if(numToRead==0){totalRead=i.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){if(!hasHitEOF){totalRead=i.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){if(numToRead==0){totalRead=i.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){if(!hasHitEOF){totalRead=i.read(buf,offset,numToRead);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=rest.read(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=is.read(buf,offset,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){totalRead=currEntry.read(buf,off,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){totalRead=currEntry.read(buf,off,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){totalRead=currEntry.read(buf,off,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){totalRead=currEntry.read(buf,off,numToRead);}else{entryOffset+=numToRead;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){totalRead=currEntry.read(buf,off,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==-1){if(numToRead==0){totalRead=this.currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=-1){if(numToRead==0){totalRead=this.currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){if(!hasHitEOF){totalRead=this.currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){if(numToRead==-1){totalRead=this.currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){if(numToRead==0){totalRead=this.currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=rest.read(buf,offset,numToRead,isHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=repaint.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582i.remove();hasHitEOF=false;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(i.hasNext()){i.remove();hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582n.remove();hasHitEOF=true;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==null){i.remove();hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(i.hasNext()){i.remove();hasHitEOF=true;}else{thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=null){i.remove();hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){if(!hasHitEOF||entryOffset==entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>=0){if(!hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize<0){if(!hasHitEOF||entryOffset>=numToRead){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead,available,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead,available,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=currEntry.read(buf,offset,numToRead,isHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582IntegertotalRead=currEntry.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582bytetotalRead=i.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=rest.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead+1,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=i.read(buf,offset,numToRead+1,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(i.hasNext()){totalRead=i.read(buf,offset,numToRead,hasHitEOF);}else{entryOffset+=numToRead;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(i.hasNext()){totalRead=i.read(buf,offset,numToRead,hasHitEOF);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(i.hasNext()){totalRead=i.read(buf,offset,numToRead,hasHitEOF);}else{thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=rest.read(buf,offset,numToRead,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=rest.read(buf,offset,numToRead,0,len);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){if(entrySize>0){for(inti=0;i<numToRead;++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){if(entrySize>0){for(inti=0;i<numToRead;++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582for(inti=0;i<numToRead;++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){if(entrySize>0){for(inti=0;i<entrySize;++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==0){if(entrySize>0){for(inti=0;i<entrySize;++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){if(entrySize>0){for(inti=0;i<entryOffset;++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=rest.read(buf,offset,0,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=rest.read(buf,offset,entrySize,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=rest.read(buf,offset,0L);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=repaint.read(buf,offset,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize==entrySize){totalRead=i.read(buf,offset,entryOffset);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize==entrySize){totalRead=i.read(buf,offset,entryOffset);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(i.hasNext()){totalRead=i.read(buf,offset,entryOffset);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(i.hasNext()){totalRead=i.read(buf,offset,entryOffset);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=rest.read(buf,offset,numToRead,isHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=rec.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,entryOffset,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,entryOffset,hasHitEOF,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=in.read(buf,offset,numToRead+1,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=in.read(buf,offset,entrySize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=this.in.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=in.read(buf,offset,numToRead+2);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=in.read(buf,offset,numToRead*1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=i.read(buf,offset,numToRead+2);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,entrySize+2);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=curr.read(buf,offset,numToRead+1,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=curr.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=curr.read(buf,offset,entrySize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=curr.read(buf,offset,numToRead*1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=curr.read(buf,offset,numToRead+2);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,isSkip,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=currEntry.read(buf,offset,numToRead,isSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,0,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead,0,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,0,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(i.hasNext()){totalRead=i.read(buf,offset,numToRead,len);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=i.read(buf,offset,numToRead,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(i.hasNext()){totalRead=i.read(buf,offset,numToRead,len);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(i.hasNext()){totalRead=i.read(buf,offset,numToRead,len);}else{thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=rest.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=is.read(buf,offset,numToRead+1,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=is.read(buf,offset,numToRead*1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=is.read(buf,offset,entrySize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=is.read(buf,offset,numToRead+2);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=this.currEntry.read(buf,offset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=this.currEntry.read(buf,offset,entrySize,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582bytetotalRead=this.currEntry.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=this.currEntry.read(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=this.currEntry.read(buf,offset,numToRead,isHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,0L);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,numToRead,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=is.read(buf,offset,numToRead,length-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=curr.read(buf,offset,numToRead,isRecord);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=i.read(buf,offset,0,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=-1){if(!hasHitEOF){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize<0){if(!hasHitEOF){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>=-1){if(!hasHitEOF){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=recv.read(buf,offset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=rest.read(buf,offset,numToRead,isEnabled(HitEOF));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,off,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,off,entrySize,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,0,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(numToRead,off,buf);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=curr.read(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==-1){totalRead=currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=-1){totalRead=currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>=-1){totalRead=currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){totalRead=currEntry.read(buf,offset,0);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){totalRead=currEntry.read(buf,offset,-1);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=recv.read(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=RestUtil.read(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=this.currEntry.read(buf,offset,numToRead,isEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=this.currEntry.read(buf,offset,numToRead,true);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=this.currEntry.read(buf,offset,numToRead,false);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=curr.read(buf,offset,numToRead+3);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,numToRead,i,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=-1){totalRead=this.currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==-1){totalRead=this.currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>=-1){totalRead=this.currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>=0){totalRead=this.currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=curr.read(buf,numToRead,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=curr.read(buf,offset,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,iOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582TotalReadtotalRead=currEntry.read(buf,offset,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,isEnabled)&&isEnabled;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,this.isEnabled);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,isEnabled,len);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead,length-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=buffer.read(buf,offset,numToRead*1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=-1){totalRead=i.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=0){totalRead=currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>=0){totalRead=i.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=0){hasHitEOF=i.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,entrySize-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=-1){if(!hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize==0){if(!hasHitEOF||entryOffset>=0){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize==0){if(!hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(!hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=recv.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=RestUtil.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=currEntry.read(buf,offset,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>=numToRead){totalRead=is.read(buf,offset,entryOffset);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>entrySize){totalRead=is.read(buf,offset,entryOffset);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize==numToRead){totalRead=is.read(buf,offset,entryOffset);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=is.read(buf,offset,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582intentrySize=is.read(buf,offset,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582ch=currEntry.getChronology()+1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,inputSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,entrySize,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=rest.read(buf,offset,-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=rest.read(buf,offset,1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=encoding.read(buf,offset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=hasHitEOF.read(buf,offset,numToRead,len);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=hasHitEOF.read(buf,offset,numToRead,cache.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,fileSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582i.remove(numToRead);hasHitEOF=true;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582i.set();hasHitEOF=true;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582i.remove(0);hasHitEOF=true;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=currEntry.read(buf,offset,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=currEntry.read(buf,offset,numToRead,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead,hasHitEOF,entrySize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=this.currEntry.read(buf,offset,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead,recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,0L+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>access){if(hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<=entrySize){if(hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,numToRead,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>0){for(inti=offset;i<numToRead;++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){for(inti=offset;i<numToRead;++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>0){for(inti=length;i<numToRead;++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582i.remove(entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582i.remove(numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582i.setIndex(numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582i.remove(offset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582i.setIsEOF(hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582i.setRead(offset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=curr.read(buf,offset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=is.read(buf,offset,0,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==-1){totalRead=this.currEntry.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=-1){totalRead=this.currEntry.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>=-1){totalRead=this.currEntry.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>0){totalRead=this.currEntry.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){totalRead=this.currEntry.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>0){for(inti=0;i<entrySize;++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>0){for(inti=0;i<entries.length;++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>0){for(inti=0;i<entryOffset;++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>0){for(inti=0;i<accessSize;++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,0,is.read);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=available.read(buf,offset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=hasHitEOF.read(buf,offset,numToRead+1,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=this.currEntry.read(buf,offset,numToRead,isRecorded);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=is.read(buf,offset,numToRead,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=is.read(buf,offset,numToRead,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>0){for(inti=0;i<numRecords.size();++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>0){for(inti=0;i<currEntry.size();++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>0){for(inti=0;i<numRecords.size();++i){hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582IntegertotalRead=numRecords.get(numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=this.currEntry.read(buf,offset,numToRead,accessSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,numToRead,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buff,offset,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=str.read(buf,offset,numToRead*1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==-1){totalRead=i.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){totalRead=i.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){totalRead=i.read(buf,offset,hasHitEOF);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582TotalReadtotalRead=currEntry.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,numToRead,i+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=recv.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entryOffset>0){for(inti=0;i<numRecords;++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>0){for(inti=0;i<numRecords;++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>=0){for(inti=0;i<numRecords;++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){for(inti=0;i<numRecords;++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>access){if(hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<=entrySize){if(hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>accessSize){if(hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>entrySize){if(hasHitEOF||entryOffset!=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,iSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,currentSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=this.currEntry.read(buf,offset,numToRead,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=this.currEntry.read(buf,offset,numToRead,currentSize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=this.currEntry.read(buf,offset,numToRead,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=recv.read(buf,offset,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=RestUtil.read(buf,offset,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=strEntry.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=in.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=recv.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=buffer.read(buf,offset,numToRead,len);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=buffer.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=buffer.read(buf,offset,numToRead,length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=-1){if(!hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){if(!hasHitEOF||entryOffset>=0){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>access){if(hasHitEOF||entryOffset>=entrySize){return1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>accessSize){if(hasHitEOF||entryOffset>=entrySize){return1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead,0,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,len,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,null);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=is.read(buf,offset,numToRead,buf);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=currEntry.read(buf,offset,numToRead,true);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==-1){totalRead=i.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=-1){totalRead=i.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){totalRead=i.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==-1){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=RestUtil.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=recv.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=curr.read(buf,numToRead,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,isEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,true);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,numToRead,offset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead+3);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==-1){if(hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582TotalReadtotalRead=currEntry.read(buf,offset,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,numToRead,len);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,0,len);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582bytetotalRead=is.read(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582IntegertotalRead=is.read(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=is.read(buf,offset,len,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582bytetotalRead=currEntry.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=currEntrySize.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=curr.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>=numToRead){totalRead=is.read(buf,offset,entryOffset);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>entrySize){totalRead=is.read(buf,offset,entryOffset);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize==numToRead){totalRead=is.read(buf,offset,entryOffset);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=rest.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=this.currEntry.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=this.currEntry.read(buf,offset,numToRead,len);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==-1){if(hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>=0){if(!hasHitEOF||entryOffset>=numToRead){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize==0){if(!hasHitEOF||entryOffset>=0){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582TotalReadtotalRead=currEntry.read(buf,offset,numToRead,isEnabled);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582TotalReadtotalRead=currEntry.read(buf,offset,numToRead,true);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582TotalReadtotalRead=currEntry.read(buf,offset,numToRead,null);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=this.currEntry.read(buf,numToRead,offset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=this.currEntry.read(buf,offset,numToRead+3);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>0){totalRead=this.currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){totalRead=this.currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==-1){totalRead=this.currEntry.read(buf,offset,0);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>=-1){if(!hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize<0){if(!hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=rest.read(buf,offset,numToRead,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=rest.read(buf,offset,numToRead,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=is.read(buf,offset,0,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=is.read(buf,offset,numToRead,fileSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,this.shouldReset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,numToRead,-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,isRecorded+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=0){totalRead=currEntry.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>=0){totalRead=i.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=0){totalRead=i.read(buf,offset,hasHitEOF);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=this.currEntry.read(buf,offset,numToRead,1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=this.currEntry.read(buf,offset,numToRead,2);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=curr.read(buf,off,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=i.read(buf,offset,numToRead,length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=currEntry.read(buf,offset,numToRead,inputSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=currEntry.read(buf,offset,numToRead,buf.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,this);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=is.read(buf,offset,0L,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,1,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582ch=currEntry.getKey();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582ch=currEntry.getChronologyRecord();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582ch=currEntry.getChronology(entry);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=0){totalRead=this.currEntry.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){hasHitEOF=this.currEntry.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>=0){totalRead=this.currEntry.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582hasHitEOF=this.currEntry.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=cache.read(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>0){for(inti=0;i<numToRead;++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize<0){for(inti=0;i<numToRead;++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582hasHitEOF=true;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entryOffset==entrySize){if(hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entryOffset>=entrySize){if(hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>=numToRead){if(hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entryOffset==0){if(hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>entrySize){if(hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>0){if(hasHitEOF||entryOffset>=0){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>numToRead){if(hasHitEOF||entryOffset==entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=i.read(buf,offset,numToRead,0,len);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){hasHitEOF=i.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=0){hasHitEOF=i.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=-1){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,off,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(off,buf,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=currEntry.read(buf,off,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,insertSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,unwrapped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=i.read(buf,offset,entrySize,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,len,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,buf,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,0,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=is.read(buf,offset,numToRead,length-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize<0){for(inti=0;i<numRecords;++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>entrySize){totalRead=currEntry.read(buf,offset,entrySize);}else{thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>entrySize){totalRead=currEntry.read(buf,offset,entrySize);}else{System.arraycopy(currEntry,0,buf,offset,entrySize);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>entrySize){totalRead=currEntry.read(buf,offset,entrySize);}else{returnnull;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>entrySize){totalRead=currEntry.read(buf,offset,entrySize);}else{thrownewIllegalArgumentException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,buf,entryOffset,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582TotalRead=currEntry.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=repaint.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=cache.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=0){hasHitEOF=currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=-1){hasHitEOF=i.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>=0){hasHitEOF=i.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=currEntry.read(buf,offset,entries.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=currEntry.read(buf,offset,len);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=i.read(buf,offset,numToRead,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>entrySize){if(hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entryOffset>entrySize){if(hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>numToRead){if(hasHitEOF||entryOffset<entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>numToRead){if(hasHitEOF||entryOffset==entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=i.read(buf,offset,0,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,hasHitEOF,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=curr.read(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>=numToRead){if(hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entryOffset>=entrySize){if(hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entryOffset==entrySize){if(hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<entrySize){if(hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize==0){if(hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=this.currEntry.read(buf,offset,numToRead,isSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,buf,entrySize,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,buf,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=i.read(buf,offset,numToRead,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=this.currEntry.read(buf,offset,numToRead,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>=0){if(!hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>0){if(!hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize!=0){if(!hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=recv.read(buf,offset,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=i.read(buf,offset,numToRead,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=this.currEntry.read(buf,offset,numToRead,currentSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=this.currEntry.read(buf,offset,numToRead,isRecorded);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){if(!hasHitEOF||entryOffset>entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>0){if(!hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,off,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=i.read(buf,offset,numToRead,len);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=is.read(buf,offset,numToRead,len+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=record.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,len+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==-1){hasHitEOF=i.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){hasHitEOF=i.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=0){hasHitEOF=currEntry.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>=0){hasHitEOF=i.read(buf,offset,numToRead);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=0){hasHitEOF=i.read(buf,offset,numToRead);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582entrySize=currEntry.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==-1){hasHitEOF=this.currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize<0){if(!hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>0){if(!hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){if(!hasHitEOF||entryOffset>entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entryOffset<0){if(!hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>=0){if(!hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){if(!hasHitEOF||entryOffset==entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582numToRead=in.read(buf,offset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,is.read);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,entries.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=recv.read(buf,offset,numToRead,len);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=repaint.read(buf,offset,numToRead,len);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=rest.read(buf,offset,numToRead,1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>0){for(inti=1;i<numRecords.size();++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>0){for(inti=0;i<this.numRecords.size();++i){hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=currEntry.read(buf,offset,numToRead,isRecorded);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=RestUtil.read(buf,offset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=cache.read(buf,offset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>entrySize){if(hasHitEOF||entryOffset>=entrySize){return1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entryOffset>entrySize){if(hasHitEOF||entryOffset>=entrySize){return1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>0){if(hasHitEOF||entryOffset>=0){return1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>numToRead){if(hasHitEOF||entryOffset==entrySize){return1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=buffer.read(buf,offset,numToRead,fileSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582i.set(entrySize,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582i.set(numToRead,available());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582i.remove(0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582i.set(offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,fileEncoding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=this.currEntry.read(buf,offset,numToRead,entryLimit);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=this.currEntry.read(buf,offset,numToRead,entryLength);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,numToRead,offset,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582TotalReadtotalRead=currEntry.read(buf,offset,numToRead,currentSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582TotalReadtotalRead=currEntry.read(buf,offset,numToRead,isEnabled(HitEOF));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,off,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=i.read(buf,offset,entrySize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(i.hasNext()){i.remove();hasHitEOF=true;}else{System.arraycopy(currEntry.getMethod(),numToRead,available());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(i.hasNext()){i.remove();hasHitEOF=true;}else{System.arraycopy(currEntry.getName(),numToRead,available());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>entrySize){hasHitEOF=is.read(buf,offset,entryOffset);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>=entryOffset){totalRead=is.read(buf,offset,entryOffset);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582hasHitEOF=is.read(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize==0){if(!hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize!=0){if(!hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entryOffset>=0){if(!hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize!=numToRead){if(!hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=this.currEntry.read(buf,offset,numToRead,buf.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=this.currEntry.read(buf,offset,numToRead,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead<0){hasHitEOF=currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead==-1){hasHitEOF=currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>0){hasHitEOF=currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>=-1){hasHitEOF=currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=-1){hasHitEOF=currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>=0){hasHitEOF=currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,off,numToRead,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,numToRead,entries);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582inttotalRead=hasHitEOF.read(buf,offset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>entrySize){hasHitEOF=is.read(buf,offset,entryOffset);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>=entryOffset){totalRead=is.read(buf,offset,entryOffset);}else{hasHitEOF=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currentry.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=curr.read(buf,off,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead>0){if(!hasHitEOF){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entrySize>numToRead){if(!hasHitEOF||entryOffset>=entrySize)return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entryOffset>entrySize){if(!hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(entryToRead>numToRead){if(!hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=currEntry.read(buf,offset,len,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582totalRead=curr.read(buf,offset,numToRead,isRecorded);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=-1){hasHitEOF=this.currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java582if(numToRead!=0){hasHitEOF=this.currEntry.read(buf,offset,numToRead);}else{hasHitEOF=true;}
